webpackJsonp(["survey.module"],{

/***/ "./node_modules/ng2-img-cropper/index.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_imageCropperModule__ = __webpack_require__("./node_modules/ng2-img-cropper/src/imageCropperModule.js");
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_imageCropperModule__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_imageCropperComponent__ = __webpack_require__("./node_modules/ng2-img-cropper/src/imageCropperComponent.js");
/* unused harmony reexport ImageCropperComponent */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_imageCropper__ = __webpack_require__("./node_modules/ng2-img-cropper/src/imageCropper.js");
/* unused harmony reexport ImageCropper */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_cropperSettings__ = __webpack_require__("./node_modules/ng2-img-cropper/src/cropperSettings.js");
/* unused harmony reexport CropperSettings */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_cropperDrawSettings__ = __webpack_require__("./node_modules/ng2-img-cropper/src/cropperDrawSettings.js");
/* unused harmony reexport CropperDrawSettings */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_model_bounds__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/bounds.js");
/* unused harmony reexport Bounds */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_model_cropPosition__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/cropPosition.js");
/* unused harmony reexport CropPosition */
// core


// extra classes



// models


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/cropperDrawSettings.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CropperDrawSettings; });
var CropperDrawSettings = (function () {
    function CropperDrawSettings() {
        this.strokeWidth = 1;
        this.strokeColor = 'rgba(255,255,255,1)';
        this.dragIconStrokeWidth = 1;
        this.dragIconStrokeColor = 'rgba(0,0,0,1)';
        this.dragIconFillColor = 'rgba(255,255,255,1)';
    }
    return CropperDrawSettings;
}());

//# sourceMappingURL=cropperDrawSettings.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/cropperSettings.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CropperSettings; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__cropperDrawSettings__ = __webpack_require__("./node_modules/ng2-img-cropper/src/cropperDrawSettings.js");

var CropperSettings = (function () {
    function CropperSettings() {
        this.canvasWidth = 300;
        this.canvasHeight = 300;
        this.dynamicSizing = false;
        this.width = 200;
        this.height = 200;
        this.minWidth = 50;
        this.minHeight = 50;
        this.minWithRelativeToResolution = true;
        this.croppedWidth = 100;
        this.croppedHeight = 100;
        this.cropperDrawSettings = new __WEBPACK_IMPORTED_MODULE_0__cropperDrawSettings__["a" /* CropperDrawSettings */]();
        this.touchRadius = 20;
        this.noFileInput = false;
        this.allowedFilesRegex = /\.(jpe?g|png|gif)$/i;
        this.cropOnResize = true;
        this.preserveSize = false;
        this.compressRatio = 1.0;
        this._rounded = false;
        this._keepAspect = true;
        // init
    }
    Object.defineProperty(CropperSettings.prototype, "rounded", {
        get: function () {
            return this._rounded;
        },
        set: function (val) {
            this._rounded = val;
            if (val) {
                this._keepAspect = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CropperSettings.prototype, "keepAspect", {
        get: function () {
            return this._keepAspect;
        },
        set: function (val) {
            if (val === false && this._rounded) {
                throw new Error('Cannot set keep aspect to false on rounded cropper. Ellipsis not supported');
            }
            this._keepAspect = val;
        },
        enumerable: true,
        configurable: true
    });
    return CropperSettings;
}());

//# sourceMappingURL=cropperSettings.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/exif.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Fraction */
/* unused harmony export Debug */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Exif; });
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Fraction = (function (_super) {
    __extends(Fraction, _super);
    function Fraction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Fraction;
}(Number));

// Console debug wrapper that makes code looks a little bit cleaner
var Debug = (function () {
    function Debug() {
    }
    Debug.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (Exif.debug) {
            console.log(args);
        }
    };
    return Debug;
}());

var Exif = (function () {
    function Exif() {
    }
    Exif.addEvent = function (element, event, handler) {
        if (element.addEventListener) {
            element.addEventListener(event, handler, false);
        }
        else {
            // Hello, IE!
            if (element.attachEvent) {
                element.attachEvent('on' + event, handler);
            }
        }
    };
    Exif.imageHasData = function (img) {
        return !!(img.exifdata);
    };
    Exif.base64ToArrayBuffer = function (base64) {
        base64 = base64.replace(/^data:([^;]+);base64,/gmi, '');
        var binary = atob(base64);
        var len = binary.length;
        var buffer = new ArrayBuffer(len);
        var view = new Uint8Array(buffer);
        for (var i = 0; i < len; i++) {
            view[i] = binary.charCodeAt(i);
        }
        return buffer;
    };
    Exif.objectURLToBlob = function (url, callback) {
        var http = new XMLHttpRequest();
        http.open('GET', url, true);
        http.responseType = 'blob';
        http.onload = function () {
            if (http.status === 200 || http.status === 0) {
                callback(http.response);
            }
        };
        http.send();
    };
    Exif.getImageData = function (img, callback) {
        function handleBinaryFile(binFile) {
            var data = Exif.findEXIFinJPEG(binFile);
            var iptcdata = Exif.findIPTCinJPEG(binFile);
            img.exifdata = data || {};
            img.iptcdata = iptcdata || {};
            if (callback) {
                callback.call(img);
            }
        }
        if ('src' in img && img.src) {
            if (/^data:/i.test(img.src)) {
                var arrayBuffer = Exif.base64ToArrayBuffer(img.src);
                handleBinaryFile(arrayBuffer);
            }
            else {
                if (/^blob:/i.test(img.src)) {
                    var fileReader_1 = new FileReader();
                    fileReader_1.onload = function (e) {
                        handleBinaryFile(e.target.result);
                    };
                    Exif.objectURLToBlob(img.src, function (blob) {
                        fileReader_1.readAsArrayBuffer(blob);
                    });
                }
                else {
                    var http_1 = new XMLHttpRequest();
                    http_1.onload = function () {
                        if (http_1.status === 200 || http_1.status === 0) {
                            handleBinaryFile(http_1.response);
                        }
                        else {
                            throw 'Could not load image';
                        }
                    };
                    http_1.open('GET', img.src, true);
                    http_1.responseType = 'arraybuffer';
                    http_1.send(null);
                }
            }
        }
        else {
            if (FileReader && (img instanceof Blob || img instanceof File)) {
                var fileReader = new FileReader();
                fileReader.onload = function (e) {
                    Debug.log('Got file of length ' + e.target.result.byteLength);
                    handleBinaryFile(e.target.result);
                };
                fileReader.readAsArrayBuffer(img);
            }
        }
    };
    Exif.findEXIFinJPEG = function (file) {
        var dataView = new DataView(file);
        Debug.log('Got file of length ' + file.byteLength);
        if ((dataView.getUint8(0) !== 0xFF) || (dataView.getUint8(1) !== 0xD8)) {
            Debug.log('Not a valid JPEG');
            return false; // not a valid jpeg
        }
        var offset = 2;
        var length = file.byteLength;
        var marker;
        while (offset < length) {
            if (dataView.getUint8(offset) !== 0xFF) {
                Debug.log('Not a valid marker at offset ' + offset + ', found: ' + dataView.getUint8(offset));
                return false; // not a valid marker, something is wrong
            }
            marker = dataView.getUint8(offset + 1);
            Debug.log(marker);
            // we could implement handling for other markers here,
            // but we're only looking for 0xFFE1 for EXIF data
            if (marker === 225) {
                Debug.log('Found 0xFFE1 marker');
                return Exif.readEXIFData(dataView, offset + 4); // , dataView.getUint16(offset + 2) - 2);
                // offset += 2 + file.getShortAt(offset+2, true);
            }
            else {
                offset += 2 + dataView.getUint16(offset + 2);
            }
        }
    };
    Exif.findIPTCinJPEG = function (file) {
        var dataView = new DataView(file);
        Debug.log('Got file of length ' + file.byteLength);
        if ((dataView.getUint8(0) !== 0xFF) || (dataView.getUint8(1) !== 0xD8)) {
            Debug.log('Not a valid JPEG');
            return false; // not a valid jpeg
        }
        var offset = 2;
        var length = file.byteLength;
        var isFieldSegmentStart = function (_dataView, _offset) {
            return (_dataView.getUint8(_offset) === 0x38 && _dataView.getUint8(_offset + 1) === 0x42 && _dataView.getUint8(_offset + 2) === 0x49 && _dataView.getUint8(_offset + 3) === 0x4D && _dataView.getUint8(_offset + 4) === 0x04 && _dataView.getUint8(_offset + 5) === 0x04);
        };
        while (offset < length) {
            if (isFieldSegmentStart(dataView, offset)) {
                // Get the length of the name header (which is padded to an even number of bytes)
                var nameHeaderLength = dataView.getUint8(offset + 7);
                if (nameHeaderLength % 2 !== 0) {
                    nameHeaderLength += 1;
                }
                // Check for pre photoshop 6 format
                if (nameHeaderLength === 0) {
                    // Always 4
                    nameHeaderLength = 4;
                }
                var startOffset = offset + 8 + nameHeaderLength;
                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);
                return Exif.readIPTCData(file, startOffset, sectionLength);
            }
            // Not the marker, continue searching
            offset++;
        }
    };
    Exif.readIPTCData = function (file, startOffset, sectionLength) {
        var dataView = new DataView(file);
        var data = {};
        var fieldValue, fieldName, dataSize, segmentType, segmentSize;
        var segmentStartPos = startOffset;
        while (segmentStartPos < startOffset + sectionLength) {
            if (dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos + 1) === 0x02) {
                segmentType = dataView.getUint8(segmentStartPos + 2);
                if (segmentType in Exif.IptcFieldMap) {
                    dataSize = dataView.getInt16(segmentStartPos + 3);
                    segmentSize = dataSize + 5;
                    fieldName = Exif.IptcFieldMap[segmentType];
                    fieldValue = Exif.getStringFromDB(dataView, segmentStartPos + 5, dataSize);
                    // Check if we already stored a value with this name
                    if (data.hasOwnProperty(fieldName)) {
                        // Value already stored with this name, create multivalue field
                        if (data[fieldName] instanceof Array) {
                            data[fieldName].push(fieldValue);
                        }
                        else {
                            data[fieldName] = [data[fieldName], fieldValue];
                        }
                    }
                    else {
                        data[fieldName] = fieldValue;
                    }
                }
            }
            segmentStartPos++;
        }
        return data;
    };
    Exif.readTags = function (file, tiffStart, dirStart, strings, bigEnd) {
        var entries = file.getUint16(dirStart, !bigEnd);
        var tags = {};
        var entryOffset;
        var tag;
        for (var i = 0; i < entries; i++) {
            entryOffset = dirStart + i * 12 + 2;
            tag = strings[file.getUint16(entryOffset, !bigEnd)];
            if (!tag) {
                Debug.log('Unknown tag: ' + file.getUint16(entryOffset, !bigEnd));
            }
            tags[tag] = Exif.readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);
        }
        return tags;
    };
    Exif.readTagValue = function (file, entryOffset, tiffStart, dirStart, bigEnd) {
        var type = file.getUint16(entryOffset + 2, !bigEnd);
        var numValues = file.getUint32(entryOffset + 4, !bigEnd);
        var valueOffset = file.getUint32(entryOffset + 8, !bigEnd) + tiffStart;
        var offset;
        var vals, val, n;
        var numerator;
        var denominator;
        switch (type) {
            case 1: // byte, 8-bit unsigned int
            case 7:// undefined, 8-bit byte, value depending on field
                if (numValues === 1) {
                    return file.getUint8(entryOffset + 8, !bigEnd);
                }
                else {
                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);
                    vals = [];
                    for (n = 0; n < numValues; n++) {
                        vals[n] = file.getUint8(offset + n);
                    }
                    return vals;
                }
            case 2:// ascii, 8-bit byte
                offset = numValues > 4 ? valueOffset : (entryOffset + 8);
                return Exif.getStringFromDB(file, offset, numValues - 1);
            case 3:// short, 16 bit int
                if (numValues === 1) {
                    return file.getUint16(entryOffset + 8, !bigEnd);
                }
                else {
                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);
                    vals = [];
                    for (n = 0; n < numValues; n++) {
                        vals[n] = file.getUint16(offset + 2 * n, !bigEnd);
                    }
                    return vals;
                }
            case 4:// long, 32 bit int
                if (numValues === 1) {
                    return file.getUint32(entryOffset + 8, !bigEnd);
                }
                else {
                    vals = [];
                    for (n = 0; n < numValues; n++) {
                        vals[n] = file.getUint32(valueOffset + 4 * n, !bigEnd);
                    }
                    return vals;
                }
            case 5:// rational = two long values, first is numerator, second is denominator
                if (numValues === 1) {
                    numerator = file.getUint32(valueOffset, !bigEnd);
                    denominator = file.getUint32(valueOffset + 4, !bigEnd);
                    val = new Fraction(numerator / denominator);
                    val.numerator = numerator;
                    val.denominator = denominator;
                    return val;
                }
                else {
                    vals = [];
                    for (n = 0; n < numValues; n++) {
                        numerator = file.getUint32(valueOffset + 8 * n, !bigEnd);
                        denominator = file.getUint32(valueOffset + 4 + 8 * n, !bigEnd);
                        vals[n] = new Fraction(numerator / denominator);
                        vals[n].numerator = numerator;
                        vals[n].denominator = denominator;
                    }
                    return vals;
                }
            case 9:// slong, 32 bit signed int
                if (numValues === 1) {
                    return file.getInt32(entryOffset + 8, !bigEnd);
                }
                else {
                    vals = [];
                    for (n = 0; n < numValues; n++) {
                        vals[n] = file.getInt32(valueOffset + 4 * n, !bigEnd);
                    }
                    return vals;
                }
            case 10:// signed rational, two slongs, first is numerator, second is denominator
                if (numValues === 1) {
                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset + 4, !bigEnd);
                }
                else {
                    vals = [];
                    for (n = 0; n < numValues; n++) {
                        vals[n] = file.getInt32(valueOffset + 8 * n, !bigEnd) / file.getInt32(valueOffset + 4 + 8 * n, !bigEnd);
                    }
                    return vals;
                }
            default:
                break;
        }
    };
    Exif.getStringFromDB = function (buffer, start, length) {
        var outstr = '';
        for (var n = start; n < start + length; n++) {
            outstr += String.fromCharCode(buffer.getUint8(n));
        }
        return outstr;
    };
    Exif.readEXIFData = function (file, start) {
        if (Exif.getStringFromDB(file, start, 4) !== 'Exif') {
            Debug.log('Not valid EXIF data! ' + Exif.getStringFromDB(file, start, 4));
            return false;
        }
        var bigEnd, tags, tag, exifData, gpsData, tiffOffset = start + 6;
        // test for TIFF validity and endianness
        if (file.getUint16(tiffOffset) === 0x4949) {
            bigEnd = false;
        }
        else {
            if (file.getUint16(tiffOffset) === 0x4D4D) {
                bigEnd = true;
            }
            else {
                Debug.log('Not valid TIFF data! (no 0x4949 or 0x4D4D)');
                return false;
            }
        }
        if (file.getUint16(tiffOffset + 2, !bigEnd) !== 0x002A) {
            Debug.log('Not valid TIFF data! (no 0x002A)');
            return false;
        }
        var firstIFDOffset = file.getUint32(tiffOffset + 4, !bigEnd);
        if (firstIFDOffset < 0x00000008) {
            Debug.log('Not valid TIFF data! (First offset less than 8)', file.getUint32(tiffOffset + 4, !bigEnd));
            return false;
        }
        tags = Exif.readTags(file, tiffOffset, tiffOffset + firstIFDOffset, Exif.TiffTags, bigEnd);
        if (tags.ExifIFDPointer) {
            exifData = Exif.readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, Exif.Tags, bigEnd);
            for (tag in exifData) {
                if ({}.hasOwnProperty.call(exifData, tag)) {
                    switch (tag) {
                        case 'LightSource':
                        case 'Flash':
                        case 'MeteringMode':
                        case 'ExposureProgram':
                        case 'SensingMethod':
                        case 'SceneCaptureType':
                        case 'SceneType':
                        case 'CustomRendered':
                        case 'WhiteBalance':
                        case 'GainControl':
                        case 'Contrast':
                        case 'Saturation':
                        case 'Sharpness':
                        case 'SubjectDistanceRange':
                        case 'FileSource':
                            exifData[tag] = Exif.StringValues[tag][exifData[tag]];
                            break;
                        case 'ExifVersion':
                        case 'FlashpixVersion':
                            exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);
                            break;
                        case 'ComponentsConfiguration':
                            var compopents = 'Components';
                            exifData[tag] = Exif.StringValues[compopents][exifData[tag][0]] + Exif.StringValues[compopents][exifData[tag][1]] + Exif.StringValues[compopents][exifData[tag][2]] + Exif.StringValues[compopents][exifData[tag][3]];
                            break;
                        default:
                            break;
                    }
                    tags[tag] = exifData[tag];
                }
            }
        }
        if (tags.GPSInfoIFDPointer) {
            gpsData = Exif.readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, Exif.GPSTags, bigEnd);
            for (tag in gpsData) {
                if ({}.hasOwnProperty.call(gpsData, tag)) {
                    switch (tag) {
                        case 'GPSVersionID':
                            gpsData[tag] = gpsData[tag][0] + '.' + gpsData[tag][1] + '.' + gpsData[tag][2] + '.' + gpsData[tag][3];
                            break;
                        default:
                            break;
                    }
                    tags[tag] = gpsData[tag];
                }
            }
        }
        return tags;
    };
    Exif.getData = function (img, callback) {
        if ((img instanceof Image || img instanceof HTMLImageElement) && !img.complete) {
            return false;
        }
        if (!Exif.imageHasData(img)) {
            Exif.getImageData(img, callback);
        }
        else {
            if (callback) {
                callback.call(img);
            }
        }
        return true;
    };
    Exif.getTag = function (img, tag) {
        if (!Exif.imageHasData(img)) {
            return;
        }
        return img.exifdata[tag];
    };
    ;
    Exif.getAllTags = function (img) {
        if (!Exif.imageHasData(img)) {
            return {};
        }
        var a, data = img.exifdata, tags = {};
        for (a in data) {
            if (data.hasOwnProperty(a)) {
                tags[a] = data[a];
            }
        }
        return tags;
    };
    ;
    Exif.pretty = function (img) {
        if (!Exif.imageHasData(img)) {
            return '';
        }
        var a, data = img.exifdata, strPretty = '';
        for (a in data) {
            if (data.hasOwnProperty(a)) {
                if (typeof data[a] === 'object') {
                    if (data[a] instanceof Number) {
                        strPretty += a + " : " + data[a] + " [" + data[a].numerator + "/" + data[a].denominator + "]\r\n";
                    }
                    else {
                        strPretty += a + " : [" + data[a].length + " values]\r\n";
                    }
                }
                else {
                    strPretty += a + " : " + data[a] + "\r\n";
                }
            }
        }
        return strPretty;
    };
    Exif.readFromBinaryFile = function (file) {
        return Exif.findEXIFinJPEG(file);
    };
    Exif.debug = false;
    Exif.IptcFieldMap = {
        0x78: 'caption',
        0x6E: 'credit',
        0x19: 'keywords',
        0x37: 'dateCreated',
        0x50: 'byline',
        0x55: 'bylineTitle',
        0x7A: 'captionWriter',
        0x69: 'headline',
        0x74: 'copyright',
        0x0F: 'category'
    };
    Exif.Tags = {
        // version tags
        0x9000: 'ExifVersion',
        0xA000: 'FlashpixVersion',
        // colorspace tags
        0xA001: 'ColorSpace',
        // image configuration
        0xA002: 'PixelXDimension',
        0xA003: 'PixelYDimension',
        0x9101: 'ComponentsConfiguration',
        0x9102: 'CompressedBitsPerPixel',
        // user information
        0x927C: 'MakerNote',
        0x9286: 'UserComment',
        // related file
        0xA004: 'RelatedSoundFile',
        // date and time
        0x9003: 'DateTimeOriginal',
        0x9004: 'DateTimeDigitized',
        0x9290: 'SubsecTime',
        0x9291: 'SubsecTimeOriginal',
        0x9292: 'SubsecTimeDigitized',
        // picture-taking conditions
        0x829A: 'ExposureTime',
        0x829D: 'FNumber',
        0x8822: 'ExposureProgram',
        0x8824: 'SpectralSensitivity',
        0x8827: 'ISOSpeedRatings',
        0x8828: 'OECF',
        0x9201: 'ShutterSpeedValue',
        0x9202: 'ApertureValue',
        0x9203: 'BrightnessValue',
        0x9204: 'ExposureBias',
        0x9205: 'MaxApertureValue',
        0x9206: 'SubjectDistance',
        0x9207: 'MeteringMode',
        0x9208: 'LightSource',
        0x9209: 'Flash',
        0x9214: 'SubjectArea',
        0x920A: 'FocalLength',
        0xA20B: 'FlashEnergy',
        0xA20C: 'SpatialFrequencyResponse',
        0xA20E: 'FocalPlaneXResolution',
        0xA20F: 'FocalPlaneYResolution',
        0xA210: 'FocalPlaneResolutionUnit',
        0xA214: 'SubjectLocation',
        0xA215: 'ExposureIndex',
        0xA217: 'SensingMethod',
        0xA300: 'FileSource',
        0xA301: 'SceneType',
        0xA302: 'CFAPattern',
        0xA401: 'CustomRendered',
        0xA402: 'ExposureMode',
        0xA403: 'WhiteBalance',
        0xA404: 'DigitalZoomRation',
        0xA405: 'FocalLengthIn35mmFilm',
        0xA406: 'SceneCaptureType',
        0xA407: 'GainControl',
        0xA408: 'Contrast',
        0xA409: 'Saturation',
        0xA40A: 'Sharpness',
        0xA40B: 'DeviceSettingDescription',
        0xA40C: 'SubjectDistanceRange',
        // other tags
        0xA005: 'InteroperabilityIFDPointer', 0xA420: 'ImageUniqueID' // Identifier assigned uniquely to each image
    };
    Exif.TiffTags = {
        0x0100: 'ImageWidth',
        0x0101: 'ImageHeight',
        0x8769: 'ExifIFDPointer',
        0x8825: 'GPSInfoIFDPointer',
        0xA005: 'InteroperabilityIFDPointer',
        0x0102: 'BitsPerSample',
        0x0103: 'Compression',
        0x0106: 'PhotometricInterpretation',
        0x0112: 'Orientation',
        0x0115: 'SamplesPerPixel',
        0x011C: 'PlanarConfiguration',
        0x0212: 'YCbCrSubSampling',
        0x0213: 'YCbCrPositioning',
        0x011A: 'XResolution',
        0x011B: 'YResolution',
        0x0128: 'ResolutionUnit',
        0x0111: 'StripOffsets',
        0x0116: 'RowsPerStrip',
        0x0117: 'StripByteCounts',
        0x0201: 'JPEGInterchangeFormat',
        0x0202: 'JPEGInterchangeFormatLength',
        0x012D: 'TransferFunction',
        0x013E: 'WhitePoint',
        0x013F: 'PrimaryChromaticities',
        0x0211: 'YCbCrCoefficients',
        0x0214: 'ReferenceBlackWhite',
        0x0132: 'DateTime',
        0x010E: 'ImageDescription',
        0x010F: 'Make',
        0x0110: 'Model',
        0x0131: 'Software',
        0x013B: 'Artist',
        0x8298: 'Copyright'
    };
    Exif.GPSTags = {
        0x0000: 'GPSVersionID',
        0x0001: 'GPSLatitudeRef',
        0x0002: 'GPSLatitude',
        0x0003: 'GPSLongitudeRef',
        0x0004: 'GPSLongitude',
        0x0005: 'GPSAltitudeRef',
        0x0006: 'GPSAltitude',
        0x0007: 'GPSTimeStamp',
        0x0008: 'GPSSatellites',
        0x0009: 'GPSStatus',
        0x000A: 'GPSMeasureMode',
        0x000B: 'GPSDOP',
        0x000C: 'GPSSpeedRef',
        0x000D: 'GPSSpeed',
        0x000E: 'GPSTrackRef',
        0x000F: 'GPSTrack',
        0x0010: 'GPSImgDirectionRef',
        0x0011: 'GPSImgDirection',
        0x0012: 'GPSMapDatum',
        0x0013: 'GPSDestLatitudeRef',
        0x0014: 'GPSDestLatitude',
        0x0015: 'GPSDestLongitudeRef',
        0x0016: 'GPSDestLongitude',
        0x0017: 'GPSDestBearingRef',
        0x0018: 'GPSDestBearing',
        0x0019: 'GPSDestDistanceRef',
        0x001A: 'GPSDestDistance',
        0x001B: 'GPSProcessingMethod',
        0x001C: 'GPSAreaInformation',
        0x001D: 'GPSDateStamp',
        0x001E: 'GPSDifferential'
    };
    Exif.StringValues = {
        ExposureProgram: {
            0: 'Not defined',
            1: 'Manual',
            2: 'Normal program',
            3: 'Aperture priority',
            4: 'Shutter priority',
            5: 'Creative program',
            6: 'Action program',
            7: 'Portrait mode',
            8: 'Landscape mode'
        }, MeteringMode: {
            0: 'Unknown',
            1: 'Average',
            2: 'CenterWeightedAverage',
            3: 'Spot',
            4: 'MultiSpot',
            5: 'Pattern',
            6: 'Partial',
            255: 'Other'
        }, LightSource: {
            0: 'Unknown',
            1: 'Daylight',
            2: 'Fluorescent',
            3: 'Tungsten (incandescent light)',
            4: 'Flash',
            9: 'Fine weather',
            10: 'Cloudy weather',
            11: 'Shade',
            12: 'Daylight fluorescent (D 5700 - 7100K)',
            13: 'Day white fluorescent (N 4600 - 5400K)',
            14: 'Cool white fluorescent (W 3900 - 4500K)',
            15: 'White fluorescent (WW 3200 - 3700K)',
            17: 'Standard light A',
            18: 'Standard light B',
            19: 'Standard light C',
            20: 'D55',
            21: 'D65',
            22: 'D75',
            23: 'D50',
            24: 'ISO studio tungsten',
            255: 'Other'
        }, Flash: {
            0x0000: 'Flash did not fire',
            0x0001: 'Flash fired',
            0x0005: 'Strobe return light not detected',
            0x0007: 'Strobe return light detected',
            0x0009: 'Flash fired, compulsory flash mode',
            0x000D: 'Flash fired, compulsory flash mode, return light not detected',
            0x000F: 'Flash fired, compulsory flash mode, return light detected',
            0x0010: 'Flash did not fire, compulsory flash mode',
            0x0018: 'Flash did not fire, auto mode',
            0x0019: 'Flash fired, auto mode',
            0x001D: 'Flash fired, auto mode, return light not detected',
            0x001F: 'Flash fired, auto mode, return light detected',
            0x0020: 'No flash function',
            0x0041: 'Flash fired, red-eye reduction mode',
            0x0045: 'Flash fired, red-eye reduction mode, return light not detected',
            0x0047: 'Flash fired, red-eye reduction mode, return light detected',
            0x0049: 'Flash fired, compulsory flash mode, red-eye reduction mode',
            0x004D: 'Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected',
            0x004F: 'Flash fired, compulsory flash mode, red-eye reduction mode, return light detected',
            0x0059: 'Flash fired, auto mode, red-eye reduction mode',
            0x005D: 'Flash fired, auto mode, return light not detected, red-eye reduction mode',
            0x005F: 'Flash fired, auto mode, return light detected, red-eye reduction mode'
        }, SensingMethod: {
            1: 'Not defined',
            2: 'One-chip color area sensor',
            3: 'Two-chip color area sensor',
            4: 'Three-chip color area sensor',
            5: 'Color sequential area sensor',
            7: 'Trilinear sensor',
            8: 'Color sequential linear sensor'
        }, SceneCaptureType: {
            0: 'Standard', 1: 'Landscape', 2: 'Portrait', 3: 'Night scene'
        }, SceneType: {
            1: 'Directly photographed'
        }, CustomRendered: {
            0: 'Normal process', 1: 'Custom process'
        }, WhiteBalance: {
            0: 'Auto white balance', 1: 'Manual white balance'
        }, GainControl: {
            0: 'None', 1: 'Low gain up', 2: 'High gain up', 3: 'Low gain down', 4: 'High gain down'
        }, Contrast: {
            0: 'Normal', 1: 'Soft', 2: 'Hard'
        }, Saturation: {
            0: 'Normal', 1: 'Low saturation', 2: 'High saturation'
        }, Sharpness: {
            0: 'Normal', 1: 'Soft', 2: 'Hard'
        }, SubjectDistanceRange: {
            0: 'Unknown', 1: 'Macro', 2: 'Close view', 3: 'Distant view'
        }, FileSource: {
            3: 'DSC'
        },
        Components: {
            0: '', 1: 'Y', 2: 'Cb', 3: 'Cr', 4: 'R', 5: 'G', 6: 'B'
        }
    };
    return Exif;
}());

//# sourceMappingURL=exif.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/imageCropper.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ImageCropper; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_bounds__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/bounds.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_cornerMarker__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/cornerMarker.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_cropTouch__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/cropTouch.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_dragMarker__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/dragMarker.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_imageCropperModel__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/imageCropperModel.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__ = __webpack_require__("./node_modules/ng2-img-cropper/src/imageCropperDataShare.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__model_pointPool__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/pointPool.js");
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();







var ImageCropper = (function (_super) {
    __extends(ImageCropper, _super);
    function ImageCropper(cropperSettings) {
        var _this = _super.call(this) || this;
        var x = 0;
        var y = 0;
        var width = cropperSettings.width;
        var height = cropperSettings.height;
        var keepAspect = cropperSettings.keepAspect;
        var touchRadius = cropperSettings.touchRadius;
        var minWidth = cropperSettings.minWidth;
        var minHeight = cropperSettings.minHeight;
        var croppedWidth = cropperSettings.croppedWidth;
        var croppedHeight = cropperSettings.croppedHeight;
        _this.cropperSettings = cropperSettings;
        _this.crop = _this;
        _this.x = x;
        _this.y = y;
        if (width === void 0) {
            _this.width = 100;
        }
        if (height === void 0) {
            _this.height = 50;
        }
        if (keepAspect === void 0) {
            _this.keepAspect = true;
        }
        if (touchRadius === void 0) {
            _this.touchRadius = 20;
        }
        _this.minWidth = minWidth;
        _this.minHeight = minHeight;
        _this.keepAspect = false;
        _this.aspectRatio = 0;
        _this.currentDragTouches = [];
        _this.isMouseDown = false;
        _this.ratioW = 1;
        _this.ratioH = 1;
        _this.fileType = cropperSettings.fileType;
        _this.imageSet = false;
        _this.pointPool = new __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */](200);
        _this.tl = new __WEBPACK_IMPORTED_MODULE_1__model_cornerMarker__["a" /* CornerMarker */](x, y, touchRadius, _this.cropperSettings);
        _this.tr = new __WEBPACK_IMPORTED_MODULE_1__model_cornerMarker__["a" /* CornerMarker */](x + width, y, touchRadius, _this.cropperSettings);
        _this.bl = new __WEBPACK_IMPORTED_MODULE_1__model_cornerMarker__["a" /* CornerMarker */](x, y + height, touchRadius, _this.cropperSettings);
        _this.br = new __WEBPACK_IMPORTED_MODULE_1__model_cornerMarker__["a" /* CornerMarker */](x + width, y + height, touchRadius, _this.cropperSettings);
        _this.tl.addHorizontalNeighbour(_this.tr);
        _this.tl.addVerticalNeighbour(_this.bl);
        _this.tr.addHorizontalNeighbour(_this.tl);
        _this.tr.addVerticalNeighbour(_this.br);
        _this.bl.addHorizontalNeighbour(_this.br);
        _this.bl.addVerticalNeighbour(_this.tl);
        _this.br.addHorizontalNeighbour(_this.bl);
        _this.br.addVerticalNeighbour(_this.tr);
        _this.markers = [_this.tl, _this.tr, _this.bl, _this.br];
        _this.center = new __WEBPACK_IMPORTED_MODULE_3__model_dragMarker__["a" /* DragMarker */](x + (width / 2), y + (height / 2), touchRadius, _this.cropperSettings);
        _this.keepAspect = keepAspect;
        _this.aspectRatio = height / width;
        _this.croppedImage = new Image();
        _this.currentlyInteracting = false;
        _this.cropWidth = croppedWidth;
        _this.cropHeight = croppedHeight;
        return _this;
    }
    ImageCropper.sign = function (x) {
        if (+x === x) {
            return (x === 0) ? x : (x > 0) ? 1 : -1;
        }
        return NaN;
    };
    ImageCropper.getMousePos = function (canvas, evt) {
        var rect = canvas.getBoundingClientRect();
        return __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(evt.clientX - rect.left, evt.clientY - rect.top);
    };
    ImageCropper.getTouchPos = function (canvas, touch) {
        var rect = canvas.getBoundingClientRect();
        return __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(touch.clientX - rect.left, touch.clientY - rect.top);
    };
    ImageCropper.detectVerticalSquash = function (img) {
        var ih = img.height;
        var canvas = document.createElement('canvas');
        canvas.width = 1;
        canvas.height = ih;
        var ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        var imageData = ctx.getImageData(0, 0, 1, ih);
        if (imageData) {
            var data = imageData.data;
            // search image edge pixel position in case it is squashed vertically.
            var sy = 0;
            var ey = ih;
            var py = ih;
            while (py > sy) {
                var alpha = data[(py - 1) * 4 + 3];
                if (alpha === 0) {
                    ey = py;
                }
                else {
                    sy = py;
                }
                py = (ey + sy) >> 1;
            }
            var ratio = (py / ih);
            return (ratio === 0) ? 1 : ratio;
        }
        else {
            return 1;
        }
    };
    ImageCropper.prototype.getDataUriMimeType = function (dataUri) {
        // Get a substring because the regex does not perform well on very large strings. Cater for optional charset. Length 50 shoould be enough.
        var dataUriSubstring = dataUri.substring(0, 50);
        var mimeType = 'image/png';
        // data-uri scheme
        // data:[<media type>][;charset=<character set>][;base64],<data>
        var regEx = RegExp(/^(data:)([\w\/\+]+);(charset=[\w-]+|base64).*,(.*)/gi);
        var matches = regEx.exec(dataUriSubstring);
        if (matches && matches[2]) {
            mimeType = matches[2];
            if (mimeType == 'image/jpg') {
                mimeType = 'image/jpeg';
            }
        }
        return mimeType;
    };
    ImageCropper.prototype.prepare = function (canvas) {
        this.buffer = document.createElement('canvas');
        this.cropCanvas = document.createElement('canvas');
        // todo get more reliable parent width value.
        var responsiveWidth = canvas.parentElement ? canvas.parentElement.clientWidth : 0;
        if (responsiveWidth > 0 && this.cropperSettings.dynamicSizing) {
            this.cropCanvas.width = responsiveWidth;
            this.buffer.width = responsiveWidth;
            canvas.width = responsiveWidth;
        }
        else {
            this.cropCanvas.width = this.cropWidth;
            this.buffer.width = canvas.width;
        }
        this.cropCanvas.height = this.cropHeight;
        this.buffer.height = canvas.height;
        this.canvas = canvas;
        this.ctx = this.canvas.getContext('2d');
        this.draw(this.ctx);
    };
    ImageCropper.prototype.resizeCanvas = function (width, height, setImage) {
        if (setImage === void 0) { setImage = false; }
        this.canvas.width = this.cropCanvas.width = this.width = this.canvasWidth = this.buffer.width = width;
        this.canvas.height = this.cropCanvas.height = this.height = this.canvasHeight = this.buffer.height = height;
        if (setImage) {
            this.setImage(this.srcImage);
        }
    };
    ImageCropper.prototype.reset = function () {
        this.setImage(undefined);
    };
    ImageCropper.prototype.draw = function (ctx) {
        var bounds = this.getBounds();
        if (this.srcImage) {
            ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
            var sourceAspect = this.srcImage.height / this.srcImage.width;
            var canvasAspect = this.canvasHeight / this.canvasWidth;
            var w = this.canvasWidth;
            var h = this.canvasHeight;
            if (canvasAspect > sourceAspect) {
                w = this.canvasWidth;
                h = this.canvasWidth * sourceAspect;
            }
            else {
                h = this.canvasHeight;
                w = this.canvasHeight / sourceAspect;
            }
            this.ratioW = w / this.srcImage.width;
            this.ratioH = h / this.srcImage.height;
            if (canvasAspect < sourceAspect) {
                this.drawImageIOSFix(ctx, this.srcImage, 0, 0, this.srcImage.width, this.srcImage.height, this.buffer.width / 2 - w / 2, 0, w, h);
            }
            else {
                this.drawImageIOSFix(ctx, this.srcImage, 0, 0, this.srcImage.width, this.srcImage.height, 0, this.buffer.height / 2 - h / 2, w, h);
            }
            this.buffer.getContext('2d')
                .drawImage(this.canvas, 0, 0, this.canvasWidth, this.canvasHeight);
            ctx.lineWidth = this.cropperSettings.cropperDrawSettings.strokeWidth;
            ctx.strokeStyle = this.cropperSettings.cropperDrawSettings.strokeColor; // 'rgba(255,228,0,1)';
            if (!this.cropperSettings.rounded) {
                ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';
                ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);
                ctx.drawImage(this.buffer, bounds.left, bounds.top, Math.max(bounds.width, 1), Math.max(bounds.height, 1), bounds.left, bounds.top, bounds.width, bounds.height);
                ctx.strokeRect(bounds.left, bounds.top, bounds.width, bounds.height);
            }
            else {
                ctx.beginPath();
                ctx.arc(bounds.left + bounds.width / 2, bounds.top + bounds.height / 2, bounds.width / 2, 0, Math.PI * 2, true);
                ctx.closePath();
                ctx.stroke();
            }
            var marker = void 0;
            for (var i = 0; i < this.markers.length; i++) {
                marker = this.markers[i];
                marker.draw(ctx);
            }
            this.center.draw(ctx);
        }
        else {
            ctx.fillStyle = 'rgba(192,192,192,1)';
            ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        }
    };
    ImageCropper.prototype.dragCenter = function (x, y, marker) {
        var bounds = this.getBounds();
        var left = x - (bounds.width / 2);
        var right = x + (bounds.width / 2);
        var top = y - (bounds.height / 2);
        var bottom = y + (bounds.height / 2);
        if (right >= this.maxXClamp) {
            x = this.maxXClamp - bounds.width / 2;
        }
        if (left <= this.minXClamp) {
            x = bounds.width / 2 + this.minXClamp;
        }
        if (top < this.minYClamp) {
            y = bounds.height / 2 + this.minYClamp;
        }
        if (bottom >= this.maxYClamp) {
            y = this.maxYClamp - bounds.height / 2;
        }
        this.tl.moveX(x - (bounds.width / 2));
        this.tl.moveY(y - (bounds.height / 2));
        this.tr.moveX(x + (bounds.width / 2));
        this.tr.moveY(y - (bounds.height / 2));
        this.bl.moveX(x - (bounds.width / 2));
        this.bl.moveY(y + (bounds.height / 2));
        this.br.moveX(x + (bounds.width / 2));
        this.br.moveY(y + (bounds.height / 2));
        marker.setPosition(x, y);
    };
    ImageCropper.prototype.enforceMinSize = function (x, y, marker) {
        var xLength = x - marker.getHorizontalNeighbour().position.x;
        var yLength = y - marker.getVerticalNeighbour().position.y;
        var xOver = this.minWidth - Math.abs(xLength);
        var yOver = this.minHeight - Math.abs(yLength);
        if (xLength === 0 || yLength === 0) {
            x = marker.position.x;
            y = marker.position.y;
            return __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(x, y);
        }
        if (this.keepAspect) {
            if (xOver > 0 && (yOver / this.aspectRatio) > 0) {
                if (xOver > (yOver / this.aspectRatio)) {
                    if (xLength < 0) {
                        x -= xOver;
                        if (yLength < 0) {
                            y -= xOver * this.aspectRatio;
                        }
                        else {
                            y += xOver * this.aspectRatio;
                        }
                    }
                    else {
                        x += xOver;
                        if (yLength < 0) {
                            y -= xOver * this.aspectRatio;
                        }
                        else {
                            y += xOver * this.aspectRatio;
                        }
                    }
                }
                else {
                    if (yLength < 0) {
                        y -= yOver;
                        if (xLength < 0) {
                            x -= yOver / this.aspectRatio;
                        }
                        else {
                            x += yOver / this.aspectRatio;
                        }
                    }
                    else {
                        y += yOver;
                        if (xLength < 0) {
                            x -= yOver / this.aspectRatio;
                        }
                        else {
                            x += yOver / this.aspectRatio;
                        }
                    }
                }
            }
            else {
                if (xOver > 0) {
                    if (xLength < 0) {
                        x -= xOver;
                        if (yLength < 0) {
                            y -= xOver * this.aspectRatio;
                        }
                        else {
                            y += xOver * this.aspectRatio;
                        }
                    }
                    else {
                        x += xOver;
                        if (yLength < 0) {
                            y -= xOver * this.aspectRatio;
                        }
                        else {
                            y += xOver * this.aspectRatio;
                        }
                    }
                }
                else {
                    if (yOver > 0) {
                        if (yLength < 0) {
                            y -= yOver;
                            if (xLength < 0) {
                                x -= yOver / this.aspectRatio;
                            }
                            else {
                                x += yOver / this.aspectRatio;
                            }
                        }
                        else {
                            y += yOver;
                            if (xLength < 0) {
                                x -= yOver / this.aspectRatio;
                            }
                            else {
                                x += yOver / this.aspectRatio;
                            }
                        }
                    }
                }
            }
        }
        else {
            if (xOver > 0) {
                if (xLength < 0) {
                    x -= xOver;
                }
                else {
                    x += xOver;
                }
            }
            if (yOver > 0) {
                if (yLength < 0) {
                    y -= yOver;
                }
                else {
                    y += yOver;
                }
            }
        }
        if (x < this.minXClamp || x > this.maxXClamp || y < this.minYClamp || y > this.maxYClamp) {
            x = marker.position.x;
            y = marker.position.y;
        }
        return __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(x, y);
    };
    ImageCropper.prototype.dragCorner = function (x, y, marker) {
        var iX = 0;
        var iY = 0;
        var ax = 0;
        var ay = 0;
        var newHeight = 0;
        var newWidth = 0;
        var newY = 0;
        var newX = 0;
        var anchorMarker;
        var fold = 0;
        if (this.keepAspect) {
            anchorMarker = marker.getHorizontalNeighbour().getVerticalNeighbour();
            ax = anchorMarker.position.x;
            ay = anchorMarker.position.y;
            if (x <= anchorMarker.position.x) {
                if (y <= anchorMarker.position.y) {
                    iX = ax - (100 / this.aspectRatio);
                    iY = ay - (100 / this.aspectRatio * this.aspectRatio);
                    fold = this.getSide(__WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(iX, iY), anchorMarker.position, __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(x, y));
                    if (fold > 0) {
                        newHeight = Math.abs(anchorMarker.position.y - y);
                        newWidth = newHeight / this.aspectRatio;
                        newY = anchorMarker.position.y - newHeight;
                        newX = anchorMarker.position.x - newWidth;
                        var min = this.enforceMinSize(newX, newY, marker);
                        marker.move(min.x, min.y);
                        __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(min);
                    }
                    else {
                        if (fold < 0) {
                            newWidth = Math.abs(anchorMarker.position.x - x);
                            newHeight = newWidth * this.aspectRatio;
                            newY = anchorMarker.position.y - newHeight;
                            newX = anchorMarker.position.x - newWidth;
                            var min = this.enforceMinSize(newX, newY, marker);
                            marker.move(min.x, min.y);
                            __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(min);
                        }
                    }
                }
                else {
                    iX = ax - (100 / this.aspectRatio);
                    iY = ay + (100 / this.aspectRatio * this.aspectRatio);
                    fold = this.getSide(__WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(iX, iY), anchorMarker.position, __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(x, y));
                    if (fold > 0) {
                        newWidth = Math.abs(anchorMarker.position.x - x);
                        newHeight = newWidth * this.aspectRatio;
                        newY = anchorMarker.position.y + newHeight;
                        newX = anchorMarker.position.x - newWidth;
                        var min = this.enforceMinSize(newX, newY, marker);
                        marker.move(min.x, min.y);
                        __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(min);
                    }
                    else {
                        if (fold < 0) {
                            newHeight = Math.abs(anchorMarker.position.y - y);
                            newWidth = newHeight / this.aspectRatio;
                            newY = anchorMarker.position.y + newHeight;
                            newX = anchorMarker.position.x - newWidth;
                            var min = this.enforceMinSize(newX, newY, marker);
                            marker.move(min.x, min.y);
                            __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(min);
                        }
                    }
                }
            }
            else {
                if (y <= anchorMarker.position.y) {
                    iX = ax + (100 / this.aspectRatio);
                    iY = ay - (100 / this.aspectRatio * this.aspectRatio);
                    fold = this.getSide(__WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(iX, iY), anchorMarker.position, __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(x, y));
                    if (fold < 0) {
                        newHeight = Math.abs(anchorMarker.position.y - y);
                        newWidth = newHeight / this.aspectRatio;
                        newY = anchorMarker.position.y - newHeight;
                        newX = anchorMarker.position.x + newWidth;
                        var min = this.enforceMinSize(newX, newY, marker);
                        marker.move(min.x, min.y);
                        __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(min);
                    }
                    else {
                        if (fold > 0) {
                            newWidth = Math.abs(anchorMarker.position.x - x);
                            newHeight = newWidth * this.aspectRatio;
                            newY = anchorMarker.position.y - newHeight;
                            newX = anchorMarker.position.x + newWidth;
                            var min = this.enforceMinSize(newX, newY, marker);
                            marker.move(min.x, min.y);
                            __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(min);
                        }
                    }
                }
                else {
                    iX = ax + (100 / this.aspectRatio);
                    iY = ay + (100 / this.aspectRatio * this.aspectRatio);
                    fold = this.getSide(__WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(iX, iY), anchorMarker.position, __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(x, y));
                    if (fold < 0) {
                        newWidth = Math.abs(anchorMarker.position.x - x);
                        newHeight = newWidth * this.aspectRatio;
                        newY = anchorMarker.position.y + newHeight;
                        newX = anchorMarker.position.x + newWidth;
                        var min = this.enforceMinSize(newX, newY, marker);
                        marker.move(min.x, min.y);
                        __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(min);
                    }
                    else {
                        if (fold > 0) {
                            newHeight = Math.abs(anchorMarker.position.y - y);
                            newWidth = newHeight / this.aspectRatio;
                            newY = anchorMarker.position.y + newHeight;
                            newX = anchorMarker.position.x + newWidth;
                            var min = this.enforceMinSize(newX, newY, marker);
                            marker.move(min.x, min.y);
                            __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(min);
                        }
                    }
                }
            }
        }
        else {
            var min = this.enforceMinSize(x, y, marker);
            marker.move(min.x, min.y);
            __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(min);
        }
        this.center.recalculatePosition(this.getBounds());
    };
    ImageCropper.prototype.getSide = function (a, b, c) {
        var n = ImageCropper.sign((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x));
        // TODO move the return of the pools to outside of this function
        __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(a);
        __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(c);
        return n;
    };
    ImageCropper.prototype.handleRelease = function (newCropTouch) {
        if (newCropTouch == null) {
            return;
        }
        var index = 0;
        for (var k = 0; k < this.currentDragTouches.length; k++) {
            if (newCropTouch.id === this.currentDragTouches[k].id) {
                this.currentDragTouches[k].dragHandle.setDrag(false);
                index = k;
            }
        }
        this.currentDragTouches.splice(index, 1);
        this.draw(this.ctx);
    };
    ImageCropper.prototype.handleMove = function (newCropTouch) {
        var matched = false;
        for (var k = 0; k < this.currentDragTouches.length; k++) {
            if (newCropTouch.id === this.currentDragTouches[k].id && this.currentDragTouches[k].dragHandle != null) {
                var dragTouch = this.currentDragTouches[k];
                var clampedPositions = this.clampPosition(newCropTouch.x - dragTouch.dragHandle.offset.x, newCropTouch.y - dragTouch.dragHandle.offset.y);
                newCropTouch.x = clampedPositions.x;
                newCropTouch.y = clampedPositions.y;
                __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(clampedPositions);
                if (dragTouch.dragHandle instanceof __WEBPACK_IMPORTED_MODULE_1__model_cornerMarker__["a" /* CornerMarker */]) {
                    this.dragCorner(newCropTouch.x, newCropTouch.y, dragTouch.dragHandle);
                }
                else {
                    this.dragCenter(newCropTouch.x, newCropTouch.y, dragTouch.dragHandle);
                }
                this.currentlyInteracting = true;
                matched = true;
                __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setPressed(this.canvas);
                break;
            }
        }
        if (!matched) {
            for (var i = 0; i < this.markers.length; i++) {
                var marker = this.markers[i];
                if (marker.touchInBounds(newCropTouch.x, newCropTouch.y)) {
                    newCropTouch.dragHandle = marker;
                    this.currentDragTouches.push(newCropTouch);
                    marker.setDrag(true);
                    newCropTouch.dragHandle.offset.x = newCropTouch.x - newCropTouch.dragHandle.position.x;
                    newCropTouch.dragHandle.offset.y = newCropTouch.y - newCropTouch.dragHandle.position.y;
                    this.dragCorner(newCropTouch.x - newCropTouch.dragHandle.offset.x, newCropTouch.y - newCropTouch.dragHandle.offset.y, newCropTouch.dragHandle);
                    break;
                }
            }
            if (newCropTouch.dragHandle === null || typeof newCropTouch.dragHandle === 'undefined') {
                if (this.center.touchInBounds(newCropTouch.x, newCropTouch.y)) {
                    newCropTouch.dragHandle = this.center;
                    this.currentDragTouches.push(newCropTouch);
                    newCropTouch.dragHandle.setDrag(true);
                    newCropTouch.dragHandle.offset.x = newCropTouch.x - newCropTouch.dragHandle.position.x;
                    newCropTouch.dragHandle.offset.y = newCropTouch.y - newCropTouch.dragHandle.position.y;
                    this.dragCenter(newCropTouch.x - newCropTouch.dragHandle.offset.x, newCropTouch.y - newCropTouch.dragHandle.offset.y, newCropTouch.dragHandle);
                }
            }
        }
    };
    ImageCropper.prototype.updateClampBounds = function () {
        var sourceAspect = this.srcImage.height / this.srcImage.width;
        var canvasAspect = this.canvas.height / this.canvas.width;
        var w = this.canvas.width;
        var h = this.canvas.height;
        if (canvasAspect > sourceAspect) {
            w = this.canvas.width;
            h = this.canvas.width * sourceAspect;
        }
        else {
            h = this.canvas.height;
            w = this.canvas.height / sourceAspect;
        }
        this.minXClamp = this.canvas.width / 2 - w / 2;
        this.minYClamp = this.canvas.height / 2 - h / 2;
        this.maxXClamp = this.canvas.width / 2 + w / 2;
        this.maxYClamp = this.canvas.height / 2 + h / 2;
    };
    ImageCropper.prototype.getCropBounds = function () {
        var bounds = this.getBounds();
        bounds.top = Math.round((bounds.top - this.minYClamp) / this.ratioH);
        bounds.bottom = Math.round((bounds.bottom - this.minYClamp) / this.ratioH);
        bounds.left = Math.round((bounds.left - this.minXClamp) / this.ratioW);
        bounds.right = Math.round((bounds.right - this.minXClamp) / this.ratioW);
        return bounds;
    };
    ImageCropper.prototype.clampPosition = function (x, y) {
        if (x < this.minXClamp) {
            x = this.minXClamp;
        }
        if (x > this.maxXClamp) {
            x = this.maxXClamp;
        }
        if (y < this.minYClamp) {
            y = this.minYClamp;
        }
        if (y > this.maxYClamp) {
            y = this.maxYClamp;
        }
        return __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(x, y);
    };
    ImageCropper.prototype.isImageSet = function () {
        return this.imageSet;
    };
    ImageCropper.prototype.setImage = function (img) {
        this.srcImage = img;
        if (!img) {
            this.imageSet = false;
            this.draw(this.ctx);
        }
        else {
            this.imageSet = true;
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            var bufferContext = this.buffer.getContext('2d');
            bufferContext.clearRect(0, 0, this.buffer.width, this.buffer.height);
            if (!this.cropperSettings.fileType)
                this.fileType = this.getDataUriMimeType(img.src);
            if (this.cropperSettings.minWithRelativeToResolution) {
                this.minWidth = (this.canvas.width * this.cropperSettings.minWidth / this.srcImage.width);
                this.minHeight = (this.canvas.height * this.cropperSettings.minHeight / this.srcImage.height);
            }
            this.updateClampBounds();
            this.canvasWidth = this.canvas.width;
            this.canvasHeight = this.canvas.height;
            var cropPosition = this.getCropPositionFromMarkers();
            this.setCropPosition(cropPosition);
        }
    };
    ImageCropper.prototype.updateCropPosition = function (cropBounds) {
        var cropPosition = this.getCropPositionFromBounds(cropBounds);
        this.setCropPosition(cropPosition);
    };
    ImageCropper.prototype.setCropPosition = function (cropPosition) {
        this.tl.setPosition(cropPosition[0].x, cropPosition[0].y);
        this.tr.setPosition(cropPosition[1].x, cropPosition[1].y);
        this.bl.setPosition(cropPosition[2].x, cropPosition[2].y);
        this.br.setPosition(cropPosition[3].x, cropPosition[3].y);
        this.center.setPosition(cropPosition[4].x, cropPosition[4].y);
        for (var _i = 0, cropPosition_1 = cropPosition; _i < cropPosition_1.length; _i++) {
            var position = cropPosition_1[_i];
            __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(position);
        }
        this.vertSquashRatio = ImageCropper.detectVerticalSquash(this.srcImage);
        this.draw(this.ctx);
        this.croppedImage = this.getCroppedImageHelper(false, this.cropWidth, this.cropHeight);
    };
    ImageCropper.prototype.getCropPositionFromMarkers = function () {
        var w = this.canvas.width;
        var h = this.canvas.height;
        var tlPos, trPos, blPos, brPos, center;
        var sourceAspect = this.srcImage.height / this.srcImage.width;
        var cropBounds = this.getBounds();
        var cropAspect = cropBounds.height / cropBounds.width;
        var cX = this.canvas.width / 2;
        var cY = this.canvas.height / 2;
        if (cropAspect > sourceAspect) {
            var imageH = Math.min(w * sourceAspect, h);
            var cropW = imageH / cropAspect;
            tlPos = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(cX - cropW / 2, cY + imageH / 2);
            trPos = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(cX + cropW / 2, cY + imageH / 2);
            blPos = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(cX - cropW / 2, cY - imageH / 2);
            brPos = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(cX + cropW / 2, cY - imageH / 2);
        }
        else {
            var imageW = Math.min(h / sourceAspect, w);
            var cropH = imageW * cropAspect;
            tlPos = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(cX - imageW / 2, cY + cropH / 2);
            trPos = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(cX + imageW / 2, cY + cropH / 2);
            blPos = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(cX - imageW / 2, cY - cropH / 2);
            brPos = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(cX + imageW / 2, cY - cropH / 2);
        }
        center = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(cX, cY);
        var positions = [tlPos, trPos, blPos, brPos, center];
        return positions;
    };
    ImageCropper.prototype.getCropPositionFromBounds = function (cropPosition) {
        var marginTop = 0;
        var marginLeft = 0;
        var canvasAspect = this.canvasHeight / this.canvasWidth;
        var sourceAspect = this.srcImage.height / this.srcImage.width;
        if (canvasAspect > sourceAspect) {
            marginTop = this.buffer.height / 2 - (this.canvasWidth * sourceAspect) / 2;
        }
        else {
            marginLeft = this.buffer.width / 2 - (this.canvasHeight / sourceAspect) / 2;
        }
        var ratioW = (this.canvasWidth - marginLeft * 2) / this.srcImage.width;
        var ratioH = (this.canvasHeight - marginTop * 2) / this.srcImage.height;
        var actualH = cropPosition.height * ratioH;
        var actualW = cropPosition.width * ratioW;
        var actualX = cropPosition.left * ratioW + marginLeft;
        var actualY = cropPosition.top * ratioH + marginTop;
        if (this.keepAspect) {
            var scaledW = actualH / this.aspectRatio;
            var scaledH = actualW * this.aspectRatio;
            if (this.getCropBounds().height === cropPosition.height) {
                actualH = scaledH;
            }
            else if (this.getCropBounds().width === cropPosition.width) {
                actualW = scaledW;
            }
            else {
                if (Math.abs(scaledH - actualH) < Math.abs(scaledW - actualW)) {
                    actualW = scaledW;
                }
                else {
                    actualH = scaledH;
                }
            }
        }
        var tlPos = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(actualX, actualY + actualH);
        var trPos = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(actualX + actualW, actualY + actualH);
        var blPos = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(actualX, actualY);
        var brPos = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(actualX + actualW, actualY);
        var center = __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.borrow(actualX + actualW / 2, actualY + actualH / 2);
        var positions = [tlPos, trPos, blPos, brPos, center];
        return positions;
    };
    ImageCropper.prototype.getCroppedImageHelper = function (preserveSize, fillWidth, fillHeight) {
        if (this.cropperSettings.cropOnResize) {
            return this.getCroppedImage(preserveSize, fillWidth, fillHeight);
        }
        return this.croppedImage ? this.croppedImage : document.createElement('img');
    };
    // todo: Unused parameters?
    ImageCropper.prototype.getCroppedImage = function (preserveSize, fillWidth, fillHeight) {
        var bounds = this.getBounds();
        if (!this.srcImage) {
            return document.createElement('img');
        }
        else {
            var sourceAspect = this.srcImage.height / this.srcImage.width;
            var canvasAspect = this.canvas.height / this.canvas.width;
            var w = this.canvas.width;
            var h = this.canvas.height;
            if (canvasAspect > sourceAspect) {
                w = this.canvas.width;
                h = this.canvas.width * sourceAspect;
            }
            else {
                if (canvasAspect < sourceAspect) {
                    h = this.canvas.height;
                    w = this.canvas.height / sourceAspect;
                }
                else {
                    h = this.canvas.height;
                    w = this.canvas.width;
                }
            }
            this.ratioW = w / this.srcImage.width;
            this.ratioH = h / this.srcImage.height;
            var offsetH = (this.buffer.height - h) / 2 / this.ratioH;
            var offsetW = (this.buffer.width - w) / 2 / this.ratioW;
            var ctx = this.cropCanvas.getContext('2d');
            if (this.cropperSettings.preserveSize || preserveSize) {
                var width = Math.round(bounds.right / this.ratioW - bounds.left / this.ratioW);
                var height = Math.round(bounds.bottom / this.ratioH - bounds.top / this.ratioH);
                this.cropCanvas.width = width;
                this.cropCanvas.height = height;
                this.cropperSettings.croppedWidth = this.cropCanvas.width;
                this.cropperSettings.croppedHeight = this.cropCanvas.height;
            }
            else {
                this.cropCanvas.width = this.cropWidth;
                this.cropCanvas.height = this.cropHeight;
            }
            ctx.clearRect(0, 0, this.cropCanvas.width, this.cropCanvas.height);
            this.drawImageIOSFix(ctx, this.srcImage, Math.max(Math.round((bounds.left) / this.ratioW - offsetW), 0), Math.max(Math.round(bounds.top / this.ratioH - offsetH), 0), Math.max(Math.round(bounds.width / this.ratioW), 1), Math.max(Math.round(bounds.height / this.ratioH), 1), 0, 0, this.cropCanvas.width, this.cropCanvas.height);
            if (this.cropperSettings.resampleFn) {
                this.cropperSettings.resampleFn(this.cropCanvas);
            }
            this.croppedImage.width = this.cropCanvas.width;
            this.croppedImage.height = this.cropCanvas.height;
            this.croppedImage.src = this.cropCanvas.toDataURL(this.fileType, this.cropperSettings.compressRatio);
            return this.croppedImage;
        }
    };
    ImageCropper.prototype.getBounds = function () {
        var minX = Number.MAX_VALUE;
        var minY = Number.MAX_VALUE;
        var maxX = -Number.MAX_VALUE;
        var maxY = -Number.MAX_VALUE;
        for (var i = 0; i < this.markers.length; i++) {
            var marker = this.markers[i];
            if (marker.position.x < minX) {
                minX = marker.position.x;
            }
            if (marker.position.x > maxX) {
                maxX = marker.position.x;
            }
            if (marker.position.y < minY) {
                minY = marker.position.y;
            }
            if (marker.position.y > maxY) {
                maxY = marker.position.y;
            }
        }
        var bounds = new __WEBPACK_IMPORTED_MODULE_0__model_bounds__["a" /* Bounds */]();
        bounds.left = minX;
        bounds.right = maxX;
        bounds.top = minY;
        bounds.bottom = maxY;
        return bounds;
    };
    ImageCropper.prototype.setBounds = function (bounds) {
        var topLeft;
        var topRight;
        var bottomLeft;
        var bottomRight;
        var currentBounds = this.getBounds();
        for (var i = 0; i < this.markers.length; i++) {
            var marker = this.markers[i];
            if (marker.position.x === currentBounds.left) {
                if (marker.position.y === currentBounds.top) {
                    marker.setPosition(bounds.left, bounds.top);
                }
                else {
                    marker.setPosition(bounds.left, bounds.bottom);
                }
            }
            else {
                if (marker.position.y === currentBounds.top) {
                    marker.setPosition(bounds.right, bounds.top);
                }
                else {
                    marker.setPosition(bounds.right, bounds.bottom);
                }
            }
        }
        this.center.recalculatePosition(bounds);
        this.center.draw(this.ctx);
        this.draw(this.ctx); // we need to redraw all canvas if we have changed bounds
    };
    ImageCropper.prototype.onTouchMove = function (event) {
        if (this.crop.isImageSet()) {
            event.preventDefault();
            if (event.touches.length === 1) {
                for (var i = 0; i < event.touches.length; i++) {
                    var touch = event.touches[i];
                    var touchPosition = ImageCropper.getTouchPos(this.canvas, touch);
                    var cropTouch = new __WEBPACK_IMPORTED_MODULE_2__model_cropTouch__["a" /* CropTouch */](touchPosition.x, touchPosition.y, touch.identifier);
                    __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(touchPosition);
                    this.move(cropTouch);
                }
            }
            else {
                if (event.touches.length === 2) {
                    var distance = ((event.touches[0].clientX - event.touches[1].clientX) * (event.touches[0].clientX - event.touches[1].clientX)) + ((event.touches[0].clientY - event.touches[1].clientY) * (event.touches[0].clientY - event.touches[1].clientY));
                    if (this.previousDistance && this.previousDistance !== distance) {
                        var bounds = this.getBounds();
                        if (distance < this.previousDistance) {
                            bounds.top += 1;
                            bounds.left += 1;
                            bounds.right -= 1;
                            bounds.bottom -= 1;
                        }
                        if (distance > this.previousDistance) {
                            if (bounds.top !== this.minYClamp && bounds.bottom !== this.maxYClamp && bounds.left !== this.minXClamp && bounds.right !== this.maxXClamp) {
                                bounds.top -= 1;
                                bounds.left -= 1;
                                bounds.right += 1;
                                bounds.bottom += 1;
                            }
                            else if (bounds.top !== this.minYClamp && bounds.bottom !== this.maxYClamp && bounds.left === this.minXClamp && bounds.right !== this.maxXClamp) {
                                bounds.top -= 1;
                                bounds.right += 2;
                                bounds.bottom += 1;
                            }
                            else if (bounds.top !== this.minYClamp && bounds.bottom !== this.maxYClamp && bounds.left !== this.minXClamp && bounds.right === this.maxXClamp) {
                                bounds.top -= 1;
                                bounds.left -= 2;
                                bounds.bottom += 1;
                            }
                            else if (bounds.top === this.minYClamp && bounds.bottom !== this.maxYClamp && bounds.left !== this.minXClamp && bounds.right !== this.maxXClamp) {
                                bounds.left -= 1;
                                bounds.right += 1;
                                bounds.bottom += 2;
                            }
                            else if (bounds.top !== this.minYClamp && bounds.bottom === this.maxYClamp && bounds.left !== this.minXClamp && bounds.right !== this.maxXClamp) {
                                bounds.top -= 2;
                                bounds.left -= 1;
                                bounds.right += 1;
                            }
                            else if (bounds.top === this.minYClamp && bounds.bottom !== this.maxYClamp && bounds.left === this.minXClamp && bounds.right !== this.maxXClamp) {
                                bounds.right += 2;
                                bounds.bottom += 2;
                            }
                            else if (bounds.top === this.minYClamp && bounds.bottom !== this.maxYClamp && bounds.left !== this.minXClamp && bounds.right === this.maxXClamp) {
                                bounds.left -= 2;
                                bounds.bottom += 2;
                            }
                            else if (bounds.top !== this.minYClamp && bounds.bottom === this.maxYClamp && bounds.left === this.minXClamp && bounds.right !== this.maxXClamp) {
                                bounds.top -= 2;
                                bounds.right += 2;
                            }
                            else if (bounds.top !== this.minYClamp && bounds.bottom === this.maxYClamp && bounds.left !== this.minXClamp && bounds.right === this.maxXClamp) {
                                bounds.top -= 2;
                                bounds.left -= 2;
                            }
                        }
                        if (bounds.top < this.minYClamp)
                            bounds.top = this.minYClamp;
                        if (bounds.bottom > this.maxYClamp)
                            bounds.bottom = this.maxYClamp;
                        if (bounds.left < this.minXClamp)
                            bounds.left = this.minXClamp;
                        if (bounds.right > this.maxXClamp)
                            bounds.right = this.maxXClamp;
                        this.setBounds(bounds);
                    }
                    this.previousDistance = distance;
                }
            }
            this.draw(this.ctx);
        }
    };
    ImageCropper.prototype.onMouseMove = function (e) {
        if (this.crop.isImageSet() && this.isMouseDown) {
            var mousePosition = ImageCropper.getMousePos(this.canvas, e);
            this.move(new __WEBPACK_IMPORTED_MODULE_2__model_cropTouch__["a" /* CropTouch */](mousePosition.x, mousePosition.y, 0));
            var dragTouch = this.getDragTouchForID(0);
            if (dragTouch) {
                dragTouch.x = mousePosition.x;
                dragTouch.y = mousePosition.y;
            }
            else {
                dragTouch = new __WEBPACK_IMPORTED_MODULE_2__model_cropTouch__["a" /* CropTouch */](mousePosition.x, mousePosition.y, 0);
            }
            __WEBPACK_IMPORTED_MODULE_6__model_pointPool__["a" /* PointPool */].instance.returnPoint(mousePosition);
            this.drawCursors(dragTouch);
            this.draw(this.ctx);
        }
    };
    ImageCropper.prototype.move = function (cropTouch) {
        if (this.isMouseDown) {
            this.handleMove(cropTouch);
        }
    };
    ImageCropper.prototype.getDragTouchForID = function (id) {
        for (var i = 0; i < this.currentDragTouches.length; i++) {
            if (id === this.currentDragTouches[i].id) {
                return this.currentDragTouches[i];
            }
        }
        return undefined;
    };
    ImageCropper.prototype.drawCursors = function (cropTouch) {
        var cursorDrawn = false;
        if (cropTouch != null) {
            if (cropTouch.dragHandle === this.center) {
                __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setStyle(this.canvas, 'move');
                cursorDrawn = true;
            }
            if (cropTouch.dragHandle !== null && cropTouch.dragHandle instanceof __WEBPACK_IMPORTED_MODULE_1__model_cornerMarker__["a" /* CornerMarker */]) {
                this.drawCornerCursor(cropTouch.dragHandle, cropTouch.dragHandle.position.x, cropTouch.dragHandle.position.y);
                cursorDrawn = true;
            }
        }
        var didDraw = false;
        if (!cursorDrawn) {
            for (var i = 0; i < this.markers.length; i++) {
                didDraw = didDraw || this.drawCornerCursor(this.markers[i], cropTouch.x, cropTouch.y);
            }
            if (!didDraw) {
                __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setStyle(this.canvas, 'initial');
            }
        }
        if (!didDraw && !cursorDrawn && this.center.touchInBounds(cropTouch.x, cropTouch.y)) {
            this.center.setOver(true);
            __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setOver(this.canvas);
            __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setStyle(this.canvas, 'move');
        }
        else {
            this.center.setOver(false);
        }
    };
    ImageCropper.prototype.drawCornerCursor = function (marker, x, y) {
        if (marker.touchInBounds(x, y)) {
            marker.setOver(true);
            if (marker.getHorizontalNeighbour().position.x > marker.position.x) {
                if (marker.getVerticalNeighbour().position.y > marker.position.y) {
                    __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setOver(this.canvas);
                    __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setStyle(this.canvas, 'nwse-resize');
                }
                else {
                    __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setOver(this.canvas);
                    __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setStyle(this.canvas, 'nesw-resize');
                }
            }
            else {
                if (marker.getVerticalNeighbour().position.y > marker.position.y) {
                    __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setOver(this.canvas);
                    __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setStyle(this.canvas, 'nesw-resize');
                }
                else {
                    __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setOver(this.canvas);
                    __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setStyle(this.canvas, 'nwse-resize');
                }
            }
            return true;
        }
        marker.setOver(false);
        return false;
    };
    // todo: Unused param
    ImageCropper.prototype.onTouchStart = function (event) {
        if (this.crop.isImageSet()) {
            this.isMouseDown = true;
        }
    };
    ImageCropper.prototype.onTouchEnd = function (event) {
        if (this.crop.isImageSet()) {
            for (var i = 0; i < event.changedTouches.length; i++) {
                var touch = event.changedTouches[i];
                var dragTouch = this.getDragTouchForID(touch.identifier);
                if (dragTouch && dragTouch !== undefined) {
                    if (dragTouch.dragHandle instanceof __WEBPACK_IMPORTED_MODULE_1__model_cornerMarker__["a" /* CornerMarker */] || dragTouch.dragHandle instanceof __WEBPACK_IMPORTED_MODULE_3__model_dragMarker__["a" /* DragMarker */]) {
                        dragTouch.dragHandle.setOver(false);
                    }
                    this.handleRelease(dragTouch);
                }
            }
            if (this.currentDragTouches.length === 0) {
                this.isMouseDown = false;
                this.currentlyInteracting = false;
            }
        }
    };
    // http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
    ImageCropper.prototype.drawImageIOSFix = function (ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
        // Works only if whole image is displayed:
        // ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
        // The following works correct also when only a part of the image is displayed:
        // ctx.drawImage(img, sx * this.vertSquashRatio, sy * this.vertSquashRatio, sw * this.vertSquashRatio, sh *
        // this.vertSquashRatio, dx, dy, dw, dh);
        ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh);
    };
    ImageCropper.prototype.onMouseDown = function (event) {
        if (this.crop.isImageSet()) {
            this.isMouseDown = true;
        }
    };
    ImageCropper.prototype.onMouseUp = function (event) {
        if (this.crop.isImageSet()) {
            __WEBPACK_IMPORTED_MODULE_5__imageCropperDataShare__["a" /* ImageCropperDataShare */].setReleased(this.canvas);
            this.isMouseDown = false;
            this.handleRelease(new __WEBPACK_IMPORTED_MODULE_2__model_cropTouch__["a" /* CropTouch */](0, 0, 0));
        }
    };
    return ImageCropper;
}(__WEBPACK_IMPORTED_MODULE_4__model_imageCropperModel__["a" /* ImageCropperModel */]));

//# sourceMappingURL=imageCropper.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/imageCropperComponent.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ImageCropperComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__imageCropper__ = __webpack_require__("./node_modules/ng2-img-cropper/src/imageCropper.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__cropperSettings__ = __webpack_require__("./node_modules/ng2-img-cropper/src/cropperSettings.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__exif__ = __webpack_require__("./node_modules/ng2-img-cropper/src/exif.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_cropPosition__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/cropPosition.js");





var ImageCropperComponent = (function () {
    function ImageCropperComponent(renderer) {
        this.cropPositionChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.onCrop = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.renderer = renderer;
    }
    ImageCropperComponent.prototype.ngAfterViewInit = function () {
        var canvas = this.cropcanvas.nativeElement;
        if (!this.settings) {
            this.settings = new __WEBPACK_IMPORTED_MODULE_2__cropperSettings__["a" /* CropperSettings */]();
        }
        this.renderer.setElementAttribute(canvas, 'class', this.settings.cropperClass);
        if (!this.settings.dynamicSizing) {
            this.renderer.setElementAttribute(canvas, 'width', this.settings.canvasWidth.toString());
            this.renderer.setElementAttribute(canvas, 'height', this.settings.canvasHeight.toString());
        }
        else {
            this.windowListener = this.resize.bind(this);
            window.addEventListener('resize', this.windowListener);
        }
        if (!this.cropper) {
            this.cropper = new __WEBPACK_IMPORTED_MODULE_1__imageCropper__["a" /* ImageCropper */](this.settings);
        }
        this.cropper.prepare(canvas);
    };
    ImageCropperComponent.prototype.ngOnChanges = function (changes) {
        if (this.isCropPositionChanged(changes)) {
            this.cropper.updateCropPosition(this.cropPosition.toBounds());
            if (this.cropper.isImageSet()) {
                var bounds = this.cropper.getCropBounds();
                this.image.image = this.cropper.getCroppedImageHelper().src;
                this.onCrop.emit(bounds);
            }
            this.updateCropBounds();
        }
        if (changes.inputImage) {
            this.setImage(changes.inputImage.currentValue);
        }
    };
    ImageCropperComponent.prototype.ngOnDestroy = function () {
        if (this.settings.dynamicSizing && this.windowListener) {
            window.removeEventListener('resize', this.windowListener);
        }
    };
    ImageCropperComponent.prototype.onTouchMove = function (event) {
        this.cropper.onTouchMove(event);
    };
    ImageCropperComponent.prototype.onTouchStart = function (event) {
        this.cropper.onTouchStart(event);
    };
    ImageCropperComponent.prototype.onTouchEnd = function (event) {
        this.cropper.onTouchEnd(event);
        if (this.cropper.isImageSet()) {
            this.image.image = this.cropper.getCroppedImageHelper().src;
            this.onCrop.emit(this.cropper.getCropBounds());
            this.updateCropBounds();
        }
    };
    ImageCropperComponent.prototype.onMouseDown = function (event) {
        this.cropper.onMouseDown(event);
    };
    ImageCropperComponent.prototype.onMouseUp = function (event) {
        if (this.cropper.isImageSet()) {
            this.cropper.onMouseUp(event);
            this.image.image = this.cropper.getCroppedImageHelper().src;
            this.onCrop.emit(this.cropper.getCropBounds());
            this.updateCropBounds();
        }
    };
    ImageCropperComponent.prototype.onMouseMove = function (event) {
        this.cropper.onMouseMove(event);
    };
    ImageCropperComponent.prototype.fileChangeListener = function ($event) {
        if ($event.target.files.length === 0)
            return;
        var file = $event.target.files[0];
        if (this.settings.allowedFilesRegex.test(file.name)) {
            var image_1 = new Image();
            var fileReader = new FileReader();
            var that_1 = this;
            fileReader.addEventListener('loadend', function (loadEvent) {
                image_1.addEventListener('load', function () {
                    that_1.setImage(image_1);
                });
                image_1.src = loadEvent.target.result;
            });
            fileReader.readAsDataURL(file);
        }
    };
    ImageCropperComponent.prototype.resize = function () {
        var canvas = this.cropcanvas.nativeElement;
        this.settings.canvasWidth = canvas.offsetWidth;
        this.settings.canvasHeight = canvas.offsetHeight;
        this.cropper.resizeCanvas(canvas.offsetWidth, canvas.offsetHeight, true);
    };
    ImageCropperComponent.prototype.reset = function () {
        this.cropper.reset();
        this.renderer.setElementAttribute(this.cropcanvas.nativeElement, 'class', this.settings.cropperClass);
        this.image.image = this.cropper.getCroppedImageHelper().src;
    };
    ImageCropperComponent.prototype.setImage = function (image, newBounds) {
        var _this = this;
        if (newBounds === void 0) { newBounds = null; }
        var self = this;
        this.renderer.setElementAttribute(this.cropcanvas.nativeElement, 'class', this.settings.cropperClass + " " + this.settings.croppingClass);
        this.raf = window.requestAnimationFrame(function () {
            if (self.raf) {
                window.cancelAnimationFrame(self.raf);
            }
            if (image.naturalHeight > 0 && image.naturalWidth > 0) {
                image.height = image.naturalHeight;
                image.width = image.naturalWidth;
                window.cancelAnimationFrame(self.raf);
                self.getOrientedImage(image, function (img) {
                    if (_this.settings.dynamicSizing) {
                        var canvas = _this.cropcanvas.nativeElement;
                        _this.settings.canvasWidth = canvas.offsetWidth;
                        _this.settings.canvasHeight = canvas.offsetHeight;
                        _this.cropper.resizeCanvas(canvas.offsetWidth, canvas.offsetHeight, false);
                    }
                    self.cropper.setImage(img);
                    if (self.cropPosition && self.cropPosition.isInitialized()) {
                        self.cropper.updateCropPosition(self.cropPosition.toBounds());
                    }
                    self.image.original = img;
                    var bounds = self.cropper.getCropBounds();
                    self.image.image = self.cropper.getCroppedImageHelper().src;
                    if (newBounds != null) {
                        bounds = newBounds;
                        self.cropper.setBounds(bounds);
                        _this.cropper.updateCropPosition(bounds);
                    }
                    self.onCrop.emit(bounds);
                });
            }
        });
    };
    ImageCropperComponent.prototype.isCropPositionChanged = function (changes) {
        if (this.cropper && changes['cropPosition'] && this.isCropPositionUpdateNeeded) {
            return true;
        }
        else {
            this.isCropPositionUpdateNeeded = true;
            return false;
        }
    };
    ImageCropperComponent.prototype.updateCropBounds = function () {
        var cropBound = this.cropper.getCropBounds();
        this.cropPositionChange.emit(new __WEBPACK_IMPORTED_MODULE_4__model_cropPosition__["a" /* CropPosition */](cropBound.left, cropBound.top, cropBound.width, cropBound.height));
        this.isCropPositionUpdateNeeded = false;
    };
    ImageCropperComponent.prototype.getOrientedImage = function (image, callback) {
        var img;
        __WEBPACK_IMPORTED_MODULE_3__exif__["a" /* Exif */].getData(image, function () {
            var orientation = __WEBPACK_IMPORTED_MODULE_3__exif__["a" /* Exif */].getTag(image, 'Orientation');
            if ([3, 6, 8].indexOf(orientation) > -1) {
                var canvas = document.createElement('canvas'), ctx = canvas.getContext('2d'), cw = image.width, ch = image.height, cx = 0, cy = 0, deg = 0;
                switch (orientation) {
                    case 3:
                        cx = -image.width;
                        cy = -image.height;
                        deg = 180;
                        break;
                    case 6:
                        cw = image.height;
                        ch = image.width;
                        cy = -image.height;
                        deg = 90;
                        break;
                    case 8:
                        cw = image.height;
                        ch = image.width;
                        cx = -image.width;
                        deg = 270;
                        break;
                    default:
                        break;
                }
                canvas.width = cw;
                canvas.height = ch;
                ctx.rotate(deg * Math.PI / 180);
                ctx.drawImage(image, cx, cy);
                img = document.createElement('img');
                img.width = cw;
                img.height = ch;
                img.addEventListener('load', function () {
                    callback(img);
                });
                img.src = canvas.toDataURL('image/png');
            }
            else {
                img = image;
                callback(img);
            }
        });
    };
    ImageCropperComponent.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"], args: [{
                    selector: 'img-cropper',
                    template: "\n        <span class=\"ng2-imgcrop\">\n          <input *ngIf=\"!settings.noFileInput\" type=\"file\" accept=\"image/*\" (change)=\"fileChangeListener($event)\">\n          <canvas #cropcanvas\n                  (mousedown)=\"onMouseDown($event)\"\n                  (mouseup)=\"onMouseUp($event)\"\n                  (mousemove)=\"onMouseMove($event)\"\n                  (mouseleave)=\"onMouseUp($event)\"\n                  (touchmove)=\"onTouchMove($event)\"\n                  (touchend)=\"onTouchEnd($event)\"\n                  (touchstart)=\"onTouchStart($event)\">\n          </canvas>\n        </span>\n      "
                },] },
    ];
    /** @nocollapse */
    ImageCropperComponent.ctorParameters = function () { return [
        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Renderer"], },
    ]; };
    ImageCropperComponent.propDecorators = {
        'cropcanvas': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"], args: ['cropcanvas', undefined,] },],
        'settings': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['settings',] },],
        'image': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['image',] },],
        'inputImage': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"], args: ['inputImage',] },],
        'cropper': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'cropPosition': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"] },],
        'cropPositionChange': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"] },],
        'onCrop': [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"] },],
    };
    return ImageCropperComponent;
}());

//# sourceMappingURL=imageCropperComponent.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/imageCropperDataShare.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ImageCropperDataShare; });
var ImageCropperDataShare = (function () {
    function ImageCropperDataShare() {
    }
    ImageCropperDataShare.setPressed = function (canvas) {
        this.pressed = canvas;
    };
    ;
    ImageCropperDataShare.setReleased = function (canvas) {
        if (canvas === this.pressed) {
            //  this.pressed = undefined;
        }
    };
    ;
    ImageCropperDataShare.setOver = function (canvas) {
        this.over = canvas;
    };
    ;
    ImageCropperDataShare.setStyle = function (canvas, style) {
        if (this.pressed !== undefined) {
            if (this.pressed === canvas) {
                // TODO: check this
                // angular.element(document.documentElement).css('cursor', style);
            }
        }
        else {
            if (canvas === this.over) {
                // TODO: check this
                // angular.element(document.documentElement).css('cursor', style);
            }
        }
    };
    ;
    ImageCropperDataShare.share = {};
    return ImageCropperDataShare;
}());

//# sourceMappingURL=imageCropperDataShare.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/imageCropperModule.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ImageCropperModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_common__ = __webpack_require__("./node_modules/@angular/common/@angular/common.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__imageCropperComponent__ = __webpack_require__("./node_modules/ng2-img-cropper/src/imageCropperComponent.js");



var ImageCropperModule = (function () {
    function ImageCropperModule() {
    }
    ImageCropperModule.decorators = [
        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__["NgModule"], args: [{
                    imports: [__WEBPACK_IMPORTED_MODULE_0__angular_common__["CommonModule"]],
                    declarations: [__WEBPACK_IMPORTED_MODULE_2__imageCropperComponent__["a" /* ImageCropperComponent */]],
                    exports: [__WEBPACK_IMPORTED_MODULE_2__imageCropperComponent__["a" /* ImageCropperComponent */]]
                },] },
    ];
    /** @nocollapse */
    ImageCropperModule.ctorParameters = function () { return []; };
    return ImageCropperModule;
}());

//# sourceMappingURL=imageCropperModule.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/model/bounds.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Bounds; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pointPool__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/pointPool.js");

var Bounds = (function () {
    function Bounds(x, y, width, height) {
        if (x === void 0) {
            x = 0;
        }
        if (y === void 0) {
            y = 0;
        }
        if (width === void 0) {
            width = 0;
        }
        if (height === void 0) {
            height = 0;
        }
        this.left = x;
        this.right = x + width;
        this.top = y;
        this.bottom = y + height;
    }
    Object.defineProperty(Bounds.prototype, "width", {
        get: function () {
            return this.right - this.left;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(Bounds.prototype, "height", {
        get: function () {
            return this.bottom - this.top;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Bounds.prototype.getCentre = function () {
        var w = this.width;
        var h = this.height;
        return __WEBPACK_IMPORTED_MODULE_0__pointPool__["a" /* PointPool */].instance.borrow(this.left + (w / 2), this.top + (h / 2));
    };
    ;
    return Bounds;
}());

//# sourceMappingURL=bounds.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/model/cornerMarker.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CornerMarker; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__handle__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/handle.js");
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var CornerMarker = (function (_super) {
    __extends(CornerMarker, _super);
    function CornerMarker(x, y, radius, cropperSettings) {
        return _super.call(this, x, y, radius, cropperSettings) || this;
    }
    CornerMarker.prototype.drawCornerBorder = function (ctx) {
        var sideLength = 10;
        if (this.over || this.drag) {
            sideLength = 12;
        }
        var hDirection = 1;
        var vDirection = 1;
        if (this.horizontalNeighbour.position.x < this.position.x) {
            hDirection = -1;
        }
        if (this.verticalNeighbour.position.y < this.position.y) {
            vDirection = -1;
        }
        if (this.cropperSettings.rounded) {
            var width = this.position.x - this.horizontalNeighbour.position.x;
            var height = this.position.y - this.verticalNeighbour.position.y;
            var offX = Math.round(Math.sin(Math.PI / 2) * Math.abs(width / 2)) / 4;
            var offY = Math.round(Math.sin(Math.PI / 2) * Math.abs(height / 2)) / 4;
            this.offset.x = hDirection > 0 ? offX : -offX;
            this.offset.y = vDirection > 0 ? offY : -offY;
        }
        else {
            this.offset.x = 0;
            this.offset.y = 0;
        }
        ctx.beginPath();
        ctx.lineJoin = 'miter';
        ctx.moveTo(this.position.x + this.offset.x, this.position.y + this.offset.y);
        ctx.lineTo(this.position.x + this.offset.x + (sideLength * hDirection), this.position.y + this.offset.y);
        ctx.lineTo(this.position.x + this.offset.x + (sideLength * hDirection), this.position.y + this.offset.y +
            (sideLength * vDirection));
        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y + (sideLength * vDirection));
        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y);
        ctx.closePath();
        ctx.lineWidth = this.cropperSettings.cropperDrawSettings.strokeWidth;
        ctx.strokeStyle = this.cropperSettings.cropperDrawSettings.strokeColor;
        ctx.stroke();
    };
    CornerMarker.prototype.drawCornerFill = function (ctx) {
        var sideLength = 10;
        if (this.over || this.drag) {
            sideLength = 12;
        }
        var hDirection = 1;
        var vDirection = 1;
        if (this.horizontalNeighbour.position.x < this.position.x) {
            hDirection = -1;
        }
        if (this.verticalNeighbour.position.y < this.position.y) {
            vDirection = -1;
        }
        ctx.beginPath();
        ctx.moveTo(this.position.x + this.offset.x, this.position.y + this.offset.y);
        ctx.lineTo(this.position.x + this.offset.x + (sideLength * hDirection), this.position.y + this.offset.y);
        ctx.lineTo(this.position.x + this.offset.x + (sideLength * hDirection), this.position.y + this.offset.y +
            (sideLength * vDirection));
        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y + (sideLength * vDirection));
        ctx.lineTo(this.position.x + this.offset.x, this.position.y + this.offset.y);
        ctx.closePath();
        ctx.fillStyle = 'rgba(255,255,255,.7)';
        ctx.fill();
    };
    CornerMarker.prototype.moveX = function (x) {
        this.setPosition(x, this.position.y);
    };
    CornerMarker.prototype.moveY = function (y) {
        this.setPosition(this.position.x, y);
    };
    CornerMarker.prototype.move = function (x, y) {
        this.setPosition(x, y);
        this.verticalNeighbour.moveX(x);
        this.horizontalNeighbour.moveY(y);
    };
    CornerMarker.prototype.addHorizontalNeighbour = function (neighbour) {
        this.horizontalNeighbour = neighbour;
    };
    CornerMarker.prototype.addVerticalNeighbour = function (neighbour) {
        this.verticalNeighbour = neighbour;
    };
    CornerMarker.prototype.getHorizontalNeighbour = function () {
        return this.horizontalNeighbour;
    };
    CornerMarker.prototype.getVerticalNeighbour = function () {
        return this.verticalNeighbour;
    };
    CornerMarker.prototype.draw = function (ctx) {
        this.drawCornerFill(ctx);
        this.drawCornerBorder(ctx);
    };
    return CornerMarker;
}(__WEBPACK_IMPORTED_MODULE_0__handle__["a" /* Handle */]));

//# sourceMappingURL=cornerMarker.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/model/cropPosition.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CropPosition; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__bounds__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/bounds.js");

var CropPosition = (function () {
    function CropPosition(x, y, w, h) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (w === void 0) { w = 0; }
        if (h === void 0) { h = 0; }
        this.x = +x;
        this.y = +y;
        this.w = +w;
        this.h = +h;
    }
    CropPosition.prototype.toBounds = function () {
        return new __WEBPACK_IMPORTED_MODULE_0__bounds__["a" /* Bounds */](this.x, this.y, this.w, this.h);
    };
    CropPosition.prototype.isInitialized = function () {
        return this.x !== 0 && this.y !== 0 && this.w !== 0 && this.h !== 0;
    };
    return CropPosition;
}());

//# sourceMappingURL=cropPosition.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/model/cropTouch.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CropTouch; });
var CropTouch = (function () {
    function CropTouch(x, y, id) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (id === void 0) { id = 0; }
        this.id = id;
        this.x = x;
        this.y = y;
    }
    return CropTouch;
}());

//# sourceMappingURL=cropTouch.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/model/dragMarker.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DragMarker; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__handle__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/handle.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__pointPool__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/pointPool.js");
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var DragMarker = (function (_super) {
    __extends(DragMarker, _super);
    function DragMarker(x, y, radius, cropperSettings) {
        var _this = _super.call(this, x, y, radius, cropperSettings) || this;
        _this.iconPoints = [];
        _this.scaledIconPoints = [];
        _this.getDragIconPoints(_this.iconPoints, 1);
        _this.getDragIconPoints(_this.scaledIconPoints, 1.2);
        return _this;
    }
    DragMarker.prototype.draw = function (ctx) {
        if (this.over || this.drag) {
            this.drawIcon(ctx, this.scaledIconPoints);
        }
        else {
            this.drawIcon(ctx, this.iconPoints);
        }
    };
    DragMarker.prototype.getDragIconPoints = function (arr, scale) {
        var maxLength = 17 * scale;
        var arrowWidth = 14 * scale;
        var arrowLength = 8 * scale;
        var connectorThroat = 4 * scale;
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(-connectorThroat / 2, maxLength - arrowLength));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(-arrowWidth / 2, maxLength - arrowLength));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(0, maxLength));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(arrowWidth / 2, maxLength - arrowLength));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(connectorThroat / 2, maxLength - arrowLength));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(connectorThroat / 2, connectorThroat / 2));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(maxLength - arrowLength, connectorThroat / 2));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(maxLength - arrowLength, arrowWidth / 2));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(maxLength, 0));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(maxLength - arrowLength, -arrowWidth / 2));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(maxLength - arrowLength, -connectorThroat / 2));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(connectorThroat / 2, -connectorThroat / 2));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(connectorThroat / 2, -maxLength + arrowLength));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(arrowWidth / 2, -maxLength + arrowLength));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(0, -maxLength));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(-arrowWidth / 2, -maxLength + arrowLength));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(-connectorThroat / 2, -maxLength + arrowLength));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(-connectorThroat / 2, -connectorThroat / 2));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(-maxLength + arrowLength, -connectorThroat / 2));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(-maxLength + arrowLength, -arrowWidth / 2));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(-maxLength, 0));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(-maxLength + arrowLength, arrowWidth / 2));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(-maxLength + arrowLength, connectorThroat / 2));
        arr.push(__WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.borrow(-connectorThroat / 2, connectorThroat / 2));
    };
    DragMarker.prototype.drawIcon = function (ctx, points) {
        ctx.beginPath();
        ctx.moveTo(points[0].x + this.position.x, points[0].y + this.position.y);
        for (var k = 0; k < points.length; k++) {
            var p = points[k];
            ctx.lineTo(p.x + this.position.x, p.y + this.position.y);
        }
        ctx.closePath();
        ctx.fillStyle = this.cropperSettings.cropperDrawSettings.dragIconFillColor;
        ctx.fill();
        ctx.lineWidth = this.cropperSettings.cropperDrawSettings.dragIconStrokeWidth;
        ctx.strokeStyle = this.cropperSettings.cropperDrawSettings.dragIconStrokeColor;
        ctx.stroke();
    };
    DragMarker.prototype.recalculatePosition = function (bounds) {
        var c = bounds.getCentre();
        this.setPosition(c.x, c.y);
        __WEBPACK_IMPORTED_MODULE_1__pointPool__["a" /* PointPool */].instance.returnPoint(c);
    };
    return DragMarker;
}(__WEBPACK_IMPORTED_MODULE_0__handle__["a" /* Handle */]));

//# sourceMappingURL=dragMarker.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/model/handle.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Handle; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__point__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/point.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__cropperSettings__ = __webpack_require__("./node_modules/ng2-img-cropper/src/cropperSettings.js");


var Handle = (function () {
    function Handle(x, y, radius, settings) {
        this.cropperSettings = new __WEBPACK_IMPORTED_MODULE_1__cropperSettings__["a" /* CropperSettings */]();
        this.over = false;
        this.drag = false;
        this._position = new __WEBPACK_IMPORTED_MODULE_0__point__["a" /* Point */](x, y);
        this.offset = new __WEBPACK_IMPORTED_MODULE_0__point__["a" /* Point */](0, 0);
        this.radius = radius;
        this.cropperSettings = settings;
    }
    Handle.prototype.setDrag = function (value) {
        this.drag = value;
        this.setOver(value);
    };
    Handle.prototype.draw = function (ctx) {
        // this should't be empty
    };
    Handle.prototype.setOver = function (over) {
        this.over = over;
    };
    Handle.prototype.touchInBounds = function (x, y) {
        return (x > this.position.x - this.radius + this.offset.x) &&
            (x < this.position.x + this.radius + this.offset.x) &&
            (y > this.position.y - this.radius + this.offset.y) &&
            (y < this.position.y + this.radius + this.offset.y);
    };
    Object.defineProperty(Handle.prototype, "position", {
        get: function () {
            return this._position;
        },
        enumerable: true,
        configurable: true
    });
    Handle.prototype.setPosition = function (x, y) {
        this._position.x = x;
        this._position.y = y;
    };
    return Handle;
}());

//# sourceMappingURL=handle.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/model/imageCropperModel.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ImageCropperModel; });
var ImageCropperModel = (function () {
    function ImageCropperModel() {
    }
    return ImageCropperModel;
}());

//# sourceMappingURL=imageCropperModel.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/model/point.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Point; });
var Point = (function () {
    function Point(x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this.x = x;
        this.y = y;
    }
    Object.defineProperty(Point.prototype, "next", {
        get: function () {
            return this._next;
        },
        set: function (p) {
            this._next = p;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Point.prototype, "prev", {
        get: function () {
            return this._prev;
        },
        set: function (p) {
            this._prev = p;
        },
        enumerable: true,
        configurable: true
    });
    return Point;
}());

//# sourceMappingURL=point.js.map

/***/ }),

/***/ "./node_modules/ng2-img-cropper/src/model/pointPool.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PointPool; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__point__ = __webpack_require__("./node_modules/ng2-img-cropper/src/model/point.js");

var PointPool = (function () {
    function PointPool(initialSize) {
        PointPool._instance = this;
        var prev = this.firstAvailable = new __WEBPACK_IMPORTED_MODULE_0__point__["a" /* Point */]();
        for (var i = 1; i < initialSize; i++) {
            var p = new __WEBPACK_IMPORTED_MODULE_0__point__["a" /* Point */]();
            prev.next = p;
            prev = p;
        }
    }
    Object.defineProperty(PointPool, "instance", {
        get: function () {
            return PointPool._instance;
        },
        enumerable: true,
        configurable: true
    });
    PointPool.prototype.borrow = function (x, y) {
        if (this.firstAvailable == null) {
            throw 'Pool exhausted';
        }
        this.borrowed++;
        var p = this.firstAvailable;
        this.firstAvailable = p.next;
        p.x = x;
        p.y = y;
        return p;
    };
    ;
    PointPool.prototype.returnPoint = function (p) {
        this.borrowed--;
        p.x = 0;
        p.y = 0;
        p.next = this.firstAvailable;
        this.firstAvailable = p;
    };
    ;
    return PointPool;
}());

//# sourceMappingURL=pointPool.js.map

/***/ }),

/***/ "./src/app/routes/survey/analyse/survey.analyse.component.css":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/routes/survey/analyse/survey.analyse.component.html":
/***/ (function(module, exports) {

module.exports = "<p>\n  survey.analyse works!\n</p>\n"

/***/ }),

/***/ "./src/app/routes/survey/analyse/survey.analyse.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyAnalyseComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var SurveyAnalyseComponent = (function () {
    function SurveyAnalyseComponent() {
    }
    SurveyAnalyseComponent.prototype.ngOnInit = function () {
    };
    return SurveyAnalyseComponent;
}());
SurveyAnalyseComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey.analyse',
        template: __webpack_require__("./src/app/routes/survey/analyse/survey.analyse.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/analyse/survey.analyse.component.css")]
    }),
    __metadata("design:paramtypes", [])
], SurveyAnalyseComponent);

//# sourceMappingURL=survey.analyse.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/collect/survey.collect.component.css":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/routes/survey/collect/survey.collect.component.html":
/***/ (function(module, exports) {

module.exports = "<p>\n  survey.collect works!\n</p>\n"

/***/ }),

/***/ "./src/app/routes/survey/collect/survey.collect.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyCollectComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var SurveyCollectComponent = (function () {
    function SurveyCollectComponent() {
    }
    SurveyCollectComponent.prototype.ngOnInit = function () {
    };
    return SurveyCollectComponent;
}());
SurveyCollectComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey.collect',
        template: __webpack_require__("./src/app/routes/survey/collect/survey.collect.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/collect/survey.collect.component.css")]
    }),
    __metadata("design:paramtypes", [])
], SurveyCollectComponent);

//# sourceMappingURL=survey.collect.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/edit.pipe.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export EmbedDataTypePipe */
/* unused harmony export EmbedDataFieldPipe */
/* unused harmony export ShowSkipLogic */
/* unused harmony export FindCriteriaName */
/* unused harmony export FindOptionsInDisplayLogic */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EditPipe; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_utils_service__ = __webpack_require__("./src/app/shared/services/utils.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var EmbedDataTypePipe = (function () {
    function EmbedDataTypePipe() {
    }
    EmbedDataTypePipe.prototype.transform = function (value, args) {
        return value.charAt(2);
    };
    return EmbedDataTypePipe;
}());
EmbedDataTypePipe = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({
        name: 'embedDataType'
    })
], EmbedDataTypePipe);

var EmbedDataFieldPipe = (function () {
    function EmbedDataFieldPipe() {
    }
    EmbedDataFieldPipe.prototype.transform = function (value, args) {
        return value.substr(6, (value.length - 8));
    };
    return EmbedDataFieldPipe;
}());
EmbedDataFieldPipe = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({
        name: 'embedDataField'
    })
], EmbedDataFieldPipe);

var ShowSkipLogic = (function () {
    function ShowSkipLogic(utils) {
        this.utils = utils;
    }
    ShowSkipLogic.prototype.transform = function (value, ques) {
        var idx = this.utils.findIndex(ques.fieldOptions.row, '_id', value);
        if (idx != -1) {
            return ques.fieldOptions.row[idx].text;
        }
        else {
            idx = this.utils.findIndex(ques.fieldOptions.col, '_id', value);
            if (idx != -1) {
                return ques.fieldOptions.col[idx].text;
            }
            else {
                return null;
            }
        }
    };
    return ShowSkipLogic;
}());
ShowSkipLogic = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({
        name: 'showSkipLogic'
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_utils_service__["a" /* UtilsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_utils_service__["a" /* UtilsService */]) === "function" && _a || Object])
], ShowSkipLogic);

var FindCriteriaName = (function () {
    function FindCriteriaName(utils) {
        this.utils = utils;
    }
    FindCriteriaName.prototype.transform = function (value, criteriaArr) {
        var idx = this.utils.findIndex(criteriaArr, '_id', value);
        if (idx != -1) {
            return criteriaArr[idx].name;
        }
        else {
            return null;
        }
    };
    return FindCriteriaName;
}());
FindCriteriaName = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({
        name: 'findCriteriaName'
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_utils_service__["a" /* UtilsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_utils_service__["a" /* UtilsService */]) === "function" && _b || Object])
], FindCriteriaName);

var FindOptionsInDisplayLogic = (function () {
    function FindOptionsInDisplayLogic(utils) {
        this.utils = utils;
    }
    FindOptionsInDisplayLogic.prototype.transform = function (value, ques) {
        var _this = this;
        var idx;
        var res = [];
        value.forEach(function (item) {
            idx = _this.utils.findIndex(ques.fieldOptions.row, '_id', item);
            if (idx != -1) {
                res.push(ques.fieldOptions.row[idx].text);
            }
        });
        return res.join(', ');
    };
    return FindOptionsInDisplayLogic;
}());
FindOptionsInDisplayLogic = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({
        name: 'findOptionsInDisplayLogic'
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_utils_service__["a" /* UtilsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_utils_service__["a" /* UtilsService */]) === "function" && _c || Object])
], FindOptionsInDisplayLogic);

var EditPipe = [EmbedDataFieldPipe, EmbedDataTypePipe, ShowSkipLogic, FindCriteriaName, FindOptionsInDisplayLogic];
var _a, _b, _c;
//# sourceMappingURL=edit.pipe.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/ques.del.notification/ques.del.notification.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"ques_del_notifn\">\n  <div class=\"inner_del_notifn\">\n    <div class=\"dn_close\" (click)=\"closeDelNotfn()\">\n      X\n    </div>\n    <div>\n      <div class=\"dn_heading\">\n        Delete Question\n      </div>\n      <div class=\"dn_msg\">\n        Deleting following question(s) has caused you to lose the data collected.\n      </div>\n    </div>\n    <div class=\"dn_list\">\n      <div *ngFor=\"let delQId of (delNotification | keys); index as delIdx\">\n        <div class=\"dn_del_ques_title\">\n          <span>Due to deletion of Question: </span>\n          <span [innerHTML]=\"titlesOfDelQues[delQId]\"></span>\n        </div>\n        <div class=\"dn_inner_list\" *ngIf=\"delNotification[delQId].logics\">\n          <div class=\"dn_list_topic\">\n            LOGICS\n          </div>\n          <div class=\"dn_logic_block\" *ngFor=\"let quesId of (delNotification[delQId].logics | keys)\">\n            <div class=\"dn_list_head\">\n              <span>Q</span>\n              <span>{{questionCountAndId.data[quesId]}}.</span>\n              <span [innerHTML]=\"allQuestionsOfSurvey[quesId].title\"></span>\n            </div>\n            <div class=\"dn_list_content\" *ngFor=\"let logic of delNotification[delQId].logics[quesId]\">\n              <span>-</span>\n              <span>{{logic}}</span>\n            </div>\n          </div>\n        </div>\n        <div class=\"dn_inner_list\" *ngIf=\"delNotification[delQId].criteria\">\n          <div class=\"dn_list_topic\">\n            CRITERIA\n          </div>\n          <div class=\"dn_list_head\">\n            <span>{{delNotification[delQId].criteria.join(',')}}</span>\n            <span>{{delNotification[delQId].criteria.length == 1 ? 'is' : 'are'}}</span>\n            <span>Effected</span>\n          </div>\n        </div>\n        <div class=\"dn_inner_list\" *ngIf=\"delNotification[delQId].quota\">\n          <div class=\"dn_list_topic\">\n            QUOTA\n          </div>\n          <div class=\"dn_list_head\">\n            <span>{{delNotification[delQId].quota.name}}</span>\n            <span>is</span>\n            <span>Effected</span>\n          </div>\n        </div>\n        <div class=\"dn_inner_list\" *ngIf=\"delNotification[delQId].piping\">\n          <div class=\"dn_list_topic\">\n            PIPING\n          </div>\n          <div>\n            <div class=\"dn_list_head\" *ngFor=\"let quesId of delNotification[delQId].piping\">\n              <span>Q</span>\n              <span>{{questionCountAndId.data[quesId]}}.</span>\n              <span [innerHTML]=\"allQuestionsOfSurvey[quesId].title\"></span>\n            </div>\n          </div>\n        </div>\n        <div class=\"dn_inner_list\" *ngIf=\"delNotification[delQId].carryfrwd\">\n          <div class=\"dn_list_topic\">\n            CARRY FORWARD\n          </div>\n          <div>\n            <div class=\"dn_list_head\" *ngFor=\"let quesId of delNotification[delQId].carryfrwd\">\n              <span>Q</span>\n              <span>{{questionCountAndId.data[quesId]}}.</span>\n              <span [innerHTML]=\"allQuestionsOfSurvey[quesId].title\"></span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/ques.del.notification/ques.del.notification.component.scss":
/***/ (function(module, exports) {

module.exports = ".ques_del_notifn {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100vh;\n  z-index: 5;\n  background-color: rgba(0, 0, 0, 0.2); }\n  .ques_del_notifn .inner_del_notifn {\n    background-color: white;\n    width: -webkit-fit-content;\n    width: -moz-fit-content;\n    width: fit-content;\n    padding: 50px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    -webkit-transform: translate(-50%, -50%);\n    transform: translate(-50%, -50%);\n    position: relative;\n    max-height: calc(100vh - 140px);\n    overflow: auto; }\n  .ques_del_notifn .dn_close {\n    position: absolute;\n    right: 20px;\n    top: 20px;\n    font-family: \"Helvetica Neue Medium\";\n    cursor: pointer;\n    padding: 10px; }\n  .ques_del_notifn .dn_heading {\n    font-family: \"Helvetica Neue Medium\";\n    font-size: 22px;\n    padding-bottom: 20px; }\n  .ques_del_notifn .dn_msg {\n    color: #E75858;\n    font-family: \"Helvetica Neue Medium\";\n    font-size: 16px;\n    padding-bottom: 10px; }\n  .ques_del_notifn .dn_list {\n    padding: 10px 0; }\n  .ques_del_notifn .dn_inner_list {\n    padding-bottom: 20px; }\n  .ques_del_notifn .dn_del_ques_title {\n    font-family: \"Helvetica Neue Medium\";\n    font-size: 16px; }\n  .ques_del_notifn .dn_list_topic {\n    color: #999999;\n    font-family: \"Helvetica Neue Medium\";\n    text-transform: capitalize;\n    padding-bottom: 6px; }\n  .ques_del_notifn .dn_logic_block {\n    padding-bottom: 7px; }\n  .ques_del_notifn .dn_list_head {\n    font-family: \"Helvetica Neue Medium\"; }\n  .ques_del_notifn .dn_list_content {\n    font-size: 12px;\n    color: #9A9A9A; }\n  ::ng-deep .dn_list_head p {\n  display: inline-block; }\n  ::ng-deep .dn_del_ques_title p {\n  display: inline-block; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/ques.del.notification/ques.del.notification.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QuesDelNotificationComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var QuesDelNotificationComponent = (function () {
    function QuesDelNotificationComponent(services) {
        this.services = services;
        // <titlesOfDelQues> = {
        //   qid: title
        // }
        this.onClose = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
    }
    QuesDelNotificationComponent.prototype.ngOnInit = function () {
        this.allQuestionsOfSurvey = this.services.form.allQuestionsOfSurvey;
        this.questionCountAndId = this.services.form.getQuestionCountAndId();
    };
    QuesDelNotificationComponent.prototype.closeDelNotfn = function () {
        this.onClose.emit();
    };
    return QuesDelNotificationComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], QuesDelNotificationComponent.prototype, "delNotification", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], QuesDelNotificationComponent.prototype, "titlesOfDelQues", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], QuesDelNotificationComponent.prototype, "onClose", void 0);
QuesDelNotificationComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-ques-del-notification',
        template: __webpack_require__("./src/app/routes/survey/edit/ques.del.notification/ques.del.notification.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/ques.del.notification/ques.del.notification.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object])
], QuesDelNotificationComponent);

var _a, _b;
//# sourceMappingURL=ques.del.notification.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/question.actions.header/question.actions.header.component.css":
/***/ (function(module, exports) {

module.exports = ".question_actions_header{\n  color: #4b4b4b;\n  font-size: 16px;\n  font-family: 'Helvetica Neue Medium';\n  background-color: #f2f2f2;\n  padding: 10px 15px;\n}\n\n.header_icon{\n  padding: 0 10px 0 5px;\n}\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/question.actions.header/question.actions.header.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"question_actions_header\">\n  <span class=\"header_icon\"><img [src]=\"'./assets/images/editSurvey/' + headerData.icon\" height=\"20\"></span>\n  <span>{{headerData.text}}</span>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/question.actions.header/question.actions.header.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QuestionActionsHeaderComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var QuestionActionsHeaderComponent = (function () {
    function QuestionActionsHeaderComponent() {
    }
    QuestionActionsHeaderComponent.prototype.ngOnInit = function () {
        this.headerData = this.inpData;
    };
    return QuestionActionsHeaderComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], QuestionActionsHeaderComponent.prototype, "inpData", void 0);
QuestionActionsHeaderComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-question-actions-header',
        template: __webpack_require__("./src/app/routes/survey/edit/question.actions.header/question.actions.header.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/question.actions.header/question.actions.header.component.css")]
    }),
    __metadata("design:paramtypes", [])
], QuestionActionsHeaderComponent);

//# sourceMappingURL=question.actions.header.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.add.question/survey.add.question.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"ques_from\">\n  <div class=\"ques_nav\">\n    <label class=\"inner_ques_nav\" [ngClass]=\"(surveyDesignData.quesNav=='new' ? 'active' : '')\">\n      <input type=\"radio\" name=\"quesNav\" value=\"new\" [(ngModel)]=\"surveyDesignData.quesNav\">New Question</label>\n    <!-- <label class=\"inner_ques_nav\" [ngClass]=\"(surveyDesignData.quesNav=='bank' ? 'active' : '')\">\n      <input type=\"radio\" name=\"quesNav\" value=\"bank\" [(ngModel)]=\"surveyDesignData.quesNav\">Question Bank</label> -->\n    <label class=\"inner_ques_nav\" [ngClass]=\"(surveyDesignData.quesNav=='del' ? 'active' : '')\">\n      <input type=\"radio\" name=\"quesNav\" value=\"del\" [(ngModel)]=\"surveyDesignData.quesNav\">Deleted</label>\n  </div>\n</div>\n<div [hidden]=\"!(surveyDesignData.quesNav=='new')\" class=\"ques_types_div\">\n  <div>\n    <div class=\"ques_types_row\">\n      <div class=\"ques_types\" (click)=\"setQuestionType('single-choice')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/single-choice.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Single Choice</p>\n        </div>\n      </div>\n      <div class=\"ques_types\" (click)=\"setQuestionType('mul-choice')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/multiple-choice.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Multiple Choice</p>\n        </div>\n      </div>\n      <div class=\"ques_types\" (click)=\"setQuestionType('nps')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/nps.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Net Promoter Score</p>\n        </div>\n      </div>\n    </div>\n    <div class=\"ques_types_row\">\n      <div class=\"ques_types\" (click)=\"setQuestionType('single-text')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/single-textbox.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Single Textbox</p>\n        </div>\n      </div>\n      <div class=\"ques_types\" (click)=\"setQuestionType('dropdown')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/dropdown.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Drop down</p>\n        </div>\n      </div>\n      <div class=\"ques_types\" (click)=\"setQuestionType('ranking')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/ranking.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Ranking</p>\n        </div>\n      </div>\n    </div>\n    <div class=\"ques_types_row\">\n      <div class=\"ques_types\" (click)=\"setQuestionType('mul-text')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/multiple-textbox.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Multiple Textboxes</p>\n        </div>\n      </div>\n      <div class=\"ques_types\" (click)=\"setQuestionType('matrix-rating')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/matrix-rating.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Matrix / Rating Scale</p>\n        </div>\n      </div>\n      <div class=\"ques_types\" (click)=\"setQuestionType('matrix-dropdown')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/matrix-dropdown.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Matrix Dropdown</p>\n        </div>\n      </div>\n    </div>\n    <div class=\"ques_types_row\">\n      <div class=\"ques_types\" (click)=\"setQuestionType('matrix-text')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/matrix-textbox.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Matrix Textbox</p>\n        </div>\n      </div>\n      <div class=\"ques_types\" (click)=\"setQuestionType('graph-rating')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/graphical-rating.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Graphical Rating</p>\n        </div>\n      </div>\n      <div class=\"ques_types\" (click)=\"setQuestionType('contacts')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/contacts.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Contacts</p>\n        </div>\n      </div>\n    </div>\n    <div class=\"ques_types_row\">\n      <div class=\"ques_types\" (click)=\"setQuestionType('comment')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/comment-box.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Long Text</p>\n        </div>\n      </div>\n      <div class=\"ques_types\" (click)=\"setQuestionType('statement')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/statement.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Statement</p>\n        </div>\n      </div>\n      <div class=\"ques_types\" (click)=\"setQuestionType('date-time')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/date-time.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Date & Time</p>\n        </div>\n      </div>\n    </div>\n    <div class=\"ques_types_row\">\n      <div class=\"ques_types\" (click)=\"setQuestionType('file')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/file-upload.svg\"></div>\n        <div>\n          <p class=\"nomargin\">File Upload</p>\n        </div>\n      </div>\n      <div class=\"ques_types\" (click)=\"setQuestionType('slider')\">\n        <div class=\"ques_type_icon\"><img src=\"./assets/images/editSurvey/slider.svg\"></div>\n        <div>\n          <p class=\"nomargin\">Slider</p>\n        </div>\n      </div>\n      <div class=\"ques_types\">\n      </div>\n    </div>\n  </div>\n</div>\n<!-- <div [hidden]=\"!(surveyDesignData.quesNav=='bank')\">\n  question bank comes over here\n</div> -->\n<div *ngIf=\"(surveyDesignData.quesNav=='del')\">\n\t\t<app-survey-deleted-question (onRestore)=\"onRestoreQuestion($event)\"></app-survey-deleted-question>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.add.question/survey.add.question.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyAddQuestionComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var SurveyAddQuestionComponent = (function () {
    function SurveyAddQuestionComponent(router, editDataService) {
        this.router = router;
        this.editDataService = editDataService;
        this.onRestoreQues = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
    }
    SurveyAddQuestionComponent.prototype.ngOnInit = function () {
        this.selectedQuesType = this.editDataService.selectedQuesType;
        this.surveyDesignData = this.editDataService.surveyDesignData;
    };
    SurveyAddQuestionComponent.prototype.setQuestionType = function (type) {
        this.selectedQuesType.type = type;
        this.router.navigate(['/survey', 'design', this.editDataService.addQuestionRelatedData.surId, 'question', 'qid']);
    };
    SurveyAddQuestionComponent.prototype.onRestoreQuestion = function (e) {
        this.onRestoreQues.emit(e);
    };
    return SurveyAddQuestionComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], SurveyAddQuestionComponent.prototype, "onRestoreQues", void 0);
SurveyAddQuestionComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey-add-question',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.add.question/survey.add.question.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__angular_router__["e" /* Router */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_router__["e" /* Router */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__edit_data_service__["a" /* EditDataService */]) === "function" && _c || Object])
], SurveyAddQuestionComponent);

var _a, _b, _c;
//# sourceMappingURL=survey.add.question.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.add.question/survey.deleted-question/survey.deleted-question.component.html":
/***/ (function(module, exports) {

module.exports = "<div>\n    <div class=\"del_ques_container\" *ngFor=\"let dQ of deletedQuestionList | keys;\">\n      <div style=\"text-align: left;\">\n        <div class=\"ques_icon\" style=\"display:inline-block; vertical-align: top;\">\n          <img [src]=\"getIcon(deletedQuestionList[dQ].fieldType)\" style=\"max-width: 26px;\">\n        </div>\n        <div class=\"ques_text\" [innerHTML]=\"deletedQuestionList[dQ].title\">\n        </div>\n      </div>\n      <div class=\"bottom_container\">\n        <div class=\"time_del\">\n          deleted {{deletedQuestionList[dQ].d.diff}} {{deletedQuestionList[dQ].d.type}} ago\n        </div>\n        <div class=\"restore_container\" (click)=\"restoreQuestion(dQ);\">\n          <input type=\"button\" value=\"Restore\" class=\"btn_restore\">\n        </div>\n      </div>\n    </div>\n    <div class=\"not_found_text\" *ngIf=\"deletedQuestionList.length == 0\">\n      No deleted questions found!\n    </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.add.question/survey.deleted-question/survey.deleted-question.component.scss":
/***/ (function(module, exports) {

module.exports = ".del_ques_container {\n  border: 1px solid #D8D8D8;\n  border-radius: 3px;\n  margin: 16px;\n  padding: 12px; }\n\n.ques_text {\n  display: inline-block;\n  color: #3A3A3A;\n  margin-left: 12px;\n  font-family: \"Helvetica\";\n  font-size: 14px;\n  line-height: 20px;\n  max-width: 260px; }\n\n.btn_restore {\n  border: 1px solid #D7D7D7;\n  border-radius: 2px;\n  background-color: #FFFFFF;\n  color: #45A83A;\n  font-family: \"Helvetica\";\n  font-size: 12px;\n  line-height: 14px;\n  padding: 6px 10px; }\n\n.restore_container {\n  display: inline-block;\n  float: right; }\n\n.time_del {\n  display: inline-block;\n  height: 14px;\n  color: #999999;\n  font-family: \"Helvetica\";\n  font-size: 12px;\n  font-style: italic;\n  line-height: 14px; }\n\n.bottom_container {\n  margin-top: 10px;\n  margin-left: 36px;\n  text-align: left; }\n\n.not_found_text {\n  text-align: center;\n  margin-top: 8px;\n  font-family: \"Helvetica\";\n  font-size: 14px;\n  line-height: 20px; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.add.question/survey.deleted-question/survey.deleted-question.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyDeletedQuestionComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_questionTemplates_question_types_service__ = __webpack_require__("./src/app/shared/questionTemplates/question-types.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var SurveyDeletedQuestionComponent = (function () {
    function SurveyDeletedQuestionComponent(services, editDataServices, qTypesServ) {
        this.services = services;
        this.editDataServices = editDataServices;
        this.qTypesServ = qTypesServ;
        this.onRestore = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.deletedQuestionList = [];
    }
    SurveyDeletedQuestionComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.formObj = this.services.form.formObj;
        console.log("survey", this.formObj);
        this.resData = this.editDataServices.addQuestionRelatedData;
        this.services.resource.getDeletedQuestionList(this.formObj._id).subscribe(function (dat) {
            console.log(dat);
            _this.deletedQuestionList = dat;
            for (var i = 0; i < _this.deletedQuestionList.length; i++) {
                _this.deletedQuestionList[i].d = _this.getDateDiffFromCurrent(new Date(_this.deletedQuestionList[i].modified));
            }
        });
        console.log(this.deletedQuestionList);
    };
    SurveyDeletedQuestionComponent.prototype.getIcon = function (fieldType) {
        return this.qTypesServ.questionTypesJSON[this.qTypesServ.getQuestionType(fieldType.family, fieldType.subtype).type].icon;
    };
    SurveyDeletedQuestionComponent.prototype.restoreQuestion = function (dqID) {
        var _this = this;
        var dq = this.deletedQuestionList[dqID];
        delete this.deletedQuestionList[dqID];
        var toPageId = this.resData.pageId;
        var refQuesId = this.resData.addQuesRefId;
        this.services.resource.restoreDeletedQuestionList(dq._id, toPageId, refQuesId).subscribe(function (dat) {
            _this.formObj.pageFields[_this.resData.pageIndex].formFields.splice(_this.resData.addQuesRefIndex, 0, new Question(dat));
            _this.services.form.addNewQuesInAllQuesObj(new Question(dat));
            _this.onRestore.emit('restore-del-ques');
            console.log(dat);
        });
    };
    SurveyDeletedQuestionComponent.prototype.getDateDiffFromCurrent = function (date_old) {
        var n = new Date(); //now
        var d = Math.abs(n.getTime() - date_old.getTime()) / 1000; // delta
        var r = {}; // result
        var s = {
            year: 31536000,
            month: 2592000,
            week: 604800,
            day: 86400,
            hour: 3600,
            minute: 60,
            second: 1
        };
        Object.keys(s).forEach(function (key) {
            r[key] = Math.floor(d / s[key]);
            d -= r[key] * s[key];
        });
        var ret = { "type": "", "diff": 0 };
        for (var i = 0; i < Object.keys(s).length; i++) {
            if (r[Object.keys(s)[i]] != 0) {
                if (r[Object.keys(s)[i]] == 1) {
                    ret = { "type": Object.keys(s)[i], "diff": r[Object.keys(s)[i]] };
                }
                else {
                    ret = { "type": Object.keys(s)[i] + "s", "diff": r[Object.keys(s)[i]] };
                }
                break;
            }
        }
        return ret;
    };
    return SurveyDeletedQuestionComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], SurveyDeletedQuestionComponent.prototype, "onRestore", void 0);
SurveyDeletedQuestionComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey-deleted-question',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.add.question/survey.deleted-question/survey.deleted-question.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.add.question/survey.deleted-question/survey.deleted-question.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__edit_data_service__["a" /* EditDataService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_3__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */]) === "function" && _d || Object])
], SurveyDeletedQuestionComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=survey.deleted-question.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/criteria/criteria.component.css":
/***/ (function(module, exports) {

module.exports = ".make_new_criteria{\n  background-color: #68c169;\n  color: white;\n  font-size: 12px;\n  font-family: 'Helvetica Neue Medium';\n  vertical-align: top;\n  float: right;\n}\n\n.make_new_criteria span{\n  margin-right: 5px;\n}\n\n.criteria_outer_div{\n  border: 1px solid #E8E6E6;\n  margin-top: 40px;\n  border-radius: 2px;\n  display: table;\n  width: 100%;\n  font-size: 12px;\n  position: relative;\n}\n\n.criteria_left_side{\n  display: table-cell;\n  background-color: #f1f1f1;\n  width: 18%;\n  padding-left: 15px;\n  vertical-align: top;\n}\n\n.criteria_right_side{\n  display: table-cell;\n  padding: 15px 60px 15px 40px;\n}\n\n.criteria_type{\n  padding: 15px 0 15px 0;\n  cursor: pointer;\n}\n\n.criteria_type:not(:last-child){\n  border-bottom: 1px solid #d9d9d9;\n}\n\n.criteria_type.active{\n  background-color: white;\n  margin-left: -15px;\n  border: none;\n  padding-left: 15px;\n  font-family: 'Helvetica Neue Medium';\n}\n\n.criteria_type.active:not(:first-child){\n  margin-top: -1px;\n}\n\n.criteria_sel_options{\n  margin-top: 18px;\n  margin-bottom: 12px;\n}\n\n.criteria_options span{\n  vertical-align: text-bottom;\n  font-weight: 500;\n  margin-left: 7px;\n}\n\n.criteria_sel_unsel{\n  margin-top: 10px;\n}\n\n.reset_criteria_block{\n  position: absolute;\n  right: 22px;\n  top: -9px;\n  background-color: white;\n  padding: 0 7px;\n  color: #0b73ba;\n  font-size: 12px;\n  cursor: pointer;\n  font-family: 'Helvetica Neue Medium';\n}\n\n.criteria_block::after{\n  content: 'x';\n  border: 1px solid black;\n  border-radius: 50%;\n  padding: 0 7px 3px 7px;\n  color:red;\n  margin: 14px 4px 4px 4px;\n  background-color: white;\n  position: absolute;\n  top: -25px;\n  right: -16px;\n}\n\n.remove_embed_criteria::after{\n  content: 'x';\n  border: 1px solid #ada9a9;\n  border-radius: 50%;\n  padding: 0 7px 3px 7px;\n  color:red;\n  margin: 14px 4px 4px 4px;\n  background-color: white;\n  float: right;\n}\n\n.add_new_embed_criteria::after{\n  content: '+';\n  border: 1px solid #ada9a9;\n  border-radius: 50%;\n  padding: 0 6px 3px 6px;\n  color:#68c169;\n  margin: 14px 4px 4px 4px;\n  background-color: white;\n  float: right;\n}\n\n.criteria_block,\n.add_new_embed_criteria,\n.remove_embed_criteria{\n  cursor: pointer;\n}\n\n.embed_criteria_hr{\n  border-bottom: 1px dashed #d9d9d9;\n  margin-top: 50px;\n}\n\n.embed_data_div{\n  margin-top: -25px;\n}\n\n.save_criteria{\n  color: white;\n  background-color: #68c169;\n  border: none;\n  float: right;\n  padding: 6px 22px;\n  font-size: 12px;\n  font-family: 'Helvetica Neue Medium';\n}\n\n.del_criteria{\n  color: #fd1a1a;\n  background-color: white;\n  border: 1px solid #fd1a1a;\n  float: right;\n  margin-left: 15px;\n  padding: 6px 22px;\n  font-size: 12px;\n  font-family: 'Helvetica Neue Medium';\n}\n\n.criteria_and_or_hr{\n  border-bottom: 1px dashed #d9d9d9;\n  margin-top: 35px;\n}\n\n.criteria_and_or_div{\n  margin-top: -15px;\n  margin-left: 22px;\n}\n\n.criteria_add_questions_hr{\n  border-bottom: 1px dashed #d9d9d9;\n  margin-top: 65px;\n}\n\n.criteria_add_questions{\n  color: #2392ED;\n  border: 1px solid #2392ED;\n  background-color: white;\n  padding: 6px 18px;\n  font-size: 12px;\n  font-family: 'Helvetica Neue Medium';\n  margin: -16px 22px 20px 22px;\n}\n\n.criteria_add_questions span{\n  margin-right: 5px;\n}\n\n.close-button, .add-button {\n  cursor: pointer;\n}\n\n.close-button::after {\n  content: 'x';\n    border: 1px solid black;\n    border-radius: 50%;\n    padding: 0 7px 3px 7px;\n    color: red;\n    margin: 14px 4px 4px 4px;\n    background-color: white;\n}\n\n.add-button::after {\n  content: '+';\n    border: 1px solid #3db742;\n    border-radius: 50%;\n    padding: 0 7px 3px 7px;\n    color: #3db742;\n    margin: 14px 4px 4px 4px;\n    background-color: white;\n}\n\n.criteriaBackground{\n  background-color: #fff;\n  padding: 30px;\n  -webkit-box-shadow: 0px 0px 10px 2px #c1c1c1;\n          box-shadow: 0px 0px 10px 2px #c1c1c1;\n}\n\n.divPush{\n    margin-top: 10px;\n}\n\n.cancel{\n  margin-right: 10px;\n  background-color: #FFF!important;\n  color: #1B97E0;\n  border: 1px solid #1b97e0;\n}\n\n.logics_label{\n  font-weight: 500;\n  font-family: \"Helvetica Neue Medium\";\n}\n\n.save_criteria{\n  background-color: #1B97E0;\n}\n\n/*.del_criteria{\n  border: hidden;\n  background-color: #fff!important;\n  color: #1B97E0;\n}*/\n\n.input[type=checkbox]{\n  border-radius: 2px;\n  background-color: #4393E6;\n}\n\n.logicSideTitle{\n  display: none;\n}\n\n.left-new-criteria{\n  display:none;\n}\n\n.buttonClass{\n  margin-bottom: 40px;\n}\n\n.select_embedded_data{\n  margin-top: -16px;\n}\n\n.remove_embed_criteria::after{\n  margin: -11px 4px 4px 4px;\n}\n\n.add_new_embed_criteria::after{\n  margin: -11px 4px 4px 4px;\n}\n\n::ng-deep .logics_affected_title{\n  margin-bottom: 30px;\n}\n\n::ng-deep .logics_affected_table{\n  width: 100%;\n}\n\n::ng-deep .logics_affected_table th,\n::ng-deep .logics_affected_table td {\n  text-align: center;\n}\n\n::ng-deep .logics_affected_table .td1{\n  width: 20%;\n}\n\n::ng-deep .logics_affected_table .td2{\n  width: 45%;\n}\n\n/*left-panel-criteria css*/\n\n::ng-deep .left-panel-criteria div[class^=\"col-lg\"] {\n  width:100%;\n\n}\n\n/* ::ng-deep .left-panel-criteria span.col-lg-2 {\n  width:40%;\n} */\n\n/*\n::ng-deep .left-panel-criteria span.col-lg-4 {\n  width:60%;\n} */\n\n::ng-deep .left-panel-criteria span[class^=\"col-lg-2\"] .form-control{\n  width:100%;\n  margin-right: 10px;\n}\n\n::ng-deep .left-panel-criteria span {\n  margin-bottom: 10px;\n}\n\n::ng-deep .left-panel-criteria .logicSideTitle{\n  font-family: 'Helvetica Neue Medium';\n  display: block;\n  font-size: 14px;\n  margin-bottom: 15px;\n}\n\n::ng-deep .left-panel-criteria .deleteLabel{\n  display: none;\n}\n\n::ng-deep .left-panel-criteria .embed_criteria_hr{\n  margin-top: 25px;\n}\n\n::ng-deep .left-panel-criteria .criteriaName .form-control{\n  width:78%;\n  display: inline-block;\n}\n\n::ng-deep .left-panel-criteria .left-new-criteria{\n  display: inline-block;\n  width: 20%;\n  vertical-align: top;\n  float: right;\n}\n\n::ng-deep .left-panel-criteria .right-new-criteria{\n  display: none;\n}\n\n::ng-deep .left-panel-criteria .criteria_left_side, ::ng-deep .left-panel-criteria .criteria_right_side {\n  display: block;\n  width: 100%;\n}\n\n::ng-deep .left-panel-criteria .criteria_right_side{\n  padding: 15px;\n}\n\n::ng-deep .left-panel-criteria .criteria_and_or_hr{\n  border: 1px dashed #8DD274;\n}\n\n::ng-deep .left-panel-criteria .criteria_type{\n  text-align: center;\n}\n\n::ng-deep .left-panel-criteria .criteria_left_side > div {\n  width: calc(100% / 3);\n  display: inline-block;\n}\n\n::ng-deep .left-panel-criteria .save_criteria{\n  background-color: #1B97E0;\n  border-radius: 2px;\n  width: 49%;\n  /* margin-left: 15px; */\n  color: #fff;\n  float: left;\n  font-family: \"Helvetica\";\n  font-size: 14px;\n}\n\n.cancel_save_criteria{\n  display: none;\n}\n\n::ng-deep .left-panel-criteria .cancel_save_criteria{\n  border: 1px solid #1B97E0;\n  border-radius: 2px;\n  width: 46%;\n  float: right;\n  background-color: #fff;\n  color: #1B97E0;\n  margin-left: 10px;\n  margin-right: 0px;\n  font-family: \"Helvetica\";\n  font-size: 14px;\n  display: block;\n  /* margin-top: -30px; */\n\n}\n\n::ng-deep .left-panel-criteria .criteria_add_questions_hr{\n  display: none;\n}\n\n::ng-deep .left-panel-criteria .criteria_add_questions{\n    margin-top:  20px;\n    width: 100%;\n    margin-left: 0px;\n    border: 1px dashed #CDCBCB;\n    color: #45A83A;\n}\n\n::ng-deep .left-panel-criteria .del_criteria{\n  display: none;\n}\n\n::ng-deep .left-panel-criteria .criteria_add_questions:focus{\n  outline: none;\n}\n\n::ng-deep .left-panel-criteria .criteria_type{\n    border-bottom: 1px solid #d9d9d9;\n}\n\n::ng-deep .left-panel-criteria .logics_label{\n  font-family: \"Helvetica Neue Medium\";\n  font-size: 12px;\n  font-weight: 500;\n  color: #3A3A3A;\n}\n\n::ng-deep .left-panel-criteria .criteria_left_side{\n  padding-left: 0px;\n}\n\n::ng-deep .left-panel-criteria .criteria_type.active{\n  margin-left: 0px;\n  padding-left: 0px;\n}\n\n::ng-deep .left-panel-criteria .criteria_left_side > div:not(:first-child) {\n    margin-left: -3.5px;\n}\n\n::ng-deep .left-panel-criteria .input[type=checkbox]{\n  border-radius: 2px;\n  background-color: #4393E6;\n}\n\n::ng-deep .left-panel-criteria .criteriaBackground{\n  -webkit-box-shadow: none;\n          box-shadow: none;\n}\n\n/*left-panel-criteria css*/\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/criteria/criteria.component.html":
/***/ (function(module, exports) {

module.exports = "<div [formGroup]=\"criteriaSelected.criteriaInFormGroup\">\n  <div class=\"criteriaBackground\">\n    <div class=\"logicSideTitle\">CRITERIA</div>\n    <div class=\"row\">\n      <div class=\"col-lg-4\">\n        <span>\n          <label class=\"logics_label deleteLabel\">Criteria Name</label>\n          <span class=\"criteriaName\"><input type=\"text\" class=\"form-control logics_textbox\" formControlName=\"name\"></span>\n          <span class=\"left-new-criteria\">\n            <button class=\"btn make_new_criteria\" type=\"button\" (click)=\"makeNewCriteria()\"><span>+</span>New</button>\n          </span>\n        </span>\n      </div>\n      <div class=\"col-lg-6\">\n        <span>\n          <label class=\"logics_label deleteLabel\">Or Using Existing</label>\n          <span class=\"logics_select_dropdown_div\">\n            <select class=\"form-control logics_select_dropdown logics_select_large\" #criteriaSelect (change)=\"changeCriteria(criteriaSelect.value)\">\n              <option value=\"-1\">Select Criteria</option>\n              <option [value]=\"criteria_idx\" *ngFor=\"let criteria of criteriaArr; index as criteria_idx\">{{criteria.name}}</option>\n            </select>\n          </span>\n        </span>\n      </div>\n      <div class=\"col-lg-2\">\n        <span class=\"right-new-criteria\">\n          <button class=\"btn make_new_criteria\" type=\"button\" (click)=\"makeNewCriteria()\"><span>+</span>New Criteria</button>\n        </span>\n      </div>\n    </div>\n    <div formArrayName=\"quesProp\">\n      <div *ngFor=\"let question of criteriaSelected.criteriaInFormGroup.get('quesProp').controls; index as idx\" [formGroupName]=\"idx\">\n        <div class=\"criteria_outer_div\">\n          <span [hidden]=\"saveOrUpdate\">\n            <span class=\"reset_criteria_block\" (click)=\"resetCriteriaBlock(idx)\">RESET</span>\n          </span>\n          <span class=\"criteria_block\" (click)=\"removeQuesFromCriteria(criteriaSelected.criteriaInFormGroup,idx)\"></span>\n          <div class=\"criteria_left_side\">\n            <div class=\"criteria_type\" (click)=\"changeCriteriaType('normal',question)\" [ngClass]=\"(question.get('typeOf').value == 'normal' ? 'active' : '')\">Normal Logic</div>\n            <div class=\"criteria_type\" (click)=\"changeCriteriaType('count',question)\" [ngClass]=\"(question.get('typeOf').value == 'count' ? 'active' : '')\">Count Logic</div>\n            <div class=\"criteria_type\" (click)=\"changeCriteriaType('embed',question)\" [ngClass]=\"(question.get('typeOf').value == 'embed' ? 'active' : '')\">Embedded Logic</div>\n          </div>\n          <div class=\"criteria_right_side\">\n            <div [hidden]=\"(question.get('typeOf').value == 'embed')\">\n              <span class=\"logics_select_dropdown_div\">\n                <select class=\"form-control logics_select_dropdown logics_select_full_width criteria_top_margin\" #questionSelectInCriteria formControlName=\"quesId\" (change)=\"setSelectedQuestion(questionSelectInCriteria.value, idx,'resetPrevious')\">\n                  <option value=\"0\">Select Question</option>\n                  <option *ngFor=\"let ques of allQuestionsForCriteria\" [value]=\"ques._id\" innerHTML=\"{{ques.title | swapMongoIdAndQuesNum : true : ques._id}}\"></option>\n                </select>\n              </span>\n              <div [hidden]=\"!(question.get('typeOf').value == 'normal')\">\n                <div [hidden]=\"(questionSelectInCriteria.value == 0)\">\n                  <label class=\"logics_label criteria_sel_options\">Selected values have an internal OR for this type.</label>\n                </div>\n                <div *ngIf=\"!criteriaData[idx].containsBothRowCol\">\n                  <div class=\"criteria_options\" *ngIf=\"(criteriaData[idx].selectedQuestion.fieldOptions)\">\n                    <checkbox-group formControlName=\"opArr\">\n                      <checkbox *ngFor=\"let opt of criteriaData[idx].rows\" [value]=\"opt._id\"><span innerHTML=\"{{opt.text}}\"></span></checkbox>\n                    </checkbox-group>\n                  </div>\n                </div>\n                <div *ngIf=\"criteriaData[idx].containsBothRowCol\">\n                  <div class=\"criteria_options\" *ngIf=\"(criteriaData[idx].selectedQuestion.fieldOptions && criteriaData[idx].selectedQuestion.fieldType.subtype != 'rating')\">\n                    <div>Rows :</div>\n                    <checkbox-group formControlName=\"rowId\">\n                      <checkbox *ngFor=\"let opt_row of criteriaData[idx].rows\" [value]=\"opt_row._id\"><span innerHTML=\"{{opt_row.text}}\"></span></checkbox>\n                    </checkbox-group>\n                  </div>\n                  <div class=\"criteria_options\" *ngIf=\"(criteriaData[idx].selectedQuestion.fieldOptions)\">\n                    <div [hidden]=\"(criteriaData[idx].selectedQuestion.fieldType.subtype == 'rating')\">Columns :</div>\n                    <checkbox-group formControlName=\"opArr\">\n                      <checkbox *ngFor=\"let opt_col of criteriaData[idx].cols\" [value]=\"opt_col._id\"><span innerHTML=\"{{opt_col.text}}\"></span></checkbox>\n                    </checkbox-group>\n                  </div>\n                </div>\n                <!-- <span>{{criteriaSelected.criteriaInFormGroup.value | json}}</span> -->\n              </div>\n              <div [hidden]=\"!(question.get('typeOf').value == 'count')\">\n                <div>\n                  <label class=\"logics_label criteria_sel_options\">Select count of options and thier corresponding operator.</label>\n                </div>\n                <div class=\"row\">\n                  <span class=\"logics_select_dropdown_div col-lg-3\">\n                    <select class=\"logics_select_dropdown logics_select_small form-control\" formControlName=\"countOp\">\n                      <option value=\"eq\">=</option>\n                      <option value=\"ne\">!=</option>\n                      <option value=\"lt\"><</option>\n                      <option value=\"gt\">></option>\n                      <option value=\"lte\"><=</option>\n                      <option value=\"gte\">>=</option>\n                    </select>\n                  </span>\n                  <span class=\"logics_select_dropdown_div col-lg-3\">\n                    <select class=\"logics_select_dropdown logics_select_small form-control\" formControlName=\"count\">\n                      <option *ngFor=\"let count of criteriaData[idx].countArray\" [value]=\"count\" innerHTML=\"{{count}}\"></option>\n                    </select>\n                  </span>\n                </div>\n              </div>\n              <div class=\"criteria_sel_unsel row\">\n                <label class=\"logics_label col-lg-4\">Options is/are</label>\n                <span class=\"logics_select_dropdown_div col-lg-8 \">\n                  <select class=\"form-control logics_select_dropdown logics_select_small\" formControlName=\"select\">\n                    <option value=\"1\">Selected</option>\n                    <option value=\"0\">Not Selected</option>\n                  </select>\n                </span>\n              </div>\n            </div>\n            <div [hidden]=\"!(question.get('typeOf').value == 'embed')\">\n              <div>\n                <label class=\"logics_label\">Condition will be met if entered field will have corresponding value, with internal OR on each field-value pair. Field = Value.</label>\n              </div>\n              <div formArrayName=\"eData\">\n                <div *ngFor=\"let embedData of question.get('eData').controls; index as embed_idx\" [formGroupName]=\"embed_idx\">\n                  <div class=\"embmed_data_div\">\n                    <div class=\"row\">\n                      <div class=\"embed_criteria_hr\"></div>\n                      <span class=\"logics_select_dropdown_div select_embedded_data col-lg-6\">\n                        <select class=\"logics_select_dropdown form-control logics_select_85perc_width criteria_top_margin\" #embedLogicType (change)=\"setFieldInEmbedData(embedData,embedLogicType,embedContactType,fieldInEmbedData)\" [ngModel]=\"embedData.get('field').value | embedDataType\" [ngModelOptions]=\"{standalone: true}\">\n                          <option value=\"e\">Embedded Data</option>\n                          <option value=\"c\">Contacts</option>\n                          <option value=\"m\">Default</option>\n                        </select>\n                      </span>\n                      <span>\n                        <span class=\"remove_embed_criteria\" title=\"Remove\" (click)=\"removeEmbedDataInCriteria(question, embed_idx)\"></span>\n                        <span class=\"add_new_embed_criteria\" title=\"Add New\" (click)=\"addNewEmbedDataInCriteria(question, (+embed_idx  + 1))\"></span>\n                      </span>\n                    </div>\n                    <div class=\"embed_logics_div row\">\n                      <span class=\"logics_select_dropdown_div col-lg-2\" [hidden]=\"(embedLogicType.value != 'c')\">\n                        <select class=\"logics_select_dropdown logics_select_small form-control\" #embedContactType (change)=\"setFieldInEmbedData(embedData,embedLogicType,embedContactType,fieldInEmbedData)\" [ngModel]=\"embedData.get('field').value | embedDataField\" [ngModelOptions]=\"{standalone: true}\">\n                          <option value=\"fName\">First Name</option>\n                          <option value=\"lName\">Last Name</option>\n                          <option value=\"email\">Email</option>\n                          <option value=\"mobile\">Mobile</option>\n                          <option value=\"extUniqueId\">Unique ID</option>\n                        </select>\n                      </span>\n                      <div class=\"divPush\">\n                      <span [hidden]=\"(embedLogicType.value == 'c')\" class=\"col-lg-3\">\n                        <input type=\"text\" class=\"logics_textbox form-control\" placeholder=\"Field\" #fieldInEmbedData (change)=\"setFieldInEmbedData(embedData,embedLogicType,embedContactType,fieldInEmbedData)\" [ngModel]=\"embedData.get('field').value | embedDataField\" [ngModelOptions]=\"{standalone: true}\">\n                      </span>\n                      <span class=\"logics_select_dropdown_div col-lg-6\">\n                        <select class=\"logics_select_dropdown logics_select_small form-control\" formControlName=\"operator\">\n                          <option value=\"eq\">Equals</option>\n                          <option value=\"ne\">Not Equals</option>\n                          <option value=\"gt\">Greater Than</option>\n                          <option value=\"lt\">Less Than</option>\n                          <option value=\"gte\">Greater Than or Equals</option>\n                          <option value=\"lte\">Less Than or Equals</option>\n                        </select>\n                      </span>\n                      <span class=\"col-lg-3\">\n                        <input type=\"text\" class=\"logics_textbox form-control\" placeholder=\"Value\" formControlName=\"value\">\n                      </span>\n                    </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"idx != (criteriaSelected.criteriaInFormGroup.get('quesProp').length - 1)\">\n          <div class=\"criteria_and_or_hr\"></div>\n          <div class=\"criteria_and_or_div row\">\n            <span class=\"logics_select_dropdown_div col-lg-2\">\n              <select class=\"logics_select_dropdown logics_select_small form-control\" formControlName=\"operator\">\n                <option value=\"1\">And</option>\n                <option value=\"2\">Or</option>\n              </select>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div>\n      <div class=\"criteria_add_questions_hr\"></div>\n      <button class=\"btn criteria_add_questions\" type=\"button\" (click)=\"addQuesInCriteria()\"><span>+</span>Questions</button>\n    </div>\n    <div class=\"buttonClass\">\n      <span [hidden]=\"saveOrUpdate\"><button class=\"btn del_criteria\" type=\"button\" (click)=\"delCriteria()\">Delete</button></span>\n      <span><button class=\"btn save_criteria\" type=\"button\" (click)=\"saveOrUpdateCriteria()\">{{(saveOrUpdate)?'Save':'Update'}}</button></span>\n      <span><button class=\"btn cancel save_criteria cancel_save_criteria\" type=\"button\" (click)=\"cancel()\">Cancel</button></span>\n    </div>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/criteria/criteria.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CriteriaComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ngx_toastr__ = __webpack_require__("./node_modules/ngx-toastr/toastr.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__criteria_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/criteria/criteria.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var CriteriaComponent = (function () {
    function CriteriaComponent(criteriaService, toastr, _fb, editService, services) {
        this.criteriaService = criteriaService;
        this.toastr = toastr;
        this._fb = _fb;
        this.editService = editService;
        this.services = services;
        this.onChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.canceled = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.criteriaSelected = {
            idx: '',
            criteriaInFormGroup: '',
        };
        this.criteriaData = [];
    }
    CriteriaComponent.prototype.ngOnInit = function () {
        this.surId = this.services.form.getFormData().getId();
        this.criteriaArr = this.services.form.getFormData().getAllCriterias();
        this.pageFields = this.services.form.getFormData().pageFields;
        this.allQuestionsForCriteria = this.services.form.getAllQuestions().filter(function (item) {
            return (item.qType && (item.qType.type == 'single-choice' || item.qType.type == 'mul-choice' ||
                item.qType.type == 'dropdown' || item.qType.type == 'nps' || item.qType.type == 'matrix-rating' ||
                item.qType.type == 'graph-rating'));
        });
        this.criteriaSelected.criteriaInFormGroup = this.criteriaService.buildCriteriaForm(this.criteriaService.criteriaJSON);
        this.criteriaSelected.idx = -1;
        this.criteriaData.push({ 'selectedQuestion': '', 'rows': '', 'cols': '', 'countArray': [0], 'containsBothRowCol': false });
        this.saveOrUpdate = true;
        this.allQuestionsOfSurvey = this.services.form.allQuestionsOfSurvey;
        this.questionCountAndId = this.services.form.getQuestionCountAndId();
        this.formObj = this.services.form.formObj;
    };
    CriteriaComponent.prototype.changeCriteria = function (idx) {
        var _this = this;
        if (idx == -1) {
            this.makeNewCriteria();
            return false;
        }
        this.criteriaSelected.criteriaInFormGroup = this.criteriaService.buildCriteriaForm(this.criteriaArr[idx]);
        this.criteriaSelected.idx = idx;
        this.criteriaData = [];
        this.criteriaArr[idx].quesProp.forEach(function (item, i) {
            _this.criteriaData.splice(i, 0, { 'selectedQuestion': '', 'rows': '', 'cols': '', 'countArray': [0], 'containsBothRowCol': false });
            _this.setSelectedQuestion(item.quesId, i, null);
        });
        this.copyOfCriteriaData = JSON.parse(JSON.stringify(this.criteriaData));
        this.copyOfCriteriaSelected = JSON.parse(JSON.stringify(this.criteriaArr[idx]));
        this.saveOrUpdate = false;
        if (this.criteriaArr[idx].isCorrupt) {
            this.services.alert({
                title: '<p class="sweetalert_title">This criteria is corrupted.</p>',
                text: "Some questions involved in this criteria have been deleted.",
                type: 'warning',
                showCancelButton: true,
                buttonsStyling: false,
                confirmButtonClass: 'sweetalert_apply_btn',
                cancelButtonClass: 'sweetalert_cancel_btn',
                confirmButtonText: 'Yes, delete it!'
            }).then(function (result) {
                if (result.value) {
                    _this.confirmDelCriteria();
                }
            });
        }
    };
    CriteriaComponent.prototype.addQuesInCriteria = function () {
        var question_idx = this.criteriaSelected.criteriaInFormGroup.get('quesProp').length;
        this.criteriaSelected.criteriaInFormGroup.get('quesProp').insert(question_idx, this.criteriaService.addQues());
        this.criteriaSelected.criteriaInFormGroup.get('quesProp').at(question_idx).get('eData').push(this.criteriaService.addEData());
        this.criteriaData.splice(question_idx, 0, { 'selectedQuestion': '', 'rows': '', 'cols': '', 'countArray': [0], 'containsBothRowCol': false });
        console.log(this.criteriaData);
    };
    CriteriaComponent.prototype.changeCriteriaType = function (str, criteria) {
        criteria.get('typeOf').setValue(str);
        if (str == 'normal') {
            criteria.get('count').setValue('0');
            criteria.get('countOp').setValue('eq');
            criteria.controls['eData'] = this._fb.array([
                this.criteriaService.addEData()
            ]);
        }
        else if (str == 'count') {
            criteria.get('opArr').setValue('');
            criteria.get('rowId').setValue('');
            criteria.controls['eData'] = this._fb.array([
                this.criteriaService.addEData()
            ]);
        }
        else if (str == 'embed') {
            criteria.get('count').setValue('0');
            criteria.get('countOp').setValue('eq');
            criteria.get('opArr').setValue('');
            criteria.get('rowId').setValue('');
            if (criteria.get('eData').length == 0) {
                criteria.get('eData').push(this.criteriaService.addEData());
            }
        }
    };
    CriteriaComponent.prototype.addNewEmbedDataInCriteria = function (quesProp, idx) {
        quesProp.get('eData').insert(idx, this.criteriaService.addEData());
    };
    CriteriaComponent.prototype.removeEmbedDataInCriteria = function (quesProp, idx) {
        if (quesProp.get('eData').length < 2) {
            this.toastr.error('There should be atleast one embedded data.', 'Cannot be deleted');
            return false;
        }
        quesProp.get('eData').removeAt(idx);
    };
    CriteriaComponent.prototype.removeQuesFromCriteria = function (criteria, idx) {
        if (criteria.get('quesProp').length < 2) {
            this.toastr.error('There should be atleast one condition.', 'Cannot be deleted');
            return false;
        }
        criteria.get('quesProp').removeAt(idx);
        this.criteriaData.splice(idx, 1);
    };
    CriteriaComponent.prototype.resetCriteriaBlock = function (idx) {
        var criteraBlock = this.services.utils.cloneObject(this.copyOfCriteriaSelected.quesProp[idx]);
        this.criteriaSelected.criteriaInFormGroup.get('quesProp').at(idx).patchValue(criteraBlock);
        this.criteriaData[idx] = this.services.utils.cloneObject(this.copyOfCriteriaData[idx]);
    };
    CriteriaComponent.prototype.saveOrUpdateCriteria = function () {
        var _this = this;
        var flag = false;
        if (this.saveOrUpdate == true) {
            for (var _i = 0, _a = this.criteriaArr; _i < _a.length; _i++) {
                var criteria = _a[_i];
                if (criteria.name == this.criteriaSelected.criteriaInFormGroup.get('name').value) {
                    flag = true;
                    break;
                }
            }
            if (flag) {
                this.toastr.error('Criteria with same name exists.', 'Error in Saving Criteria.');
                return false;
            }
        }
        var criteriaJSON = this.criteriaSelected.criteriaInFormGroup.getRawValue();
        if (criteriaJSON.name.trim() == '') {
            this.toastr.error('Criteria name is not valid.', 'Error in Saving Criteria.');
            return false;
        }
        var idx = 0;
        for (var _b = 0, _c = criteriaJSON.quesProp; _b < _c.length; _b++) {
            var item = _c[_b];
            console.log(item);
            var ques = this.services.form.formObj.getQuestionById(item.quesId);
            if (item.rowId == '') {
                item.rowId = [];
            }
            if (item.opArr == '') {
                item.opArr = [];
            }
            if (item.typeOf == 'normal') {
                if (item.quesId == '' || item.quesId == 0) {
                    this.toastr.error('Please select question');
                    return false;
                }
                if (this.criteriaData[idx].containsBothRowCol && !(ques['fieldType']['family'] == 'matrix' && ques['fieldType']['subtype'] == 'rating')) {
                    if (item.opArr.length == 0 || item.rowId.length == 0) {
                        this.toastr.error('Please select atleast one row and one column');
                        return false;
                    }
                }
                else {
                    if (item.opArr.length == 0) {
                        this.toastr.error('Please select atleast one option');
                        return false;
                    }
                }
                delete item.count;
                delete item.countOp;
                item.eData = [];
            }
            else if (item.typeOf == 'embed') {
                console.log(item);
                for (var _d = 0, _e = item.eData; _d < _e.length; _d++) {
                    var eDItem = _e[_d];
                    if (eDItem.value.trim() == '' || eDItem.field.substr(6, (eDItem.field.length - 8)).trim() == '') {
                        this.toastr.warning('Make Sure all fields are filled.', 'Empty Fields');
                        return false;
                    }
                }
                delete item.count;
                delete item.countOp;
                delete item.quesId;
                delete item.opArr;
                delete item.rowId;
            }
            else if (item.typeOf == 'count') {
                if (item.quesId == '' || item.quesId == 0) {
                    this.toastr.error('Please select question');
                    return false;
                }
                item.eData = [];
            }
            idx++;
        }
        delete criteriaJSON.quesProp[criteriaJSON.quesProp.length - 1].operator;
        if (criteriaJSON.isCorrupt == '') {
            delete criteriaJSON.isCorrupt;
        }
        if (this.saveOrUpdate == true) {
            delete criteriaJSON._id;
            criteriaJSON.quesProp.forEach(function (ques) {
                delete ques._id;
                ques.eData.forEach(function (item) {
                    delete item._id;
                });
            });
        }
        else {
            if (criteriaJSON._id == '')
                delete criteriaJSON._id;
            criteriaJSON.quesProp.forEach(function (ques) {
                if (ques._id == '')
                    delete ques._id;
                ques.eData.forEach(function (item) {
                    if (item._id == '')
                        delete item._id;
                });
            });
        }
        if (this.saveOrUpdate == true) {
            this.services.resource.saveCriteria(this.surId, criteriaJSON).subscribe(function (data) {
                _this.services.form.formObj.setCriteriaArray(data.criteria);
                _this.criteriaArr = data.criteria;
                _this.makeNewCriteria();
                _this.toastr.success('Criteria ' + criteriaJSON.name + ' has been saved successfully.');
                _this.onChange.emit('saved');
            }, function (err) {
                _this.services.toastr.error('Error in saving criteria');
            });
        }
        else {
            //update criteria
            delete criteriaJSON.isCorrupt;
            this.criteriaArr.splice(this.criteriaSelected.idx, 1, criteriaJSON);
            var criteriaUpdatedArr = {
                criteria: this.criteriaArr,
                _id: this.surId
            };
            this.services.resource.updateCriteria(this.surId, criteriaUpdatedArr).subscribe(function (data) {
                _this.services.form.formObj.setCriteriaArray(data.criteria);
                _this.makeNewCriteria();
                _this.toastr.success('Criteria ' + criteriaJSON.name + ' has been updated successfully.');
                _this.onChange.emit('updated');
            }, function (err) {
                _this.services.toastr.error('Error in updating criteria');
            });
        }
    };
    CriteriaComponent.prototype.setFieldInEmbedData = function (embedData, embedLogicType, embedContactType, fieldInEmbedData) {
        var str = (embedLogicType.value == 'c') ? embedContactType.value : fieldInEmbedData.value;
        embedData.get('field').setValue('{{' + embedLogicType.value + '://' + str + '}}');
        console.log('{{' + embedLogicType.value + '://' + str + '}}');
    };
    CriteriaComponent.prototype.setSelectedQuestion = function (questionSelectInCriteria, idx, str) {
        var _this = this;
        if (str == 'resetPrevious') {
            this.criteriaSelected.criteriaInFormGroup.get('quesProp').at(idx).get('rowId').setValue('');
            this.criteriaSelected.criteriaInFormGroup.get('quesProp').at(idx).get('opArr').setValue('');
        }
        this.pageFields.forEach(function (page) {
            page.formFields.forEach(function (ques) {
                if (ques._id == questionSelectInCriteria) {
                    _this.criteriaData[idx].selectedQuestion = ques;
                    _this.criteriaData[idx].rows = [];
                    _this.criteriaData[idx].cols = [];
                    var carryopts = _this.formObj.getCarryOptionArrays(questionSelectInCriteria);
                    console.log(carryopts);
                    carryopts['topArray'].forEach(function (carryItem) {
                        if (carryItem.carrObj.scale == 0 || carryItem.carrObj.scale == 1) {
                            carryItem.options.forEach(function (fieldOption) {
                                _this.criteriaData[idx].rows.push(fieldOption);
                            });
                        }
                        else if (carryItem.carrObj.scale == 2) {
                            carryItem.options.forEach(function (fieldOption) {
                                _this.criteriaData[idx].cols.push(fieldOption);
                            });
                        }
                    });
                    ques.fieldOptions.row.forEach(function (fieldOption) {
                        _this.criteriaData[idx].rows.push(fieldOption);
                    });
                    ques.fieldOptions.col.forEach(function (fieldOption) {
                        _this.criteriaData[idx].cols.push(fieldOption);
                    });
                    carryopts['bottomArray'].forEach(function (carryItem) {
                        if (carryItem.carrObj.scale == 0 || carryItem.carrObj.scale == 1) {
                            carryItem.options.forEach(function (fieldOption) {
                                _this.criteriaData[idx].rows.push(fieldOption);
                            });
                        }
                        else if (carryItem.carrObj.scale == 2) {
                            carryItem.options.forEach(function (fieldOption) {
                                _this.criteriaData[idx].cols.push(fieldOption);
                            });
                        }
                    });
                    var count = _this.findCount(ques, _this.criteriaData[idx].rows, _this.criteriaData[idx].cols);
                    _this.criteriaData[idx].countArray = Array(count + 1).fill(0).map(function (x, i) { return i; });
                    _this.criteriaData[idx].containsBothRowCol = _this.checkForBothRowAndCol(ques.fieldType.family, ques.fieldType.subtype);
                    console.log(_this.criteriaData);
                    return false;
                }
            });
        });
    };
    CriteriaComponent.prototype.findCount = function (ques, rows, cols) {
        var family = ques.fieldType.family;
        var subtype = ques.fieldType.subtype;
        if (family == 'multiChoice') {
            if (subtype == 'radio' || subtype == 'dropdown') {
                return 1;
            }
            else {
                return rows.length;
            }
        }
        else if (family == 'matrix') {
            if (subtype == 'rating') {
                return 1;
            }
            else if (subtype == 'radio' || subtype == 'graphical') {
                return rows.length;
            }
            else {
                return (rows.length * cols.length);
            }
        }
        return 0;
    };
    CriteriaComponent.prototype.checkForBothRowAndCol = function (family, subtype) {
        if (family == 'multiChoice') {
            return false;
        }
        else {
            return true;
        }
    };
    CriteriaComponent.prototype.makeNewCriteria = function () {
        this.criteriaSelected.criteriaInFormGroup = this.criteriaService.buildCriteriaForm(this.criteriaService.criteriaJSON);
        this.criteriaSelected.idx = -1;
        this.criteriaData = [];
        this.criteriaData.push({ 'selectedQuestion': '', 'rows': '', 'cols': '', 'countArray': [0], 'containsBothRowCol': false });
        this.criteriaSelect.nativeElement.value = -1;
        this.saveOrUpdate = true;
        console.log(this.criteriaService.criteriaJSON);
        console.log(this.criteriaSelected.criteriaInFormGroup);
    };
    CriteriaComponent.prototype.delCriteria = function () {
        var _this = this;
        this.services.alert({
            title: '<p class="sweetalert_title">Delete Criteria?</p>',
            text: "If this criteria is used in any logic on any question, that particular logic would be corrupted for that question.",
            type: 'warning',
            showCancelButton: true,
            buttonsStyling: false,
            confirmButtonClass: 'sweetalert_apply_btn',
            cancelButtonClass: 'sweetalert_cancel_btn',
            confirmButtonText: 'Yes, delete it!'
        }).then(function (result) {
            if (result.value) {
                _this.confirmDelCriteria();
            }
        });
    };
    CriteriaComponent.prototype.confirmDelCriteria = function () {
        var _this = this;
        this.criteriaArr.splice(this.criteriaSelected.idx, 1);
        var criteriaUpdatedArr = {
            criteria: this.criteriaArr,
            updatedLogics: {},
            _id: this.surId
        };
        var detailsOfQuesAndLogicToBeRemoved = {};
        var str = '';
        var _loop_1 = function (qid) {
            var ques = this_1.allQuestionsOfSurvey[qid];
            var tempArrlogic = [];
            var tempArrQuesAndLogic = [];
            ques.logicArr.forEach(function (logic) {
                if (logic.ansId == _this.criteriaSelected.criteriaInFormGroup.get('_id').value) {
                    tempArrlogic.push(logic._id);
                    str = _this.editService.getLogicType(logic.logic);
                    if (tempArrQuesAndLogic.indexOf(str) == -1) {
                        tempArrQuesAndLogic.push(str);
                    }
                }
            });
            if (tempArrlogic.length > 0) {
                criteriaUpdatedArr.updatedLogics[qid] = tempArrlogic;
            }
            if (tempArrQuesAndLogic.length > 0) {
                detailsOfQuesAndLogicToBeRemoved[qid] = tempArrQuesAndLogic;
            }
        };
        var this_1 = this;
        /* object criteriaUpdatedArr.updatedLogics generated is ---->  {  QuesId(objecId) : [ "array of ids of logic to be made corrupt" ]  }  */
        /* object detailsOfQuesAndLogicToBeRemoved generated is ---->  {  QuesId(objecId) : [ "array of name of logics that are corrupted" ]  }  */
        for (var qid in this.allQuestionsOfSurvey) {
            _loop_1(qid);
        }
        if (Object.keys(detailsOfQuesAndLogicToBeRemoved).length) {
            var html = '<p class="logics_affected_title">The logics mentioned will be corrupted for the corresponding questions.</p>';
            html += '<table class="logics_affected_table">';
            html += '<tr><th class="td1">Ques No.</th><th class="td2">Title</th><th class="td3">Logics</th></tr>';
            for (var qid in detailsOfQuesAndLogicToBeRemoved) {
                html += '<tr><td class="td1">' + this.questionCountAndId.data[qid] + '</td><td class="td2">' + this.services.utils.getTextOutOfHtml(this.allQuestionsOfSurvey[qid].title) + '</td><td class="td3">' + detailsOfQuesAndLogicToBeRemoved[qid].join(', ') + '</td></tr>';
            }
            html += '</table>';
            this.services.alert({
                title: 'Questions Affected',
                customClass: 'swal_wide',
                html: html
            });
        }
        this.services.resource.updateCriteria(this.surId, criteriaUpdatedArr).subscribe(function (data) {
            _this.updateAllQuesIfLogicsIsCorrupt(criteriaUpdatedArr.updatedLogics);
            _this.toastr.success('Criteria ' + _this.criteriaSelected.criteriaInFormGroup.get('name').value + ' has been deleted successfully.');
            _this.makeNewCriteria();
        }, function (err) {
            _this.services.toastr.error('Error in getting existing criterias.');
        });
    };
    CriteriaComponent.prototype.updateAllQuesIfLogicsIsCorrupt = function (updatedLogics) {
        var _this = this;
        var idx;
        var _loop_2 = function (qid) {
            var tempArr = updatedLogics[qid];
            tempArr.forEach(function (logic) {
                idx = _this.services.utils.findIndex(_this.allQuestionsOfSurvey[qid].logicArr, '_id', logic);
                _this.allQuestionsOfSurvey[qid].logicArr[idx].isCorrupt = 1;
            });
        };
        for (var qid in updatedLogics) {
            _loop_2(qid);
        }
        console.log(this.allQuestionsOfSurvey);
    };
    CriteriaComponent.prototype.cancel = function () {
        this.canceled.emit('canceled');
    };
    return CriteriaComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('criteriaSelect'),
    __metadata("design:type", Object)
], CriteriaComponent.prototype, "criteriaSelect", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], CriteriaComponent.prototype, "qId", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], CriteriaComponent.prototype, "onChange", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _b || Object)
], CriteriaComponent.prototype, "canceled", void 0);
CriteriaComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-criteria',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.advance/criteria/criteria.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.advance/criteria/criteria.component.css")],
        providers: [__WEBPACK_IMPORTED_MODULE_5__criteria_service__["a" /* CriteriaService */]]
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_5__criteria_service__["a" /* CriteriaService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__criteria_service__["a" /* CriteriaService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2_ngx_toastr__["b" /* ToastrService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2_ngx_toastr__["b" /* ToastrService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormBuilder"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormBuilder"]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_4__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__edit_data_service__["a" /* EditDataService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_services_module__["a" /* SharedServices */]) === "function" && _g || Object])
], CriteriaComponent);

var _a, _b, _c, _d, _e, _f, _g;
//# sourceMappingURL=criteria.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/criteria/criteria.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CriteriaService; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var CriteriaService = (function () {
    function CriteriaService(_fb) {
        this._fb = _fb;
        this.criteriaJSON = {
            name: '',
            quesProp: [
                {
                    quesId: '0',
                    select: 1,
                    typeOf: 'normal',
                    count: '0',
                    countOp: 'eq',
                    operator: '1',
                    opArr: [],
                    rowID: [],
                    eData: [
                        {
                            field: '{{e://}}',
                            operator: 'eq',
                            value: ''
                        }
                    ]
                }
            ],
            isCorrupt: ''
        };
    }
    CriteriaService.prototype.buildCriteriaForm = function (criteriaJSON) {
        var _this = this;
        var criteria = this._fb.group({
            name: '',
            quesProp: this._fb.array([]),
            isCorrupt: '',
            _id: ''
        });
        criteriaJSON.quesProp.forEach(function (question, question_idx) {
            criteria.get('quesProp').push(_this.addQues());
            question.eData.forEach(function (data, data_idx) {
                criteria.get('quesProp').at(question_idx).get('eData').push(_this.addEData());
            });
        });
        criteria.patchValue(criteriaJSON);
        return criteria;
    };
    CriteriaService.prototype.addQues = function () {
        return this._fb.group({
            opArr: '',
            rowId: '',
            eData: this._fb.array([]),
            quesId: '0',
            select: '1',
            typeOf: 'normal',
            count: '0',
            countOp: 'eq',
            operator: '1',
            _id: ''
        });
    };
    CriteriaService.prototype.addEData = function () {
        return this._fb.group({
            field: '{{e://}}',
            operator: 'eq',
            value: '',
            _id: ''
        });
    };
    return CriteriaService;
}());
CriteriaService = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormBuilder"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormBuilder"]) === "function" && _a || Object])
], CriteriaService);

var _a;
//# sourceMappingURL=criteria.service.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/language.list/language.list.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\" *ngIf=\"langScriptsData\">\n  <div class=\"col-md-12 shiftDown\" *ngIf=\"!addLanguageList\">\n    <span (click)=\"backToAdvance()\"><img src=\"/assets/images/editSurvey/arrow.png\" width=\"15px\" class=\"shiftRight\"></span>\n    <span class=\"language-title\"> Language </span>\n    <ul class=\"language-list\">\n      <li class=\"language-list-item col-md-12 language-left-border\">\n         <div class=\"list-items-div-1\">\n           {{ langScriptsData.default.name }}\n           <span style=\"font-style:italic;color:#9b9b9b\"><br>Default</span>\n         </div>\n      </li>\n      <li *ngFor=\"let lang of langScriptsData.languages\" class=\"language-list-item col-md-12\">\n         <div class=\"list-items-div-1\">\n           {{ lang.name }}\n         </div>\n         <div class=\"list-items-div-2\">\n           <button class=\"btn btn-default btn-sm pull-right delete-language-button\" type=\"button\" (click)=\"deleteLanguage(lang)\">Delete</button>\n           <button class=\"btn btn-default btn-sm pull-right edit-language-button\" type=\"button\" (click)=\"editLanguage(lang)\">Edit</button>\n         </div>\n      </li>\n    </ul>\n    <div class=\"new-language-div\">\n      <button class=\"btn btn-default btn-sm pull-right new-language-button\" type=\"button\" (click)=\"addNewLanguages()\">+ New Language</button>\n    </div>\n  </div>\n  <div *ngIf=\"addLanguageList\" class=\"col-md-12 div-all-language-list\" style=\"overflow-y: scroll;overflow-x: hidden;height: 400px;\">\n    <ng-container *ngFor=\"let langItem of languagesData?.allLang; index as lIndex\">\n      <span class=\"custom_checkbox_grp\"  style=\"display:block;padding:10px;\" *ngIf=\"langItem.langKey != languagesData.defLang.langKey\">\n        <label [ngClass]=\"(alreadyAddedLanguages?.hasOwnProperty(langItem.langKey) ? 'lang-item-checbox-disabled' : '')\">\n          <input type=\"checkbox\" value=\"langItem._id\" [checked]=\"(alreadyAddedLanguages.hasOwnProperty(langItem.langKey) ? 'checked' :'')\" (change)=\"addLanguageToSelected(langItem,$event)\">\n          <span class=\"custom_checkbox_txt\"> {{ langItem.name }}</span>\n        </label>\n      </span>\n    </ng-container>\n    <!-- <span *ngIf=\"langItem.langKey != languagesData.defLang.langKey\"> -->\n    <!-- </span> -->\n  </div>\n  <div *ngIf=\"addLanguageList\" class=\"col-md-12 div-all-language-list\">\n    <button class=\"btn btn-default btn-sm s2c_save_btn\" [disabled]=\"(alreadyAddedLanguages?.length == languagesData?.allLang.length)\" type=\"button\" (click)=\"saveNewLanguages()\" style=\"padding: 6px 12px;\">Save</button>\n    <button class=\"btn btn-default btn-sm s2c_cancel_btn\" type=\"button\" (click)=\"cancelAddingLanguage()\" style=\"padding: 6px 12px;\">Cancel</button>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/language.list/language.list.component.scss":
/***/ (function(module, exports) {

module.exports = ".language-list-item {\n  width: 100%;\n  padding: 15px 5px 15px 5px;\n  border-radius: 2px;\n  border: 1px solid #CDCDCD;\n  margin-bottom: 10px; }\n\n.language-left-border {\n  border-left: solid 5px #73BE6B !important; }\n\n.edit-language-button {\n  color: #45A83A;\n  border: 1px solid #D7D7D7;\n  border-radius: 2px;\n  background-color: #FFFFFF;\n  height: 25px;\n  vertical-align: middle;\n  width: 58px;\n  margin-right: 5px; }\n\n.new-language-button {\n  color: #45A83A;\n  border: 1px dashed #CDCBCB;\n  border-radius: 2px;\n  background-color: #FFFFFF;\n  height: 25px;\n  vertical-align: middle;\n  width: 100%;\n  height: 40px; }\n\n.delete-language-button {\n  color: #EC2424;\n  border: 1px solid #D7D7D7;\n  border-radius: 2px;\n  background-color: #FFFFFF;\n  height: 25px;\n  vertical-align: middle;\n  width: 58px;\n  margin-right: 5px; }\n\n.new-language-div {\n  width: 100%;\n  padding: 0px 15px 0px 15px; }\n\n.shiftRight {\n  margin-left: 15px; }\n\n.language-list {\n  list-style: none;\n  width: 100%;\n  padding: 0px 15px 0px 16px;\n  margin-top: 10px; }\n\n.shiftDown {\n  margin-top: 15px; }\n\n.language-title {\n  height: 0.98%;\n  width: 5.14%;\n  color: #3A3A3A;\n  font-family: \"Helvetica Neue Medium\";\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 19px;\n  margin-left: 10px; }\n\n.list-items-div-1 {\n  display: inline-block; }\n\n.list-items-div-2 {\n  float: right;\n  vertical-align: middle;\n  display: inline-block; }\n\n.div-all-language-list {\n  padding: 40px; }\n\n.lang-item-checbox-disabled {\n  pointer-events: none;\n  opacity: 0.5; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/language.list/language.list.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LanguageListComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var LanguageListComponent = (function () {
    function LanguageListComponent(services) {
        this.services = services;
        this.onEditLang = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.onBackLang = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.addLanguageList = false;
        this.alreadyAddedLanguages = {};
        this.currentlySeletedLangs = [];
        this.multiLingualCheck = true;
    }
    ;
    LanguageListComponent.prototype.ngOnInit = function () {
        var _this = this;
        var surId = this.services.form.formObj.getId();
        this.services.resource.getSurveyLanguages(surId).subscribe(function (data) {
            _this.langScriptsData = _this.services.utils.cloneObject(data);
        });
    };
    LanguageListComponent.prototype.addNewLanguages = function () {
        var _this = this;
        this.addLanguageList = true;
        var surId = this.services.form.formObj.getId();
        this.services.resource.getLanguageScripts(surId).subscribe(function (data) {
            _this.languagesData = _this.services.utils.cloneObject(data);
            _this.languagesData.surveyLang.forEach(function (l) {
                _this.alreadyAddedLanguages[l.langKey] = l;
                _this.currentlySeletedLangs.push(l);
            });
            //   console.log("\n\n\nabc\n",this.alreadyAddedLanguages);
            //   console.log("\n\n\nabc\n",this.languagesData);
        });
    };
    LanguageListComponent.prototype.saveNewLanguages = function () {
        var _this = this;
        var surId = this.services.form.formObj.getId();
        if (!this.currentlySeletedLangs || !this.currentlySeletedLangs.length) {
            this.services.toastr.error("Please select atleast one language");
            return;
        }
        this.services.resource.addLanguageToSurvey(surId, this.currentlySeletedLangs).subscribe(function (data) {
            _this.addLanguageList = false;
            _this.langScriptsData.languages = _this.currentlySeletedLangs;
            //   console.log('\n\n\nlang\n\n\n',this.langScriptsData);
        });
    };
    LanguageListComponent.prototype.cancelAddingLanguage = function () {
        this.addLanguageList = false;
    };
    LanguageListComponent.prototype.addLanguageToSelected = function (lang, event) {
        var langObj = {
            langKey: lang.langKey,
            direction: lang.direction,
            name: lang.name
        };
        if (!this.currentlySeletedLangs)
            this.currentlySeletedLangs = [];
        if (event.target.checked) {
            var langFlag = false;
            for (var i = 0; i < this.currentlySeletedLangs.length; i++) {
                if (this.currentlySeletedLangs[i].langKey == langObj.langKey) {
                    langFlag = true;
                }
            }
            if (!langFlag) {
                this.currentlySeletedLangs.push(langObj);
            }
        }
        else {
            for (var i = 0; i < this.currentlySeletedLangs.length; i++) {
                if (this.currentlySeletedLangs[i].langKey == langObj.langKey) {
                    this.currentlySeletedLangs.splice(i, 1);
                    break;
                }
            }
        }
    };
    LanguageListComponent.prototype.deleteLanguage = function (lang) {
        var _this = this;
        var surId = this.services.form.formObj.getId();
        this.services.resource.deleteLanguageFromSurvey(surId, lang.langKey).subscribe(function (data) {
            for (var i = 0; i < _this.langScriptsData.languages.length; i++) {
                if (_this.langScriptsData.languages[i].langKey == lang.langKey) {
                    // console.log(this.langScriptsData.languages[i],"testing");
                    _this.langScriptsData.languages.splice(i, 1);
                    delete _this.alreadyAddedLanguages[lang.langKey];
                    break;
                }
            }
            //  console.log('\n\n\nlang\n\n\n',this.langScriptsData);
        });
    };
    LanguageListComponent.prototype.editLanguage = function (lang) {
        //   console.log("list",lang);
        this.onEditLang.emit(lang);
    };
    LanguageListComponent.prototype.backToAdvance = function () {
        this.onBackLang.emit();
    };
    return LanguageListComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], LanguageListComponent.prototype, "onEditLang", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _b || Object)
], LanguageListComponent.prototype, "onBackLang", void 0);
LanguageListComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-language-list',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.advance/language.list/language.list.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.advance/language.list/language.list.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _c || Object])
], LanguageListComponent);

var _a, _b, _c;
//# sourceMappingURL=language.list.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/language.translate/language.translate.component.html":
/***/ (function(module, exports) {

module.exports = "<div *ngIf=\"languageResponse\">\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h4 class=\"pull-left\"> Translator </h4>\n      <h6 class=\"pull-right\"> <strong>Language: </strong>\n        <ng-container *ngFor=\"let lng of languageResponse.form.language\">\n          <span [hidden]=\"lng.langKey != langKey\">\n         {{ lng.name }}\n       </span>\n       </ng-container>\n       </h6>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-12 tinymce-small\">\n\n\n      <accordion [closeOthers]=\"true\" class=\"translate-head-elements\">\n        <accordion-group [panelClass]=\"'translate-headers survey'\">\n          <div accordion-heading class=\"clearfix\">\n            <span> Survey </span>\n            <span class=\"badge badge-secondary heading-arrows pull-right\">\n              <img src=\"/assets/images/editSurvey/down-arrow.svg\" class=\"img-down\">\n              <img src=\"/assets/images/editSurvey/up-blue-arrow.svg\" class=\"img-up\">\n            </span>\n          </div>\n          <div class=\"accordion_body survey-body\">\n            <table class=\"table table-condensed\">\n              <thead>\n                <tr>\n                  <th class=\"title-texts\">ORIGINAL TEXT</th>\n                  <th class=\"title-texts\">TRANSLATED TEXT</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td style=\"width:50%\">\n                    <span class=\"inner-subheaders\">Title</span><br> <span style=\"width:100%;\" class=\"original-text\" [innerHTML]=\"languageResponse.form.title\"></span>\n                  </td>\n                  <td>\n                    <br><textarea appTinymce [element]=\"{text:langData[languageResponse.form._id].title,className:'language-form-control',others:{ dir:langDirection, minHeight: '48px',extraLabels: ['bold','italic'] }}\" (onEvent)=\"onEvent($event,languageResponse.form._id,'title')\" [(ngModel)]=\"langData[languageResponse.form._id].title\" class=\"language-form-control\" dir=\"{{langDirection}}\"></textarea>\n                  </td>\n                </tr>\n                <tr>\n                  <td style=\"width:50%\">\n                    <span class=\"inner-subheaders\">Done</span><br><span style=\"width:100%;\" class=\"original-text\" [innerHTML]=\"languageResponse.form.done\"></span>\n                  </td>\n                  <td>\n                    <br><textarea class=\"language-form-control\" dir=\"{{langDirection}}\" [(ngModel)]=\"langData[languageResponse.form._id].done\"></textarea>\n                  </td>\n                </tr>\n                <tr>\n                  <td style=\"width:50%\">\n                    <span class=\"inner-subheaders\">Previous</span><br><span style=\"width:100%;\" class=\"original-text\" [innerHTML]=\"languageResponse.form.previous\"></span>\n                  </td>\n                  <td>\n                    <br><textarea class=\"language-form-control\" dir=\"{{langDirection}}\" [(ngModel)]=\"langData[languageResponse.form._id].previous\"></textarea>\n                  </td>\n                </tr>\n                <tr>\n                  <td style=\"width:50%\">\n                    <span class=\"inner-subheaders\">Next</span><br><span style=\"width:100%;\" class=\"original-text\" [innerHTML]=\"languageResponse.form.next\"></span>\n                  </td>\n                  <td>\n                    <br><textarea class=\"language-form-control\" dir=\"{{langDirection}}\" [(ngModel)]=\"langData[languageResponse.form._id].next\"></textarea>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </accordion-group>\n        <accordion-group [panelClass]=\"'translate-headers page'\">\n          <div accordion-heading class=\"clearfix\">\n            <span> Pages </span>\n            <span class=\"badge badge-secondary heading-arrows pull-right\">\n              <img src=\"/assets/images/editSurvey/down-arrow.svg\" class=\"img-down\">\n              <img src=\"/assets/images/editSurvey/up-blue-arrow.svg\" class=\"img-up\">\n            </span>\n          </div>\n          <div class=\"accordion_body pages-body\">\n            <accordion [closeOthers]=\"true\">\n              <accordion-group *ngFor=\"let page of languageResponse.form.pageFields; index as pIdx\" [panelClass]=\"'each-page-element'\">\n                <div accordion-heading class=\"clearfix\">\n                  <span class=\"plus-minus-sign\"></span>\n                  <span class=\"header-titles\"> Page {{ pIdx+1 }}</span>\n                </div>\n                <table class=\"table table-condensed pagesTables\" style=\"width:100%;\">\n                  <thead>\n                    <tr>\n                      <th class=\"title-texts\">ORIGINAL TEXT</th>\n                      <th class=\"title-texts\">TRANSLATED TEXT</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr class=\"pageTitleRow\">\n                      <td style=\"width:50%\">\n                        <span class=\"inner-subheaders\">Title</span> <span class=\"original-text\" style=\"width:100%;\" [innerHTML]=\"page.title\"></span>\n                      </td>\n                      <td>\n                        <br><textarea class=\"language-form-control\" style=\"width:100%;max-width:100%\" [(ngModel)]=\"langData[page._id].title\" dir=\"{{langDirection}}\"></textarea>\n                      </td>\n                    </tr>\n                    <tr class=\"pageDescRow\">\n                      <td style=\"width:50%\">\n                        <span class=\"inner-subheaders\">Description</span> <span class=\"original-text\" style=\"width:100%;\" [innerHTML]=\"page.desc\"></span>\n                      </td>\n                      <td>\n                        <br><textarea class=\"language-form-control\" style=\"width:100%;max-width:100%\" [(ngModel)]=\"langData[page._id].desc\" dir=\"{{langDirection}}\"></textarea>\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </accordion-group>\n            </accordion>\n          </div>\n        </accordion-group>\n        <accordion-group [panelClass]=\"'translate-headers question'\">\n          <div accordion-heading class=\"clearfix\">\n            <span> Questions </span>\n            <span class=\"badge badge-secondary heading-arrows pull-right\">\n              <img src=\"/assets/images/editSurvey/down-arrow.svg\" class=\"img-down\">\n              <img src=\"/assets/images/editSurvey/up-blue-arrow.svg\" class=\"img-up\">\n            </span>\n          </div>\n          <div class=\"accordion_body questions-body\">\n            <accordion [closeOthers]=\"true\">\n              <accordion-group *ngFor=\"let question of allQuestionOfSurvey; index as qIdx\" [panelClass]=\"'each-question-element'\">\n                <div accordion-heading class=\"clearfix\">\n                  <span class=\"plus-minus-sign\"></span>\n                  <span class=\"header-titles\" [innerHTML]=\"'<strong>Q '+ (qIdx+1) +'.</strong> '+ question.title | swapMongoIdAndQuesNum:true:question._id\"></span>\n                </div>\n                <table class=\"table table-condensed questionTables\">\n                  <thead>\n                    <tr>\n                      <th class=\"title-texts\">ORIGINAL TEXT</th>\n                      <th class=\"title-texts\">TRANSLATED TEXT</th>\n                    </tr>\n                    <tr class=\"addBulkTr\">\n                      <th></th>\n                      <th><button *ngIf=\"checkBulkAddShowHide(question,'row')\" type=\"button\" class=\"btn btn-primary btn-sm add-bulk-rows\" (click)=\"openBulkModal({'ques':question,'type':'r'})\"> Add Rows in Bulk </button>\n                        <button *ngIf=\"checkBulkAddShowHide(question, 'col')\" type=\"button\" class=\"btn btn-primary btn-sm add-bulk-cols\" (click)=\"openBulkModal({'ques':question,'type':'c'})\"> Add Cols in Bulk </button>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td style=\"width:50%\">\n                            <span class=\"inner-subheaders\">Title</span><br> <span class=\"original-text\" style=\"width:100%;\" [innerHTML]=\"question.title | swapMongoIdAndQuesNum:true:question._id\"></span>\n                          </td>\n                          <td>\n                            <button class=\"btn btn-primary pull-left add-piping-button\" type=\"button\" (click)=\"insertPiping('opt')\" *ngIf=\"checkPipingExistence(question.title)\">+Insert Piping</button>\n                            <br><textarea appTinymce [element]=\"{text:langData[question._id].title,className:'language-form-control',others:{ dir:langDirection, minHeight: '48px' , extraLabels : ['bold','italic','insertImageButton']}}\" class=\"language-form-control\" [(ngModel)]=\"langData[question._id].title\" (onEvent)=\"onEvent($event,question._id,'title')\" dir=\"{{langDirection}}\"></textarea>\n\n                            <div *ngIf=\"setPipingVariable(question.title)\">\n                              <h5 style=\"background-color:#d9edf7;color:#31708f;padding:10px\">These are these questions being piped in this question. You can add these to its translation by just clicking on each</h5>\n                              <ul class=\"copyPipingButton\" style=\"width:100%;padding:0\">\n                                <li class=\"pipingItemInTranslation\" *ngFor=\"let pipe of pipingVariable;\" (click)=\"addPipingToTitle(pipe,question._id,allQuestionNumbers.data[pipe])\">+Question {{allQuestionNumbers.data[pipe]}} </li></ul>\n                            </div>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td style=\"width:50%\">\n                            <span class=\"inner-subheaders\">Required Message</span><br> <span class=\"original-text\" style=\"width:100%;\" [innerHTML]=\"question.reqMsg\"></span>\n                          </td>\n                          <td>\n                            <br><textarea class=\"language-form-control\" dir=\"{{langDirection}}\" [(ngModel)]=\"langData[question._id].reqMsg\"></textarea>\n                          </td>\n                        </tr>\n                        <tr style=\"display:none;\">\n                          <td>\n                            <span class=\"inner-subheaders\">Description</span><br><span class=\"original-text\" style=\"width:100%;\"></span>\n                          </td>\n                          <td>\n                            <br><textarea class=\"language-form-control\" dir=\"{{langDirection}}\" [(ngModel)]=\"langData[question._id].desc\"></textarea>\n                          </td>\n                        </tr>\n                        <tr *ngFor=\"let opt of question.fieldOptions.row; index as rIndex;\">\n                          <td style=\"width:50%\">\n                            <span class=\"inner-subheaders\">Option {{ rIndex+1 }}</span> <br> <span class=\"original-text\" style=\"width:100%;\" [innerHTML]=\"opt.text\"></span>\n                          </td>\n                          <td>\n                            <button class=\"btn btn-primary pull-left add-piping-button\" type=\"button\" (click)=\"insertPiping('opt')\" *ngIf=\"checkPipingExistence(opt.text)\">+Insert Piping</button>\n                            <br>\n                            <!-- <div contenteditable=\"true\" class=\"language-form-control\" dir=\"{{langDirection}}\" [(ngModel)]=\"langData[opt._id].text\"></div> -->\n                            <button class=\"btn btn-default pull-left add-image-button\" type=\"button\" (click)=\"insertImage(opt._id,'text')\" *ngIf=\"checkQuesTypeForImage(question.fieldType,'row')\">\n                            </button>\n                            <div class=\"option-div-textarea\">\n                              <app-textarea-expanded [(ngModel)]=\"langData[opt._id].text\" dir=\"{{langDirection}}\"></app-textarea-expanded>\n                            </div>\n                          </td>\n                        </tr>\n                        <ng-container *ngFor=\"let opt of question.fieldOptions.col; index as cIndex;\">\n                          <tr>\n                            <td style=\"width:50%\">\n                              <span class=\"inner-subheaders\">Option Column {{ cIndex+1 }}</span> <br> <span class=\"original-text\" style=\"width:100%;\" [innerHTML]=\"opt.text\"></span>\n                            </td>\n                            <td>\n                              <button type=\"button\" class=\"btn btn-primary btn-sm add-bulk-items\" (click)=\"openBulkModal({'ques':question,'type':'i',colId:opt._id})\" *ngIf=\"opt.items && opt.items.length > 0\"> Add Items in Bulk </button>\n                              <button class=\"btn btn-primary pull-left add-piping-button\" type=\"button\" (click)=\"insertPiping('opt')\" *ngIf=\"checkPipingExistence(opt.text)\">+Insert Piping</button>\n                              <button class=\"btn btn-default pull-left add-image-button\" type=\"button\" (click)=\"insertImage(opt._id,'text')\" *ngIf=\"checkQuesTypeForImage(question.fieldType,'col')\"></button>\n                              <br>\n                              <div class=\"option-div-textarea\">\n                                <app-textarea-expanded [(ngModel)]=\"langData[opt._id].text\" dir=\"{{langDirection}}\"></app-textarea-expanded>\n                              </div>\n                            </td>\n                          </tr>\n                          <tr *ngFor=\"let item of opt.items; index as itemIndex\">\n                            <td style=\"width:50%\">\n                              <span class=\"inner-subheaders\">Column {{ cIndex+1 }} Item {{ itemIndex+1 }}</span> <br> <span class=\"original-text\" style=\"width:100%;\" [innerHTML]=\"item.text\"></span>\n                            </td>\n                            <td>\n                              <br><textarea class=\"language-form-control\" dir=\"{{langDirection}}\" [(ngModel)]=\"langData[item._id].text\"></textarea>\n                            </td>\n                          </tr>\n                        </ng-container>\n                      </tbody>\n                    </table>\n                  </accordion-group>\n                </accordion>\n              </div>\n            </accordion-group>\n          </accordion>\n\n          <div class=\"text-center\">\n            <button type=\"button\" (click)=\"saveLanguage()\" class=\"btn btn-default\">Submit</button><br>\n          </div>\n        </div>\n  </div>\n</div>\n<ng-template #addBulkModal>\n    <div class=\"modal-header\">\n      <h4 class=\"modal-title pull-left\" style=\"padding:0\">Add in bulk Enter choices on a seperate line</h4>\n      <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n    <div class=\"modal-body\">\n      <textarea class=\"form-control\" rows=\"10\" dir=\"{{langDirection}}\" [(ngModel)]=\"addBulkValueString\"></textarea>\n      <span style=\"color:red;\" [hidden]=\"!erorShowHide\">Enter fields are greater than actual no of fields</span>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary btn-sm\" (click)=\"addInBulk()\"> Save </button>\n      <button type=\"button\" class=\"btn btn-default btn-sm\" (click)=\"hideModal()\"> Cancel </button>\n    </div>\n</ng-template>\n<ng-template #uploadImageModal>\n  <div class=\"modal-header\">\n    <div class=\"modal-title pull-left\">\n      <h4>Upload Image</h4>\n    </div>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <div class=\"modal_inner_body\">\n      <div>\n        <app-image-upload (onDoneImageSelect)=\"onDoneImageSelect($event)\"></app-image-upload>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<ng-template #insertPipingModal>\n  <div class=\"modal-header\">\n    <div class=\"modal-title pull-left\">\n      <h4>Add Piping</h4>\n    </div>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <div class=\"modal_inner_body\">\n      <app-question-piping (onPipingDone)=\"onPipingDone()\"></app-question-piping>\n    </div>\n  </div>\n</ng-template>\n<ng-template #insertImageModal>\n  <div class=\"modal-header\">\n    <div class=\"modal-title pull-left\">\n      <h4>Add Image</h4>\n    </div>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <div class=\"modal_inner_body\">\n      <app-image-upload [imgUploadInp]=\"{'cropping': true}\" (onDoneImageSelect)=\"onDoneImageSelect($event)\"></app-image-upload>\n    </div>\n  </div>\n</ng-template>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/language.translate/language.translate.component.scss":
/***/ (function(module, exports) {

module.exports = "#btnLangTranslateSubmit {\n  background-color: #2277bf;\n  color: white;\n  border-color: #2277bf; }\n\n::ng-deep .language-form-control {\n  border-bottom: 1px solid #9E9E9E !important;\n  height: auto !important;\n  border-top: none !important;\n  border-left: none !important;\n  border-right: none !important;\n  outline: none !important;\n  resize: none !important;\n  -webkit-box-shadow: none !important;\n          box-shadow: none !important; }\n\n::ng-deep .tinymce-small .mce-tinymce {\n  border-bottom: 1px solid #9E9E9E !important; }\n\n.form-control {\n  height: auto !important;\n  /*overflow-y: scroll !important;*/\n  max-height: auto !important; }\n\n.hideElement {\n  display: none; }\n\n.heading-arrows {\n  background: none; }\n\n.pages-body .panel .plus-minus-sign:before, .questions-body .panel .plus-minus-sign:before {\n  content: \"+\";\n  background-color: white !important;\n  color: black !important;\n  border: 1px solid #D6D6D6 !important;\n  border-radius: 2px;\n  padding-top: 2px;\n  padding-bottom: 2px;\n  padding-left: 7px;\n  padding-right: 7px; }\n\n.pages-body .panel-open .plus-minus-sign:before, .questions-body .panel-open .plus-minus-sign:before {\n  content: \"-\";\n  background-color: #777777 !important;\n  color: white !important;\n  border: 1px solid #E7E7E7 !important;\n  border-radius: 2px;\n  padding-top: 2px;\n  padding-bottom: 2px;\n  padding-left: 9px;\n  padding-right: 9px; }\n\n.pages-body .panel .header-titles, .questions-body .panel .header-titles {\n  color: black;\n  font-size: 14px; }\n\n.pages-body .panel-open .header-titles, .questions-body .panel-open .header-titles {\n  color: #1572BA;\n  font-size: 14px; }\n\n.original-text {\n  color: #9E9E9E;\n  font-size: 14px;\n  display: inline-block;\n  height: auto;\n  border-bottom: 1px solid #D8D8D8; }\n\n* {\n  font-family: \"Helvetica\"; }\n\n.title-texts {\n  color: #494949;\n  font-size: 12px;\n  font-weight: 500; }\n\n.inner-subheaders {\n  color: #494949;\n  font-size: 14px;\n  font-style: italic; }\n\ntd {\n  border: none !important; }\n\n.translate-headers {\n  background-color: white;\n  font-size: 16px;\n  padding: 15px !important;\n  margin-top: 0px; }\n\n.panel-group .panel {\n  margin-top: 0px !important;\n  padding: 0px;\n  -webkit-box-shadow: none !important;\n  box-shadow: none !important; }\n\n.questions-body {\n  background-color: #f6f6f6; }\n\n.questions-body .panel {\n    margin-top: 10px !important; }\n\n.pages-body {\n  background-color: #f6f6f6; }\n\n.pages-body .panel {\n    margin-top: 10px !important; }\n\n.survey-body {\n  background-color: #f6f6f6; }\n\n.translate-head-elements .translate-headers {\n  background-color: #000000; }\n\n::ng-deep .translate-head-elements textarea {\n  width: 100%;\n  max-width: 100%; }\n\n::ng-deep .translate-head-elements .panel .page, ::ng-deep .translate-head-elements .panel .survey, ::ng-deep .translate-head-elements .panel .question {\n  background-color: white;\n  font-size: 16px;\n  padding: 15px !important;\n  margin-top: 0px; }\n\n::ng-deep .translate-head-elements .panel-open .page, ::ng-deep .translate-head-elements .panel-open .survey, ::ng-deep .translate-head-elements .panel-open .question {\n  background-color: #f6f6f6;\n  font-size: 16px;\n  padding: 15px !important;\n  margin-top: 0px;\n  border-left: solid 5px #1572BA;\n  border-radius: 0px; }\n\n::ng-deep .translate-head-elements .panel-open .page .panel-collapse > .panel-body, ::ng-deep .translate-head-elements .panel-open .survey .panel-collapse > .panel-body, ::ng-deep .translate-head-elements .panel-open .question .panel-collapse > .panel-body {\n    border-top: none; }\n\n::ng-deep .translate-head-elements .panel-open .page .header-titles, ::ng-deep .translate-head-elements .panel-open .survey .header-titles, ::ng-deep .translate-head-elements .panel-open .question .header-titles {\n    color: #1572BA; }\n\n::ng-deep .translate-head-elements .questions-body .panel-open .each-question-element, ::ng-deep .translate-head-elements .questions-body .panel-open textarea {\n  background-color: #FCFEFF; }\n\n::ng-deep .translate-head-elements .pages-body .panel-open .each-page-element, ::ng-deep .translate-head-elements .pages-body .panel-open textarea {\n  background-color: #FCFEFF; }\n\n::ng-deep .translate-head-elements .survey-body {\n  background-color: #FCFEFF; }\n\n::ng-deep .translate-head-elements .survey-body textarea {\n    background-color: #FCFEFF; }\n\n::ng-deep .translate-head-elements .panel .img-up {\n  display: none; }\n\n::ng-deep .translate-head-elements .panel .img-down {\n  display: block; }\n\n::ng-deep .translate-head-elements .panel-open .img-up {\n  display: block; }\n\n::ng-deep .translate-head-elements .panel-open .img-down {\n  display: none; }\n\n::ng-deep .translate-head-elements .add-bulk-rows, ::ng-deep .translate-head-elements .add-bulk-cols, ::ng-deep .translate-head-elements .add-bulk-items, ::ng-deep .translate-head-elements .add-piping-button {\n  font-size: 12px;\n  padding: 1px 5px;\n  border-radius: 3px; }\n\n::ng-deep .translate-head-elements .header-titles p {\n  display: inline; }\n\n::ng-deep .translate-head-elements .option-div-textarea {\n  min-height: 50px;\n  border-bottom: 1px solid #9E9E9E; }\n\n::ng-deep .translate-head-elements .pipingItemInTranslation {\n  border: 1px solid #00858b;\n  border-radius: 3px;\n  cursor: pointer;\n  display: inline-block;\n  float: left;\n  height: 37px;\n  margin: 0 0 5px 5px;\n  padding: 5px;\n  font-weight: 800;\n  -webkit-transition: background-color 2s linear 0s;\n  transition: background-color 2s linear 0s; }\n\n::ng-deep .translate-head-elements .add-image-button {\n  background: url(/assets/images/editSurvey/logo-placeholder.svg);\n  height: 21px;\n  background-repeat: no-repeat; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/language.translate/language.translate.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LanguageTranslateComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__ = __webpack_require__("./src/app/shared/questionTemplates/question-types.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ngx_bootstrap_modal__ = __webpack_require__("./node_modules/ngx-bootstrap/modal/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__survey_question_edit_question_piping_question_piping_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/question.piping/question.piping.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_pipes_common_pipes__ = __webpack_require__("./src/app/shared/pipes/common.pipes.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_components_image_upload_image_upload_service__ = __webpack_require__("./src/app/shared/components/image.upload/image.upload.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var LanguageTranslateComponent = (function () {
    function LanguageTranslateComponent(services, qTypeService, modalService, pipingService, swapPipingService, imageService) {
        this.services = services;
        this.qTypeService = qTypeService;
        this.modalService = modalService;
        this.pipingService = pipingService;
        this.swapPipingService = swapPipingService;
        this.imageService = imageService;
        this.onSaveLang = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.langData = {};
        this.allIdsDataMap = {};
        this.quesIdByNumber = {};
        this.erorShowHide = false;
    }
    LanguageTranslateComponent.prototype.ngOnInit = function () {
        var _this = this;
        var surId = this.services.form.formObj.getId();
        this.allQuestionOfSurvey = this.services.form.formObj.getAllQuestions();
        this.allQuestionOfSurvey.forEach(function (ques, index) {
            _this.quesIdByNumber[index + 1] = ques._id;
        });
        this.allQuestionNumbers = this.services.form.getQuestionCountAndId();
        this.langKey = this.langInpData.langKey;
        this.langDirection = this.langInpData.direction;
        this.services.resource.getSurveyLanguagesData(surId, this.langKey).subscribe(function (data) {
            _this.languageResponse = _this.services.utils.cloneObject(data);
            if (_this.languageResponse.hasOwnProperty('language') && _this.languageResponse.language && _this.languageResponse.language.hasOwnProperty('langData') && _this.languageResponse.language.langData && _this.languageResponse.language.langData.hasOwnProperty(_this.langKey)) {
                _this.langData = _this.services.utils.cloneObject(_this.languageResponse.language.langData[_this.langKey]);
                _this.createLangObject();
                for (var id in _this.allQuestionNumbers.data) {
                    if (_this.langData.hasOwnProperty(id) && _this.langData[id].hasOwnProperty('title')) {
                        _this.langData[id].title = _this.swapPipingService.transform(_this.langData[id].title, true, id);
                    }
                }
            }
            else {
                _this.createLangObject();
            }
        });
    };
    LanguageTranslateComponent.prototype.saveLanguage = function () {
        var _this = this;
        var langObj = {};
        var retFlag = false;
        langObj[this.langKey] = this.services.utils.cloneObject(this.langData);
        this.allQuestionOfSurvey.forEach(function (ques) {
            if (langObj[_this.langKey][ques._id].title) {
                var title = langObj[_this.langKey][ques._id].title;
                var originalTitle = _this.allIdsDataMap[ques._id].title;
                var matchArray = title.match(/{{p:\/\/Q\d{1,}}}/g);
                var originalMatchArray = originalTitle.match(/{{p:\/\/[a-f0-9]{24}}}/gi) || [];
                title = _this.swapPipingService.transform(title, false, ques._id);
                langObj[_this.langKey][ques._id].title = title;
                matchArray = langObj[_this.langKey][ques._id].title.match(/{{p:\/\/[a-f0-9]{24}}}/gi) || [];
                if (originalMatchArray.length != matchArray.length) {
                    retFlag = true;
                }
            }
        });
        if (retFlag) {
            this.services.toastr.error("Some piping in the questions doesn`t match with the translation");
        }
        this.services.resource.saveLanguageTranslation(this.services.form.formObj.getId(), langObj).subscribe(function (data) {
            _this.services.toastr.success("Language Translated Successfully");
            //   this.languageResponse = !this.languageResponse;
            _this.onSaveLang.emit();
        });
    };
    LanguageTranslateComponent.prototype.checkId = function (id, key) {
        if (this.langData.hasOwnProperty(id)) {
            this.langData[id][key] = "";
        }
        else {
            this.langData[id] = {};
            this.langData[id][key] = "";
        }
    };
    LanguageTranslateComponent.prototype.createLangObject = function () {
        var _this = this;
        if (!this.langData.hasOwnProperty(this.services.form.formObj.getId())) {
            this.langData[this.services.form.formObj.getId()] = {
                title: null,
                done: null,
                next: null,
                previous: null
            };
        }
        this.services.form.formObj.getPageFields().forEach(function (page) {
            if (!_this.langData.hasOwnProperty(page.getId())) {
                _this.langData[page.getId()] = {
                    title: null,
                    desc: null
                };
            }
            page.getAllQuestions().forEach(function (ques) {
                if (!_this.langData.hasOwnProperty(ques.getId())) {
                    _this.langData[ques.getId()] = {
                        title: null,
                        reqMsg: null
                    };
                }
                _this.allIdsDataMap[ques._id] = {
                    title: ques.title
                };
                ques.getRowArray().forEach(function (row) {
                    if (!_this.langData.hasOwnProperty(row.getId())) {
                        _this.langData[row.getId()] = {
                            text: null,
                        };
                    }
                    _this.allIdsDataMap[row._id] = {
                        text: row.text
                    };
                });
                ques.getColArray().forEach(function (col) {
                    if (!_this.langData.hasOwnProperty(col.getId())) {
                        _this.langData[col.getId()] = {
                            text: null,
                        };
                    }
                    _this.allIdsDataMap[col._id] = {
                        text: col.text
                    };
                    if (col.items && col.items.length) {
                        col.items.forEach(function (item) {
                            if (!_this.langData.hasOwnProperty(item._id)) {
                                _this.langData[item._id] = {
                                    text: null
                                };
                            }
                            _this.allIdsDataMap[item._id] = {
                                text: item.text
                            };
                        });
                    }
                });
            });
        });
    };
    LanguageTranslateComponent.prototype.addInBulk = function () {
        /*
          this.currentBulkObj:
              ques: <object>,
              type: <string>,
              colId: <objectId>
        */
        var elemArr = [];
        var type = this.currentBulkObj.type;
        var ques = this.currentBulkObj.ques;
        var colId = this.currentBulkObj.colId ? this.currentBulkObj.colId : null;
        var insertString = this.addBulkValueString;
        var newArray = [];
        var newMenuVals = [];
        if (type == 'r') {
            elemArr = ques.getRowArray();
        }
        else if (type == 'c') {
            elemArr = ques.getColArray();
        }
        else if (type == 'i') {
            elemArr = ques.getColById(colId).items;
        }
        insertString = insertString.replace(/^\s*\n/gm, ""); // Removing only spaces and \n at last of string
        newArray = insertString.split("\n"); // Converting string into array of sepecrated values
        for (var i = 0; i < newArray.length; i++)
            newArray[i] = newArray[i].trim();
        for (var i = 0; i < newArray.length; i++)
            if (newArray[i] != '')
                newMenuVals.push(newArray[i]);
        if (newMenuVals.length > elemArr.length) {
            this.erorShowHide = true;
            return;
        }
        else {
            this.erorShowHide = false;
            for (var i = 0; i < newMenuVals.length; i++) {
                this.langData[elemArr[i]._id]["text"] = newMenuVals[i];
            }
        }
        this.modalRef.hide();
    };
    LanguageTranslateComponent.prototype.openBulkModal = function (options) {
        this.currentBulkObj = {
            type: options.type,
            ques: options.ques,
            colId: options.colId ? options.colId : null
        };
        var elemArr = [];
        if (options.type == 'r') {
            elemArr = options.ques.getRowArray();
        }
        else if (options.type == 'c') {
            elemArr = options.ques.getColArray();
        }
        else if (options.type == 'i') {
            elemArr = options.ques.getColById(options.colId).items;
        }
        var setString = '';
        for (var i = 0; i < elemArr.length; i++) {
            if (this.langData[elemArr[i]._id] && this.langData[elemArr[i]._id]["text"]) {
                setString += this.langData[elemArr[i]._id]["text"] + "\n";
            }
        }
        this.addBulkValueString = setString;
        this.modalRef = this.modalService.show(this.addBulkModal, { class: 'modal-md' });
    };
    LanguageTranslateComponent.prototype.hideModal = function () {
        this.modalRef.hide();
    };
    LanguageTranslateComponent.prototype.insertPiping = function (type) {
        this.pipingService.initializePipingObj();
        this.pipingService.pipingJSON.from = type;
        this.modalRef = this.modalService.show(this.insertPipingModal, { class: 'modal-md' });
    };
    LanguageTranslateComponent.prototype.onPipingDone = function () {
        this.modalRef.hide();
    };
    LanguageTranslateComponent.prototype.insertImage = function (id, key) {
        this.currentImageAddButton = { id: id, key: key };
        this.modalRef = this.modalService.show(this.insertImageModal, { class: 'modal-lg' });
    };
    LanguageTranslateComponent.prototype.onDoneImageSelect = function (e) {
        if (e) {
            this.imageService.initializePipingImgObj(e);
            // this.insertInQuesOrOpt();
            var textToInsert = this.imageService.getPipedImgElem();
            if (this.currentImageAddButton.key == 'title') {
                this.services.utils.insertContentInActiveTinyMce(textToInsert);
            }
            else {
                if (!this.langData[this.currentImageAddButton.id][this.currentImageAddButton.key]) {
                    this.langData[this.currentImageAddButton.id][this.currentImageAddButton.key] = textToInsert;
                }
                else {
                    this.langData[this.currentImageAddButton.id][this.currentImageAddButton.key] += textToInsert;
                }
            }
        }
        this.modalRef.hide();
    };
    LanguageTranslateComponent.prototype.checkPipingExistence = function (text) {
        if ((/{{(c|e):\/\/.*?}}/g).test(text)) {
            return true;
        }
        else {
            return false;
        }
    };
    LanguageTranslateComponent.prototype.checkQuesTypeForImage = function (fieldType, type) {
        var allowRowJSON = {
            'text-textBox': false,
            'matrix-rating': false,
            'multiChoice-dropdown': false,
            'matrix-slider': false,
            'comment': false,
            'file': false,
        };
        var allowColJSON = {
            'matrix-ranking': false,
            'matrix-rating': false,
            'matrix-slider': false,
        };
        if (type == 'row') {
            if (fieldType.family) {
                if (fieldType.subtype && allowRowJSON.hasOwnProperty(fieldType.family + '-' + fieldType.subtype)) {
                    return false;
                }
                else if (allowRowJSON.hasOwnProperty(fieldType.family)) {
                    return false;
                }
                else {
                    return true;
                }
            }
        }
        else if (type == 'col') {
            if (fieldType.subtype && allowRowJSON.hasOwnProperty(fieldType.family + '-' + fieldType.subtype)) {
                return false;
            }
            else {
                return true;
            }
        }
    };
    LanguageTranslateComponent.prototype.setPipingVariable = function (text) {
        var matchArray = text.match(/{{p:\/\/[a-f0-9]{24}}}/gi);
        var resArray = [];
        if (matchArray) {
            for (var i = 0; i < matchArray.length; i++) {
                if (resArray.indexOf(matchArray[i]) == -1) {
                    resArray.push(matchArray[i]);
                }
            }
            for (var i = 0; i < resArray.length; i++) {
                resArray[i] = resArray[i].replace('{{p://', '').replace('}}', '');
            }
            this.pipingVariable = resArray;
            return true;
        }
        else {
            this.pipingVariable = [];
            return false;
        }
    };
    LanguageTranslateComponent.prototype.addPipingToTitle = function (qIdToPipe, qIdPiping, qNumToPipe) {
        this.services.utils.insertContentInActiveTinyMce('{{p://Q' + qNumToPipe + '}}');
    };
    LanguageTranslateComponent.prototype.checkBulkAddShowHide = function (question, type) {
        var family = question.fieldType.family;
        var subtype = question.fieldType.subtype;
        var bulkAddTypeArray = [
            { "family": "multiChoice", "subtype": "radio", showROw: true, showCol: false },
            { "family": "multiChoice", "subtype": "checkbox", showROw: true, showCol: false },
            { "family": "multiChoice", "subtype": "dropdown", showROw: true, showCol: false },
            { "family": "matrix", "subtype": "radio", showROw: true, showCol: true },
            { "family": "matrix", "subtype": "checkbox", showROw: true, showCol: true },
            { "family": "matrix", "subtype": "dropdown", showROw: true, showCol: true },
            { "family": "matrix", "subtype": "rating", showROw: false, showCol: false },
            { "family": "matrix", "subtype": "graphical", showROw: true, showCol: false },
            { "family": "matrix", "subtype": "ranking", showROw: true, showCol: false },
            { "family": "text", "subtype": "textBox", showROw: false, showCol: false },
            { "family": "text", "subtype": "multitextbox", showROw: true, showCol: false },
            { "family": "text", "subtype": "textArea", showROw: false, showCol: false },
            { "family": "date", "subtype": "dateOnly", showROw: true, showCol: false },
            { "family": "date", "subtype": "timeOnly", showROw: true, showCol: false },
            { "family": "date", "subtype": "both", showROw: true, showCol: false },
            { "family": "comment", "subtype": undefined, showROw: false, showCol: false },
            { "family": "statement", "subtype": undefined, showROw: false, showCol: false },
            { "family": "file", "subtype": undefined, showROw: false, showCol: false },
            { "family": "contact", "subtype": undefined, showROw: true, showCol: false },
        ];
        for (var aIndex = 0; aIndex < bulkAddTypeArray.length; aIndex++) {
            if (bulkAddTypeArray[aIndex].family == family && (subtype ? bulkAddTypeArray[aIndex].subtype == subtype : 1)) {
                if (type == 'row') {
                    if (bulkAddTypeArray[aIndex].showROw) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else if (type == 'col') {
                    if (bulkAddTypeArray[aIndex].showCol) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                break;
            }
        }
    };
    LanguageTranslateComponent.prototype.onEvent = function (event, id, key) {
        if (event.type == 'keyup') {
            event.options.element = event.options.content;
            this.langData[id][key] = event.options.content;
        }
        else if (event.type == 'btnClick' && event.options.action == 'imgUpload') {
            this.insertImage(id, key);
        }
    };
    return LanguageTranslateComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], LanguageTranslateComponent.prototype, "langInpData", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], LanguageTranslateComponent.prototype, "addLang", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], LanguageTranslateComponent.prototype, "onSaveLang", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('addBulkModal'),
    __metadata("design:type", Object)
], LanguageTranslateComponent.prototype, "addBulkModal", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('uploadImageModal'),
    __metadata("design:type", Object)
], LanguageTranslateComponent.prototype, "uploadImageModal", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('insertPipingModal'),
    __metadata("design:type", Object)
], LanguageTranslateComponent.prototype, "insertPipingModal", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('insertImageModal'),
    __metadata("design:type", Object)
], LanguageTranslateComponent.prototype, "insertImageModal", void 0);
LanguageTranslateComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-language-translate',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.advance/language.translate/language.translate.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.advance/language.translate/language.translate.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.advance/survey.advance.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_3_ngx_bootstrap_modal__["a" /* BsModalService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3_ngx_bootstrap_modal__["a" /* BsModalService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_4__survey_question_edit_question_piping_question_piping_service__["a" /* QuestionPipingService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__survey_question_edit_question_piping_question_piping_service__["a" /* QuestionPipingService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_5__shared_pipes_common_pipes__["b" /* SwapMongoIdAndQuesNum */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_pipes_common_pipes__["b" /* SwapMongoIdAndQuesNum */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_6__shared_components_image_upload_image_upload_service__["a" /* ImageUploadService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__shared_components_image_upload_image_upload_service__["a" /* ImageUploadService */]) === "function" && _g || Object])
], LanguageTranslateComponent);

var _a, _b, _c, _d, _e, _f, _g;
//# sourceMappingURL=language.translate.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/quota/quota.component.css":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/quota/quota.component.html":
/***/ (function(module, exports) {

module.exports = "<div *ngIf=\"reBuild\">\n  <div [formGroup]=\"quotaForm\">\n    <div class=\"quota_upper_div row\">\n      <div class=\"col-lg-4 col-md-12\">\n        <label class=\"quota_label\">Name:</label>\n        <input type=\"text\" class=\"quota_text_input quota_name\" required placeholder=\"Enter a valid link to be shared\" formControlName=\"name\">\n      </div>\n      <div class=\"col-lg-4 col-md-12\">\n        <label class=\"quota_label\">Response Type:</label>\n        <span class=\"quota_input_radio\">\n          <input type=\"radio\" name=\"respType\" id=\"partial_res\" value=\"0\" formControlName=\"respType\" [checked]=\"quotaForm.get('respType').value == 0\">\n          <label class=\"response_type quota_label\" for=\"partial_res\">Partial</label>\n          <input type=\"radio\" name=\"respType\" id=\"complete_res\" value=\"1\" formControlName=\"respType\" [checked]=\"quotaForm.get('respType').value == 1\">\n          <label class=\"response_type quota_label\" for=\"complete_res\">Complete</label>\n        </span>\n      </div>\n      <div class=\"col-lg-4 col-md-12 quota_switch_to_div\">\n        <label class=\"quota_label\">Switch to:</label>\n        <span class=\"quota_input_radio\">\n          <input type=\"radio\" name=\"type\" id=\"switch_simple\" value=\"1\" formControlName=\"type\" [checked]=\"quotaForm.get('type').value == 1\">\n          <label class=\"switch_to_first quota_label\" for=\"switch_simple\">Simple</label>\n          <input type=\"radio\" name=\"type\" id=\"switch_combtn\" value=\"2\"  formControlName=\"type\" [checked]=\"quotaForm.get('type').value == 2\">\n          <label class=\"switch_to_second quota_label\" for=\"switch_combtn\">Combination</label>\n        </span>\n      </div>\n    </div>\n\n    <div class=\"quota_lower_div\">\n      <div class=\"combtn_quota\" [hidden]=\"(quotaForm.get('type').value == 1)\" formGroupName=\"cQuota\">\n        <div class=\"row\">\n          <div class=\"col-lg-7\">\n            <label class=\"quota_label\">Quota Limit:</label>\n            <input type=\"text\" class=\"quota_text_input quota_limit\" placeholder=\"Enter Quota Limit\" formControlName=\"value\">\n          </div>\n          <div class=\"col-lg-5\">\n            <span class=\"custom_checkbox_grp\">\n              <label>\n                <input type=\"checkbox\" value=\"1\" (change)=\"applyQuota($event)\" [checked]=\"quotaForm.get('isQuota').value\">\n                <span class=\"custom_checkbox_txt\">If you want to apply this quota</span>\n              </label>\n            </span>\n          </div>\n        </div>\n        <div>\n          <div formArrayName=\"quesInQuota\">\n            <div class=\"ques_div\" *ngFor=\"let ques of quotaForm.get('cQuota.quesInQuota').controls; index as q_idx\" [formGroupName]=\"q_idx\">\n              <div *ngIf=\"q_idx != 0\">\n                <div class=\"quota_options_hr\"></div>\n                <div class=\"and_or_div\">\n                  <span class=\"custom_select_div\">\n                    <select class=\"custom_select_box\" formControlName=\"ope\">\n                      <option value=\"1\">And</option>\n                      <option value=\"2\">Or</option>\n                    </select>\n                  </span>\n                </div>\n              </div>\n              <div class=\"quota_options_hr\"></div>\n              <div class=\"quota_options\">\n                <span class=\"quota_ques\">\n                  <span class=\"custom_select_div\">\n                    <select class=\"custom_select_box\" #cQuotaQues formControlName=\"quesId\" (change)=\"getOptForQuesInCquota(cQuotaQues.value, q_idx)\">\n                      <option value=\"-1\">Select Question</option>\n                      <option *ngFor=\"let ques of allQuestions\" [value]=\"ques._id\" [innerHTML]=\"ques.title | swapMongoIdAndQuesNum : true : ques._id\"></option>\n                    </select>\n                  </span>\n                </span>\n                <span class=\"quota_sel_unsel\">\n                  <span class=\"custom_select_div\">\n                    <select class=\"custom_select_box\" formControlName=\"select\">\n                      <option value=\"1\">Selected</option>\n                      <option value=\"0\">Not Selected</option>\n                    </select>\n                  </span>\n                </span>\n                <span>\n                  <span class=\"del_ques\" (click)=\"removeQuesInCquota(q_idx)\"></span>\n                </span>\n              </div>\n              <div class=\"options_div\" *ngIf=\"quotaData.combtn[q_idx]\">\n                <checkbox-group formControlName=\"optArr\">\n                  <checkbox *ngFor=\"let optid of quotaData.combtn[q_idx].opts | keys; index as cOptIdx\" [value]=\"optid\">\n                    <span [innerHTML]=\"quotaData.combtn[q_idx].opts[optid] == '' ? 'Option ' + (cOptIdx + 1) : quotaData.combtn[q_idx].opts[optid]\"></span>\n                  </checkbox>\n                </checkbox-group>\n              </div>\n            </div>\n          </div>\n          <div>\n            <div class=\"quota_options_hr\"></div>\n            <div class=\"add_btn_div\">\n              <button class=\"btn custom_add_btn\" type=\"button\" (click)=\"addQuesInCquota()\"><span>+ Add</span></button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"simple_quota\" [hidden]=\"(quotaForm.get('type').value == 2)\" formGroupName=\"sQuota\">\n        <div class=\"row\">\n          <div class=\"col-lg-7 ques_sel\">\n            <span class=\"custom_select_div\">\n              <select class=\"custom_select_box\" #sQuotaQues formControlName=\"quesId\" (change)=\"getOptForQuesInSquota(sQuotaQues.value)\">\n                <option value=\"-1\">Select Question</option>\n                <option *ngFor=\"let ques of allQuestions\" [value]=\"ques._id\" [innerHTML]=\"ques.title | swapMongoIdAndQuesNum : true : ques._id\"></option>\n              </select>\n            </span>\n          </div>\n          <div class=\"col-lg-5\">\n            <span class=\"custom_checkbox_grp\">\n              <label>\n                <input type=\"checkbox\" value=\"1\" (change)=\"applyQuota($event)\" [checked]=\"quotaForm.get('isQuota').value\">\n                <span class=\"custom_checkbox_txt\">If you want to apply this quota</span>\n              </label>\n            </span>\n          </div>\n        </div>\n        <div>\n          <div>\n            <div class=\"row opt_div\" *ngFor=\"let opt of quotaData.simple | keys; index as idx;index as sOptIdx\">\n              <div class=\"col-lg-4 col-md-4\">\n                <span class=\"custom_checkbox_grp\">\n                  <label>\n                    <input type=\"checkbox\" [(ngModel)]=\"quotaData.simple[opt].checked\" [ngModelOptions]=\"{standalone: true}\">\n                    <span class=\"custom_checkbox_txt\" [innerHTML]=\"quotaData.simple[opt].text == '' ? 'Option ' + (sOptIdx + 1) : quotaData.simple[opt].text\"></span>\n                  </label>\n                </span>\n              </div>\n              <div class=\"col-lg-4 col-md-4\">\n                <input type=\"text\" class=\"quota_text_input\" placeholder=\"Limit\" [(ngModel)]=\"quotaData.simple[opt].limit\" [ngModelOptions]=\"{standalone: true}\" (keydown)=\"validateLimit($event)\">\n              </div>\n              <div class=\"col-lg-4 col-md-4\">\n                <span class=\"custom_select_div\">\n                  <select class=\"custom_select_box\" [(ngModel)]=\"quotaData.simple[opt].select\" [ngModelOptions]=\"{standalone: true}\">\n                    <option value=\"1\">Selected</option>\n                    <option value=\"0\">Not Selected</option>\n                  </select>\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"footer_btns_div\">\n        <button class=\"btn save_btn\" type=\"button\" [disabled]=\"quotaForm.invalid\" (click)=\"saveQuota()\">\n          {{updateOrNew ? 'Update' : 'Save'}}\n        </button>\n        <!-- <button class=\"btn reset_btn\" type=\"button\" (click)=\"resetQuota()\">Reset</button> -->\n      </div>\n    </div>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/quota/quota.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QuotaComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__quota_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/quota/quota.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var QuotaComponent = (function () {
    function QuotaComponent(quotaService, editDataService, services) {
        this.quotaService = quotaService;
        this.editDataService = editDataService;
        this.services = services;
        this.quotaData = {
            simple: {},
            combtn: [] //[<obj>]: {qid: '', <obj>opts: {optId: optText}}
        };
        this.updateOrNew = false; //false-->new, true-->update
        this.reBuild = true;
    }
    QuotaComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.sId = this.editDataService.sId;
        this.formObj = this.services.form.formObj;
        this.quotaEditObj = this.formObj.quota;
        this.allQuestions = this.services.form.getAllQuestions().filter(function (item) {
            return (item.qType && (item.qType.type == 'single-choice' || item.qType.type == 'mul-choice' || item.qType.type == 'dropdown'));
        });
        this.allQuestions = this.allQuestions.filter(function (item) {
            return (!_this.formObj.getQuestionById(item._id).isHidden);
        });
        if (this.quotaEditObj && (this.quotaEditObj.sQuota || this.quotaEditObj.cQuota)) {
            this.setSimQuotaOnInit();
            this.setComQuotaOnInit();
            this.updateOrNew = true;
            this.setQuotaForm(this.quotaEditObj);
        }
        else {
            this.setQuotaForm(this.quotaService.quotaJSON);
            this.quotaData.combtn.push({
                qid: '',
                opts: {}
            });
        }
    };
    QuotaComponent.prototype.setQuotaForm = function (obj) {
        this.quotaForm = this.quotaService.buildQuotaFormGroup(this.services.utils.cloneObject(obj));
        if (this.quotaForm.get('cQuota.quesInQuota').length == 0) {
            this.quotaForm.get('cQuota.quesInQuota').push(this.quotaService.addQuesInCombtnQuota());
            this.quotaData.combtn.push({
                qid: '',
                opts: {}
            });
        }
        if (this.quotaForm.get('sQuota.quesId').value == '' || this.quotaForm.get('sQuota.quesId').value == null) {
            //if quota has been affected by deleting some question
            this.quotaForm.get('sQuota.quesId').patchValue('-1');
        }
    };
    QuotaComponent.prototype.setSimQuotaOnInit = function () {
        var _this = this;
        if (this.quotaEditObj.sQuota) {
            this.getOptForQuesInSquota(this.quotaEditObj.sQuota.quesId);
            if (this.quotaEditObj.sQuota.optArr) {
                this.quotaEditObj.sQuota.optArr.forEach(function (item) {
                    if (_this.quotaData.simple[item.ansId]) {
                        _this.quotaData.simple[item.ansId].checked = true;
                        _this.quotaData.simple[item.ansId].limit = item.value;
                        _this.quotaData.simple[item.ansId].select = item.select;
                    }
                });
            }
        }
    };
    QuotaComponent.prototype.setComQuotaOnInit = function () {
        var _this = this;
        if (this.quotaEditObj.cQuota && this.quotaEditObj.cQuota.quesInQuota) {
            this.quotaEditObj.cQuota.quesInQuota.forEach(function (item, idx) {
                _this.quotaData.combtn.push({
                    qid: '',
                    opts: {}
                });
                _this.getOptForQuesInCquota(item.quesId, idx);
            });
        }
    };
    QuotaComponent.prototype.validateLimit = function (e) {
        if (e.key == " ")
            e.preventDefault();
    };
    QuotaComponent.prototype.getOptForQuesInSquota = function (qid) {
        var _this = this;
        var idx = this.services.utils.findIndex(this.allQuestions, '_id', qid);
        this.quotaData.simple = {};
        if (idx > -1) {
            this.allQuestions[idx].options.row.forEach(function (opt) {
                _this.quotaData.simple[opt._id] = {
                    'text': opt.text,
                    'checked': false,
                    'limit': '',
                    'select': 1
                };
            });
        }
    };
    QuotaComponent.prototype.getOptForQuesInCquota = function (qid, q_idx) {
        var _this = this;
        var idx = this.services.utils.findIndex(this.allQuestions, '_id', qid);
        this.quotaData.combtn[q_idx].qid = qid;
        this.quotaData.combtn[q_idx].opts = {};
        if (idx > -1) {
            this.allQuestions[idx].options.row.forEach(function (opt) {
                _this.quotaData.combtn[q_idx].opts[opt._id] = opt.text;
            });
        }
    };
    QuotaComponent.prototype.clearFormArray = function (str) {
        while (this.quotaForm.get(str).length) {
            this.quotaForm.get(str).removeAt(this.quotaForm.get(str).length - 1);
        }
    };
    QuotaComponent.prototype.applyQuota = function (e) {
        this.quotaForm.get('isQuota').patchValue(e.target.checked ? 1 : 0);
    };
    QuotaComponent.prototype.addQuesInCquota = function () {
        this.quotaForm.get('cQuota.quesInQuota').push(this.quotaService.addQuesInCombtnQuota());
        this.quotaData.combtn.push({
            qid: '',
            opts: {}
        });
    };
    QuotaComponent.prototype.removeQuesInCquota = function (idx) {
        if (this.quotaForm.get('cQuota.quesInQuota').length > 1) {
            this.quotaData.combtn.splice(idx, 1);
            this.quotaForm.get('cQuota.quesInQuota').removeAt(idx);
            if (idx > 0) {
                this.quotaForm.get('cQuota.quesInQuota').at(idx - 1).get('ope').patchValue(1);
            }
        }
        else {
            this.services.toastr.error('Atleast one question is required.', 'Cannot be deleted');
        }
    };
    QuotaComponent.prototype.resetQuota = function () {
        var _this = this;
        this.quotaForm = this.quotaService.buildQuotaFormGroup(this.services.utils.cloneObject(this.quotaService.quotaJSON));
        this.quotaData = {
            simple: {},
            combtn: []
        };
        this.quotaData.combtn.push({
            qid: '',
            opts: {}
        });
        this.updateOrNew = false;
        this.reBuild = false;
        setTimeout(function () {
            _this.reBuild = true;
        }, 1);
    };
    QuotaComponent.prototype.saveQuota = function () {
        var _this = this;
        var res = this.quotaForm.getRawValue();
        for (var opt in this.quotaData.simple) {
            var temp = this.quotaData.simple[opt];
            var idx = this.services.utils.findIndex(res.sQuota.optArr, 'ansId', opt);
            if (idx > -1) {
                if (temp.checked) {
                    res.sQuota.optArr[idx].ansId = opt;
                    res.sQuota.optArr[idx].select = temp.select;
                    res.sQuota.optArr[idx].value = temp.limit;
                }
                else {
                    res.sQuota.optArr.splice(idx, 1);
                }
            }
            else {
                if (temp.checked) {
                    res.sQuota.optArr.push({
                        ansId: opt,
                        select: temp.select,
                        value: temp.limit
                    });
                }
            }
        }
        //validations
        if (res.type == 1) {
            if (res.sQuota.quesId == -1) {
                this.services.toastr.error('Please select atleast one question.');
                return false;
            }
            else if (res.sQuota.optArr && res.sQuota.optArr.length == 0) {
                this.services.toastr.error('Please select atleast one option.');
                return false;
            }
            else if (res.sQuota.optArr && res.sQuota.optArr.length) {
                for (var _i = 0, _a = res.sQuota.optArr; _i < _a.length; _i++) {
                    var item = _a[_i];
                    if (isNaN(item.value) || item.value == '' || item.value == null || parseInt(item.value) < 1) {
                        this.services.toastr.error('Limit should be greater than 0.');
                        return false;
                    }
                }
            }
            res.cQuota = {};
        }
        else if (res.type == 2) {
            if (isNaN(res.cQuota.value) || res.cQuota.value == '' || res.cQuota.value == null || parseInt(res.cQuota.value) < 1) {
                this.services.toastr.error('Quota Limit should be greater than 0.');
                return false;
            }
            else if (res.cQuota.quesInQuota && res.cQuota.quesInQuota.length) {
                for (var _b = 0, _c = res.cQuota.quesInQuota; _b < _c.length; _b++) {
                    var item = _c[_b];
                    if (item.quesId == '' || item.quesId == -1) {
                        this.services.toastr.error('Please select question.');
                        return false;
                    }
                    else if (item.optArr.length == 0) {
                        this.services.toastr.error('Please select atleast one option.');
                        return false;
                    }
                }
            }
            res.sQuota = {};
        }
        var quotaRes = {
            'quota': res
        };
        this.services.resource.saveQuota(this.sId, quotaRes).subscribe(function (data) {
            _this.services.toastr.success('Quota Logic has been applied successfully.', 'Logic Applied');
            _this.services.form.formObj.quota = _this.services.utils.cloneObject(data.quota);
        }, function (err) {
            _this.services.toastr.error('Error in saving Quota Details.');
        });
    };
    return QuotaComponent;
}());
QuotaComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-quota',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.advance/quota/quota.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.advance/survey.advance.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.advance/quota/quota.component.css")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__quota_service__["a" /* QuotaService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__quota_service__["a" /* QuotaService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__edit_data_service__["a" /* EditDataService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_services_module__["a" /* SharedServices */]) === "function" && _c || Object])
], QuotaComponent);

var _a, _b, _c;
//# sourceMappingURL=quota.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/quota/quota.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QuotaService; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var QuotaService = (function () {
    function QuotaService(_fb) {
        this._fb = _fb;
        this.quotaJSON = {
            name: '',
            isQuota: 0,
            respType: 0,
            type: 1,
            sQuota: {
                quesId: '-1',
                optArr: []
            },
            cQuota: {
                value: '',
                quesInQuota: [{
                        quesId: '-1',
                        select: 1,
                        optArr: [],
                        ope: 1
                    }]
            }
        };
    }
    QuotaService.prototype.buildQuotaFormGroup = function (quotaJSON) {
        var _this = this;
        var quotaForm = this._fb.group({
            name: '',
            isQuota: '',
            respType: '',
            type: '',
            sQuota: this._fb.group({
                quesId: '',
                optArr: this._fb.array([]),
            }),
            cQuota: this._fb.group({
                value: '',
                quesInQuota: this._fb.array([])
            })
        });
        quotaJSON.cQuota.quesInQuota.forEach(function (ques) {
            quotaForm.get('cQuota.quesInQuota').push(_this.addQuesInCombtnQuota());
        });
        quotaForm.patchValue(quotaJSON);
        return quotaForm;
    };
    QuotaService.prototype.addItemInOptArrInSimpleQuota = function (id, limit, sel) {
        return this._fb.group({
            ansId: (id ? id : ''),
            select: (sel ? sel : 1),
            value: (limit ? limit : '')
        });
    };
    QuotaService.prototype.addQuesInCombtnQuota = function () {
        return this._fb.group({
            quesId: -1,
            select: 1,
            optArr: '',
            ope: 1
        });
    };
    return QuotaService;
}());
QuotaService = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormBuilder"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormBuilder"]) === "function" && _a || Object])
], QuotaService);

var _a;
//# sourceMappingURL=quota.service.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/reports.page/reports.page.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"inner-left-container\">\n  <!-- <div class=\"content\"> -->\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <textarea [value]=\"reportData.pageContent\" appTinymceFull [element]=\"{text:reportData.pageContent ? reportData.pageContent : ''}\"></textarea>\n    </div>\n  </div>\n  <div class=\"piping-area\" style=\"padding: 15px;background-color:white;margin-top: 20px;\">\n    <div class=\"row\">\n      <div class=\"col-md-8 col-xs-12\">\n        <div class=\"form-group row\">\n          <div class=\"col-md-2\">\n            <label class=\"control-label\">Criteria:</label>\n          </div>\n          <div class=\"col-md-10\">\n            <span class=\"criteria-img-span reports-img-span\"> <img class=\"reports-img\" src=\"/assets/images/editSurvey/reports/criteria.svg\"> </span>\n            <select class=\"form-control reports-criteria-select reports-selection\" [(ngModel)]=\"reportsObject.criId\">\n              <option value=\"\">None</option>\n              <option *ngFor=\"let cri of allCriterias\" [value]=\"cri._id\">{{ cri.name }}</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <div class=\"col-md-2\">\n            <label class=\"control-label\">Content:</label>\n          </div>\n          <div class=\"col-md-10\">\n              <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <label class=\"control-label text-center content-labels\" [ngClass]=\"contentVal1.checked ? 'content-labels-active' : 'content-labels'\"> <input type=\"radio\" #contentVal1 name=\"contentRadio\" checked style=\"display:none\">\n                    <img [hidden]=\"contentVal1.checked\" class=\"content-options-img\" src=\"/assets/images/editSurvey/reports/content-piping-nonactive.svg\">\n                    <img [hidden]=\"!contentVal1.checked\" class=\"content-options-img\" src=\"/assets/images/editSurvey/reports/content.svg\">\n                    <span [ngClass]=\"contentVal1.checked ? 'content-labels-text-active' : 'content-labels-text'\"> Content Piping </span>\n                  </label>\n                </div>\n                <div class=\"col-md-6\" style=\"display:none\">\n                  <label class=\"control-label text-center\" [ngClass]=\"contentVal2.checked ? 'content-labels-active' : 'content-labels'\"> <input type=\"radio\" #contentVal2 name=\"contentRadio\" style=\"display:none\">\n                    <img [hidden]=\"contentVal2.checked\" class=\"content-options-img\" src=\"/assets/images/editSurvey/reports/content-modify-nonactive.svg\">\n                    <img [hidden]=\"!contentVal2.checked\" class=\"content-options-img\" src=\"/assets/images/editSurvey/reports/content-modify-active.svg\">\n                    <span [ngClass]=\"contentVal2.checked ? 'content-labels-text-active' : 'content-labels-text'\"> Content Modify </span>\n                  </label>\n                </div>\n              </div>\n          </div>\n        </div>\n        <div class=\"form-group row\" [hidden]=\"!contentVal1.checked\">\n          <div class=\"col-md-2\">\n            <label class=\"control-label\">Type:</label>\n          </div>\n          <div class=\"col-md-10\">\n            <span class=\"criteria-img-span reports-img-span\"> <img class=\"reports-img\" src=\"/assets/images/editSurvey/reports/embedded-data.svg\"> </span>\n            <select class=\"form-control reports-selection\" [(ngModel)]=\"reportsObject.type\">\n              <option *ngFor=\"let type of contentType\" [value]=\"type.key\">\n                {{ type.value }}\n              </option>\n            </select>\n          </div>\n        </div>\n        <div class=\"form-group row\" [hidden]=\"!contentVal1.checked\">\n          <div class=\"col-md-2\">\n            <label class=\"control-label\">Value:</label>\n          </div>\n          <div class=\"col-md-10\">\n            <span class=\"criteria-img-span reports-img-span\"> <img class=\"reports-img\" src=\"/assets/images/editSurvey/reports/value.svg\"> </span>\n            <input type=\"text\" class=\"form-control reports-selection\" placeholder=\"Enter field name\" *ngIf=\"reportsObject.type == 'e'\" [(ngModel)]=\"reportsObject.eData\">\n            <select class=\"form-control reports-selection\" *ngIf=\"reportsObject.type == 'p'\" [(ngModel)]=\"reportsObject.ques\">\n              <option value=\"\">Select a question...</option>\n              <option *ngFor=\"let ques of allQuestions\" [value]=\"ques.id\">{{ ques.title }}</option>\n            </select>\n            <select class=\"form-control reports-selection\" *ngIf=\"reportsObject.type == 'c'\" [(ngModel)]=\"reportsObject.contact\">\n              <option value=\"fName\">First Name</option>\n              <option value=\"lName\">Last Name</option>\n              <option value=\"email\">Email</option>\n              <option value=\"mobile\">Mobile</option>\n              <option value=\"extUniqueId\">Unique ID</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"form-group row\" [hidden]=\"!contentVal2.checked\">\n          <div class=\"col-md-2\">\n            <label class=\"control-label\">Style:</label>\n          </div>\n          <div class=\"col-md-10\">\n              <div class=\"form-group row\">\n                <div class=\"col-md-4\">\n                  <label class=\"color-labels\" style=\"width:100%\">\n                    <div style=\"width: 40%;margin-top: 5px;display:inline-block;\"> Color </div>\n                    <label style=\"padding:1px;border:solid 1px #cccccc\">\n                      <app-color-picker [colorInp]=\"{value: '#CCCCCC'}\" (emitColor)=\"setColor($event)\" title=\"Background Color\"></app-color-picker>\n                      <app-color-picker [colorInp]=\"{value: '#0ab422'}\" (emitColor)=\"setColor($event)\" title=\"Text Color\"></app-color-picker>\n                    </label>\n                  </label>\n                </div>\n                <div class=\"col-md-4\">\n                  <select class=\"form-control\" style=\"height: 40px;\">\n                    <option [value]=\"font.value\" *ngFor=\"let font of fontFamList\">\n                      {{ font.text }}\n                    </option>\n                  </select>\n                </div>\n                <div class=\"col-md-4\">\n                  <select class=\"form-control\" style=\"height: 40px;\">\n                    <option [value]=\"size\" *ngFor=\"let size of fontSizes\">\n                      {{ size }}\n                    </option>\n                  </select>\n                </div>\n              </div>\n              <div class=\"form-group row text-center\">\n                <div class=\"col-md-12\">\n                  <div class=\"image-browse-div\">\n                    <label class=\"upload_file_div\">\n                      <div class=\"text-center\">\n                        <img height=\"50px\" src=\"/assets/images/editSurvey/reports/browse-image.svg\">\n                      </div>\n                      <div class=\"text-center upload_file_text\"><label style=\"color:#1572ba\"> <input type=\"file\" style=\"display:none;\">Browse</label> to upload</div>\n                    </label>\n                  </div>\n              </div>\n              </div>\n              <div class=\"row\">\n\n              </div>\n          </div>\n        </div>\n        <div class=\"form-group row\" [hidden]=\"!contentVal2.checked\">\n          <div class=\"col-md-2\">\n          </div>\n          <div class=\"col-md-10\">\n            <div class=\"row\">\n              <div class=\"col-md-2\">\n                <label class=\"control-label\"> Apply to </label>\n              </div>\n              <div class=\"col-md-10\">\n                <select class=\"form-control\">\n                  <option> Body </option>\n                </select>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-12 text-center\">\n            <button class=\"btn btn-success pull-right btn-sm\" type=\"button\" (click)=\"insertDataIntoReport()\"> + Insert</button>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-md-4 col-xs-12 text-center\">\n          <img class=\"content-img\" src=\"/assets/images/editSurvey/reports/content-piping-graphics.svg\" [hidden]=\"!contentVal1.checked\">\n          <img class=\"content-img\" src=\"/assets/images/editSurvey/reports/content-modify-graphic.svg\" [hidden]=\"!contentVal2.checked\">\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <hr>\n        <span class=\"custom_checkbox_grp\" style=\"display:block;padding:10px;margin-left:20px;\">\n          <label>\n            <input type=\"checkbox\" [(ngModel)]=\"reportData.hasPrint\" (click)=\"setHasPrint($event)\" [checked]=\"reportData.hasPrint ? 'true': 'false'\">\n            <span class=\"custom_checkbox_txt\"> Enable Download</span>\n          </label>\n        </span>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12 text-center\">\n        <button class=\"btn btn-primary save-report-button\" type=\"button\" (click)=\"saveReport()\"> Save Report </button>\n      </div>\n    </div>\n  </div>\n  <!-- </div> -->\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/reports.page/reports.page.component.scss":
/***/ (function(module, exports) {

module.exports = ".reports-img-span {\n  padding: 6px;\n  background-color: #1572ba;\n  position: absolute; }\n\n.reports-img {\n  height: 12px;\n  width: 16px; }\n\n.reports-selection {\n  padding-left: 28px; }\n\n.content-img {\n  width: 169px;\n  height: 164px; }\n\n.content-labels {\n  border: solid 1px #e6e6e6;\n  margin-right: 10px;\n  width: 100%;\n  padding-top: 20px;\n  padding-bottom: 20px; }\n\n.content-labels-active {\n  width: 100%;\n  margin-right: 10px;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  border: solid 1px #bdcae0;\n  color: #1572ba; }\n\n.content-labels-text {\n  display: block;\n  border: none;\n  color: black; }\n\n.content-labels-text-active {\n  display: block;\n  border: none;\n  color: #1572ba; }\n\n.color-labels {\n  border: solid 1px #cccbcb;\n  padding: 3px; }\n\n.image-browse-div {\n  padding: 20px;\n  border: solid 1px #bdcae0; }\n\n.control-label {\n  color: #989898; }\n\n.save-report-button {\n  color: #fff;\n  background-color: #1572ba;\n  width: 137px;\n  border-color: #1572ba; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/reports.page/reports.page.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ReportsPageComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var ReportsPageComponent = (function () {
    function ReportsPageComponent(services) {
        this.services = services;
        this.allQuestions = [];
        this.fontSizes = [];
        this.contentType = [
            {
                key: 'e',
                value: 'Embedded data',
            },
            {
                key: 'p',
                value: 'Questions',
            },
            {
                key: 'c',
                value: 'Contact',
            },
        ];
        this.reportsObject = {
            type: "e",
            criId: "",
            eData: "",
            contact: "",
            ques: "",
        };
        this.reportData = {
            pageContent: "",
            hasPrint: 0,
            piping: {
                hasPiping: 0,
                pipedQuestions: []
            }
        };
    }
    ReportsPageComponent.prototype.ngOnInit = function () {
        var _this = this;
        try {
            var survey = this.services.form.formObj;
            this.fontFamList = this.services.constants.fontFamList;
            if (survey.hasOwnProperty('reportPage') && survey.reportPage["pageContent"]) {
                var report = this.services.utils.cloneObject(survey.reportPage);
                this.reportData.pageContent = report.pageContent;
                this.reportData.hasPrint = report.hasPrint;
                this.reportData._id = report._id;
            }
            for (var i = 2; i <= 76; i = i + 2) {
                this.fontSizes.push(i + 'px');
            }
            this.allCriterias = this.services.form.formObj.getAllCriterias();
            var questions = this.services.form.formObj.getAllQuestions();
            questions.forEach(function (q) {
                if (q["fieldType"]["family"] !== 'statement') {
                    if (q["fieldType"]["family"] == 'matrix') {
                        for (var i = 0; i < q.fieldOptions.row.length; i++) {
                            var obj = {};
                            obj["id"] = q._id + '_' + q.fieldOptions.row[i]._id;
                            obj["title"] = _this.services.utils.getTextOutOfHtml(q.title) + ' - Row' + (i + 1);
                            _this.allQuestions.push(obj);
                        }
                    }
                    else {
                        var obj = {};
                        obj["id"] = q._id;
                        obj["title"] = _this.services.utils.getTextOutOfHtml(q.title);
                        _this.allQuestions.push(obj);
                    }
                }
            });
        }
        catch (err) {
            console.log(err);
        }
    };
    ReportsPageComponent.prototype.setColor = function (event) {
        try {
            //  console.log(event);
        }
        catch (err) {
            console.log(err);
        }
    };
    ReportsPageComponent.prototype.insertDataIntoReport = function () {
        try {
            var value = "";
            var tempValue = null;
            var type = this.reportsObject.type;
            if (type == 'e' && this.reportsObject.eData !== '') {
                value = encodeURIComponent(this.reportsObject.eData);
            }
            else if (type == 'p' && this.reportsObject.ques !== '') {
                value = this.reportsObject.ques;
                if (value.length > 24) {
                    tempValue = this.reportsObject.ques.split('_')[0];
                }
                else {
                    tempValue = null;
                }
            }
            else if (type == 'c' && this.reportsObject.contact !== '') {
                value = this.reportsObject.contact;
            }
            else {
                this.services.toastr.error('All fields must have a value');
                return;
            }
            var expression = '';
            if (type == 'p') {
                this.reportData.piping.hasPiping = 1;
                if (tempValue) {
                    this.reportData.piping.pipedQuestions.push({ isPiped: 1, _id: tempValue });
                }
                else {
                    this.reportData.piping.pipedQuestions.push({ isPiped: 1, _id: value });
                }
            }
            if (this.reportsObject.criId !== '') {
                expression = "$c{" + this.reportsObject.criId + "}{{" + type + "://" + value + "}}";
            }
            else {
                expression = "{{" + type + "://" + value + "}}";
            }
            tinymce.activeEditor.execCommand('mceInsertContent', true, expression);
        }
        catch (err) {
            console.log(err);
        }
    };
    ReportsPageComponent.prototype.saveReport = function () {
        var _this = this;
        try {
            this.reportData.pageContent = tinymce.activeEditor.getBody().innerHTML;
            if (this.reportData.pageContent.match(/\{\{p:\/\/([a-f0-9]{24}|[a-f0-9]{24}_[a-f0-9]{24})\}\}/g) && this.reportData.pageContent.match(/\{\{p:\/\/([a-f0-9]{24}|[a-f0-9]{24}_[a-f0-9]{24})\}\}/g).length) {
                this.reportData.piping.hasPiping = 1;
            }
            if (this.reportData.hasOwnProperty('_id')) {
                this.services.resource.updateReport(this.reportData._id, this.reportData).subscribe(function (data) {
                    _this.reportData._id = data.data._id;
                    _this.services.toastr.success('Report has been saved successfully.', 'Success');
                });
            }
            else {
                this.services.resource.saveReport(this.services.form.formObj.getId(), this.reportData).subscribe(function (data) {
                    _this.reportData._id = data.data._id;
                    _this.services.toastr.success('Report has been saved successfully.', 'Success');
                });
            }
        }
        catch (err) {
            console.log(err);
        }
    };
    ReportsPageComponent.prototype.setHasPrint = function (event) {
        try {
            if (event.target.checked) {
                this.reportData.hasPrint = '1';
            }
            else {
                this.reportData.hasPrint = '0';
            }
        }
        catch (err) {
            console.log(err);
        }
    };
    return ReportsPageComponent;
}());
ReportsPageComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-reports-page',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.advance/reports.page/reports.page.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.advance/reports.page/reports.page.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.advance/survey.advance.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _a || Object])
], ReportsPageComponent);

var _a;
//# sourceMappingURL=reports.page.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/survey.advance.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"inner-left-container\">\n\t<div class=\"advance_options\" *ngIf=\"!addOtherLanguagesButton\">\n\t\t<div>\n\t\t\t<div (click)=\"advanceSelected = 'quota'\" class=\"adv_item\" [ngClass]=\"(advanceSelected == 'quota' ? 'active' : '')\">\n\t\t\t\t<div class=\"adv_img quota_img\"></div>\n\t\t\t\t<div>Quota</div>\n\t\t\t</div>\n\t\t\t<div (click)=\"advanceSelected = 'tic-rule'\" class=\"adv_item\" [ngClass]=\"(advanceSelected == 'tic-rule' ? 'active' : '')\">\n\t\t\t\t<div class=\"adv_img tic_rule_img\"></div>\n\t\t\t\t<div>Ticketing Rules</div>\n\t\t\t</div>\n      <div (click)=\"advanceSelected = ''; (addOtherLanguagesButton = true)\" class=\"adv_item\" [ngClass]=\"(advanceSelected == 'language-translate' ? 'active' : '')\">\n        <div class=\"adv_img lang_translate_img\"></div>\n        <div>Languages</div>\n      </div>\n      <div (click)=\"advanceSelected = 'criteria'\" class=\"adv_item\" [ngClass]=\"(advanceSelected == 'criteria' ? 'active' : '')\">\n        <div class=\"adv_img criteria_img\"></div>\n        <div>Criteria</div>\n      </div>\n      <div (click)=\"advanceSelected = 'reports'\" class=\"adv_item\" [ngClass]=\"(advanceSelected == 'reports' ? 'active' : '')\">\n        <div class=\"adv_img reports_img\"></div>\n        <div>Reports</div>\n      </div>\n\t\t</div>\n\t</div>\n\t<div *ngIf=\"addOtherLanguagesButton\">\n\t\t<app-language-list (onEditLang)=\"onEditLanguage($event)\" (onBackLang)=\"advanceSelected = 'quota';addOtherLanguagesButton = !addOtherLanguagesButton\"></app-language-list>\n\t</div>\n\n</div>\n\n<div class=\"right-container rgt-padding\">\n\t<div *ngIf=\"(advanceSelected == 'quota')\">\n\t\t<app-quota></app-quota>\n\t</div>\n\t<div *ngIf=\"(advanceSelected == 'tic-rule')\">\n\t\t<app-ticket-rule></app-ticket-rule>\n\t</div>\n  <div *ngIf=\"(advanceSelected == 'language-translate')\">\n    <app-language-translate [langInpData]=\"langData\" (onSaveLang)=\"advanceSelected = ''\"></app-language-translate>\n  </div>\n  <div *ngIf=\"(advanceSelected == 'criteria')\">\n    <app-criteria></app-criteria>\n  </div>\n  <div *ngIf=\"(advanceSelected == 'reports')\">\n    <app-reports-page></app-reports-page>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/survey.advance.component.scss":
/***/ (function(module, exports) {

module.exports = ".advance_options .adv_item {\n  background-color: white;\n  border-radius: 4px;\n  display: inline-block;\n  -webkit-box-shadow: 0px 0px 10px 2px rgba(58, 55, 55, 0.08);\n          box-shadow: 0px 0px 10px 2px rgba(58, 55, 55, 0.08);\n  padding: 10px;\n  width: 125px;\n  height: 110px;\n  margin: 7px;\n  cursor: pointer;\n  text-align: center;\n  font-family: 'Helvetica Neue Medium'; }\n  .advance_options .adv_item .quota_img {\n    background: url(/assets/images/editSurvey/advance-icons/quota.svg);\n    background-repeat: no-repeat;\n    margin-left: 13px;\n    background-size: 70%;\n    margin-top: 8px;\n    vertical-align: bottom; }\n  .advance_options .adv_item .tic_rule_img {\n    background: url(/assets/images/editSurvey/advance-icons/ticketing-rules.svg);\n    background-repeat: no-repeat;\n    margin-left: 6px;\n    margin-top: 8px;\n    background-size: 80%;\n    vertical-align: bottom; }\n  .advance_options .adv_item .lang_translate_img {\n    background: url(/assets/images/editSurvey/advance-icons/language.svg);\n    background-repeat: no-repeat;\n    margin-left: 7px;\n    margin-top: 6px;\n    background-size: 80%;\n    vertical-align: bottom; }\n  .advance_options .adv_item .criteria_img {\n    background: url(/assets/images/editSurvey/advance-icons/criteria.svg);\n    background-repeat: no-repeat;\n    margin-left: 7px;\n    margin-top: 6px;\n    background-size: 80%;\n    vertical-align: bottom; }\n  .advance_options .adv_item .reports_img {\n    background: url(/assets/images/editSurvey/advance-icons/reports.png);\n    background-repeat: no-repeat;\n    margin-left: 7px;\n    margin-top: 6px;\n    background-size: 80%;\n    vertical-align: bottom; }\n  .advance_options .adv_item.active {\n  border: solid 1px #2392ed; }\n  .advance_options .adv_img {\n  cursor: pointer;\n  height: 45px;\n  display: inline-block;\n  width: 45px; }\n  .quota_upper_div {\n  background-color: white;\n  padding: 35px 20px 20px 20px;\n  margin: -40px -25px 0 -25px; }\n  .quota_upper_div .col-lg-4 {\n    padding-left: 0;\n    padding-right: 0;\n    margin-top: 10px; }\n  .quota_upper_div .quota_name {\n    width: calc(100% - 70px); }\n  .quota_upper_div .quota_input_radio label {\n    cursor: pointer; }\n  .quota_upper_div .quota_input_radio input[type=radio] {\n    display: none; }\n  .quota_upper_div .quota_input_radio input[type=radio]:checked + label {\n    background-color: #2392ed;\n    color: white; }\n  .quota_upper_div .quota_input_radio .response_type {\n    border: 1px solid #a5a5a5;\n    border-radius: 4px;\n    padding: 8px 14px;\n    margin-right: 7px;\n    margin-bottom: 0; }\n  .quota_upper_div .quota_input_radio .switch_to_first {\n    border: 1px solid #a5a5a5;\n    padding: 8px 14px;\n    border-top-left-radius: 4px;\n    border-bottom-left-radius: 4px; }\n  .quota_upper_div .quota_input_radio .switch_to_second {\n    border: 1px solid #a5a5a5;\n    padding: 8px 14px;\n    border-top-right-radius: 4px;\n    border-bottom-right-radius: 4px;\n    margin-left: -5px; }\n  @media (min-width: 1200px) {\n    .quota_upper_div .quota_switch_to_div {\n      text-align: right; } }\n  .quota_label {\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n  font-weight: 500; }\n  .quota_text_input {\n  height: 35px;\n  border-radius: 4px;\n  border: 1px solid #B3B1B1;\n  padding-left: 10px;\n  padding-right: 10px;\n  width: 100%;\n  font-size: 12px; }\n  .custom_select_div {\n  background-color: white;\n  display: inline-block;\n  width: 100%; }\n  .custom_select_box {\n  height: 35px;\n  width: 100%;\n  background-color: white;\n  border: 1px solid #B3B1B1;\n  border-radius: 4px;\n  font-size: 12px;\n  padding: 4px 30px 4px 8px;\n  background: url(/assets/images/editSurvey/dropdown-arrow.svg) no-repeat;\n  background-size: 14px;\n  background-position: right 10px center;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none; }\n  .custom_checkbox_grp {\n  margin-right: 7px;\n  margin-top: 8px;\n  display: inline-block; }\n  .custom_checkbox_grp input[type=checkbox] {\n    display: none; }\n  .custom_checkbox_grp .custom_checkbox_txt {\n    cursor: pointer;\n    font-family: 'Helvetica Neue Medium';\n    font-size: 12px;\n    font-weight: 500;\n    vertical-align: text-bottom; }\n  .custom_checkbox_grp input[type=checkbox] + .custom_checkbox_txt:before {\n    content: '';\n    background: url(/assets/images/editSurvey/uncheck.svg);\n    background-repeat: no-repeat;\n    height: 16px;\n    width: 16px;\n    position: absolute;\n    margin-left: -20px;\n    background-size: 90%; }\n  .custom_checkbox_grp input[type=checkbox]:checked + .custom_checkbox_txt:before {\n    content: '';\n    background: url(/assets/images/editSurvey/check.svg);\n    background-repeat: no-repeat;\n    height: 16px;\n    width: 16px;\n    position: absolute;\n    margin-left: -20px;\n    background-size: 90%; }\n  ::ng-deep .custom_checkbox_grp .custom_checkbox_txt p {\n  display: inline-block; }\n  .quota_lower_div {\n  margin-top: 25px;\n  background-color: white;\n  padding: 40px;\n  border-radius: 4px; }\n  .quota_lower_div .quota_limit {\n    width: calc(100% - 90px); }\n  .quota_lower_div .ques_div {\n    margin: 30px 0; }\n  .quota_lower_div .ques_div .quota_ques {\n      width: 70%;\n      display: inline-block;\n      margin-right: 5%;\n      font-family: 'Helvetica Neue Medium'; }\n  .quota_lower_div .ques_div .quota_sel_unsel {\n      width: 20%;\n      display: inline-block;\n      font-family: 'Helvetica Neue Medium'; }\n  .quota_lower_div .ques_div .options_div {\n      margin: 20px 0; }\n  .quota_lower_div .ques_div .and_or_div {\n      width: 100px;\n      font-family: 'Helvetica Neue Medium';\n      margin-left: 25px; }\n  .quota_lower_div .custom_add_btn {\n    background-color: #37d06a;\n    color: white;\n    width: 70px;\n    margin-left: 25px;\n    font-family: 'Helvetica Neue Medium';\n    font-size: 12px; }\n  .quota_lower_div .simple_quota .ques_sel {\n    font-family: 'Helvetica Neue Medium'; }\n  .quota_lower_div .simple_quota .opt_div {\n    margin: 10px 0; }\n  .quota_lower_div .footer_btns_div {\n    margin: 30px 0 10px 0;\n    text-align: right; }\n  .quota_lower_div .footer_btns_div button {\n      margin-left: 10px; }\n  .save_btn {\n  background-color: #2392ed;\n  color: white;\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n  padding: 6px 20px; }\n  .reset_btn {\n  background-color: white;\n  border: 1px solid #2392ed;\n  color: #2392ed;\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n  padding: 6px 20px; }\n  .quota_options_hr {\n  border-bottom: 1px dashed #b8b8b8;\n  margin-top: 45px; }\n  .quota_options,\n.and_or_div,\n.add_btn_div {\n  margin-top: -17px; }\n  .del_ques:after {\n  content: 'x';\n  border: 1px solid #ada9a9;\n  border-radius: 50%;\n  padding: 0 6px 3px 6px;\n  color: red;\n  margin-top: 4px;\n  background-color: white;\n  float: right; }\n  .del_ques {\n  cursor: pointer; }\n  .tic_div {\n  -webkit-box-shadow: 0px 0px 10px 2px #c1c1c1;\n          box-shadow: 0px 0px 10px 2px #c1c1c1; }\n  .tic_upper_div {\n  background-color: #f1f1f1;\n  padding: 30px; }\n  .tic_upper_div .tic_heading {\n    font-family: 'Helvetica Neue Medium';\n    font-size: 16px; }\n  .tic_upper_div .tic_sub_heading {\n    padding: 30px 0 0 0; }\n  .tic_upper_div .tic_sub_heading .view_exist_tic {\n      width: 40%;\n      margin-left: 10px;\n      min-width: 200px;\n      display: inline-block;\n      background-color: white;\n      border-radius: 4px; }\n  .tic_upper_div .tic_sub_heading .new_tic_rule_btn {\n      background-color: #68c169;\n      color: white;\n      font-size: 12px;\n      font-family: 'Helvetica Neue Medium';\n      vertical-align: top;\n      padding: 8px 14px; }\n  .tic_upper_div .tic_sub_heading .new_tic_rule_btn span {\n        margin-right: 8px; }\n  .tic_col {\n  margin-bottom: 18px; }\n  .margin_bottom8 {\n  margin-bottom: 8px; }\n  .margin_bottom3 {\n  margin-bottom: 3px; }\n  .tic_lower_div {\n  background-color: white;\n  padding: 30px; }\n  .tic_lower_div .tic_full_span {\n    width: 100%; }\n  .tic_lower_div .browse_btn {\n    margin-left: -25px;\n    padding: 6px 8px;\n    background-color: #e3e3e3; }\n  .tic_lower_div .neg_col_margin {\n    margin-left: -15px; }\n  .tic_lower_div .tic_body_label {\n    margin-top: 10px;\n    vertical-align: top;\n    display: inline-block; }\n  .tic_lower_div .tic_body_span {\n    width: 100%; }\n  .tic_lower_div .tic_body_span textarea {\n      border-radius: 4px;\n      width: 100%;\n      border: 1px solid #B3B1B1;\n      padding: 10px;\n      font-size: 12px;\n      resize: none; }\n  .tic_lower_div .tic_save_btn {\n    margin-right: 10px; }\n  .tic_lib_view {\n  height: calc(100vh - 150px);\n  overflow-y: auto;\n  padding: 40px; }\n  .req_astrk {\n  color: red; }\n  .tic_label {\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n  font-weight: 500; }\n  .tic_text_input {\n  height: 35px;\n  border-radius: 4px;\n  border: 1px solid #B3B1B1;\n  padding-left: 10px;\n  padding-right: 10px;\n  width: 100%;\n  font-size: 12px; }\n  .tic_folder_inp {\n  cursor: not-allowed; }\n  .del_btn {\n  background-color: #fd1a1a;\n  color: white;\n  font-size: 12px;\n  font-family: 'Helvetica Neue Medium';\n  vertical-align: top;\n  padding: 6px 20px;\n  margin-right: 10px; }\n  .add_del_icons {\n  cursor: pointer;\n  height: 20px;\n  display: inline-block;\n  width: 20px;\n  background-repeat: no-repeat;\n  margin-top: 8px;\n  margin-bottom: 8px; }\n  .add_new {\n  background: url(/assets/images/editSurvey/add.svg);\n  margin-right: 5px; }\n  .add_new:hover {\n  background: url(/assets/images/editSurvey/add-hover.svg); }\n  .del_existing {\n  background: url(/assets/images/editSurvey/minus.svg); }\n  .del_existing:hover {\n  background: url(/assets/images/editSurvey/minus-hover.svg); }\n  ::ng-deep .tic_watchers .ui-select-multiple {\n  min-height: 35px;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  border: 1px solid #B3B1B1;\n  padding-left: 10px;\n  padding-right: 10px;\n  width: 100%; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/survey.advance.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyAdvanceComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var SurveyAdvanceComponent = (function () {
    function SurveyAdvanceComponent(services, editService) {
        this.services = services;
        this.editService = editService;
        this.addOtherLanguagesButton = false;
    }
    SurveyAdvanceComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscription = this.editService.getSurveyData().subscribe(function (data) {
            if (!data)
                return;
            _this.advanceSelected = 'quota';
        });
    };
    SurveyAdvanceComponent.prototype.onEditLanguage = function (e) {
        this.langData = e;
        this.advanceSelected = 'language-translate';
    };
    SurveyAdvanceComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    return SurveyAdvanceComponent;
}());
SurveyAdvanceComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey-advance',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.advance/survey.advance.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.advance/survey.advance.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__edit_data_service__["a" /* EditDataService */]) === "function" && _b || Object])
], SurveyAdvanceComponent);

var _a, _b;
//# sourceMappingURL=survey.advance.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/ticket-rule/ticket-rule.component.css":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/ticket-rule/ticket-rule.component.html":
/***/ (function(module, exports) {

module.exports = "<!-- Ticketing tags are not handle by reactive forms. They are handled separately -->\n\n\n<div class=\"tic_div\" [formGroup]=\"ticketRuleForm\">\n  <div class=\"tic_upper_div\">\n    <div class=\"tic_heading\">\n      Create the rules to be applied to tickets when they would be generated. The rules created here can be used in detractor recovery logic\n    </div>\n    <div class=\"tic_sub_heading\">\n      <span class=\"tic_label\">\n        View/ Update existing:\n      </span>\n      <span class=\"view_exist_tic\">\n        <select class=\"custom_select_box\" #ticRuleSelect (change)=\"selectTicketRule(ticRuleSelect.value)\">\n          <option value=\"-1\">Select Ticket Rule</option>\n          <option [value]=\"item._id\" *ngFor=\"let item of this.allTicRules\">\n            {{item.name}}\n          </option>\n        </select>\n      </span>\n      <span class=\"pull-right\">\n        <button class=\"btn new_tic_rule_btn\" type=\"button\" (click)=\"newTicRule()\"><span>+</span>New Rule</button>\n      </span>\n    </div>\n  </div>\n  <div class=\"tic_lower_div\">\n    <div class=\"row\">\n      <div class=\"col-md-2 col-sm-3 tic_col text-right\">\n        <span class=\"tic_label\">Name:</span>\n        <span class=\"req_astrk\">*</span>\n      </div>\n      <div class=\"col-md-4 col-sm-9 tic_col\">\n        <span class=\"tic_full_span\">\n          <input type=\"text\" class=\"tic_text_input\" placeholder=\"Enter Name\" required formControlName=\"name\">\n        </span>\n      </div>\n      <div class=\"col-md-2 col-sm-3 tic_col text-right\" [hidden]=\"updateOrNew\">\n        <span class=\"tic_label\">Folder:</span>\n        <span class=\"req_astrk\">*</span>\n      </div>\n      <div class=\"col-md-3 col-sm-7 tic_col\" [hidden]=\"updateOrNew\">\n        <span class=\"tic_full_span\">\n          <input type=\"text\" class=\"tic_text_input tic_folder_inp\" required disabled=\"true\" [(ngModel)]=\"folderDetails.selFolderName\" [ngModelOptions]=\"{standalone: true}\">\n        </span>\n      </div>\n      <div class=\"col-md-1 col-sm-2 text-right\" [hidden]=\"updateOrNew\">\n        <button class=\"btn browse_btn\" type=\"button\" (click)=\"browseFolder()\">Browse</button>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-2 col-sm-3 tic_col text-right\">\n        <span class=\"tic_label\">Group:</span>\n        <span class=\"req_astrk\">*</span>\n      </div>\n      <div class=\"col-md-4 col-sm-9 tic_col\">\n        <span class=\"tic_full_span\">\n          <select class=\"custom_select_box\" #grpIdSelect required formControlName=\"grpId\" (change)=\"setOwnersForGroup(grpIdSelect.value)\">\n            <option value=\"\">Choose Group</option>\n            <option [value]=\"item._id\" *ngFor=\"let item of allUserGroupsObj?.res\">\n              {{item.name}}\n            </option>\n          </select>\n        </span>\n      </div>\n      <div class=\"col-md-2 col-sm-3 tic_col text-right\">\n        <span class=\"tic_label\">Owner:</span>\n        <span class=\"req_astrk\">*</span>\n      </div>\n      <div class=\"col-md-4 col-sm-9 tic_col\">\n        <span class=\"tic_full_span\">\n          <select class=\"custom_select_box\" required formControlName=\"assignee\">\n            <option value=\"\">Choose Owner</option>\n            <option [value]=\"item._id\" *ngFor=\"let item of ownersForSelGroup?.userList\">\n              {{item.name.first}}({{item.email}})\n            </option>\n          </select>\n        </span>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-2 col-sm-3 tic_col text-right\">\n        <span class=\"tic_label\">Watchers:</span>\n      </div>\n      <div class=\"col-md-4 col-sm-9 tic_col\">\n        <span class=\"tic_full_span tic_watchers\">\n          <ng-select [multiple]=\"true\" [items]=\"watchersArr\" [active]=\"selWatcherIds\" (selected)=\"selected($event)\" (removed)=\"removed($event)\" placeholder=\"Choose Watchers\">\n          </ng-select>\n        </span>\n      </div>\n      <div class=\"col-md-2 col-sm-3 tic_col text-right\">\n        <span class=\"tic_label\">Priority:</span>\n        <span class=\"req_astrk\">*</span>\n      </div>\n      <div class=\"col-md-4 col-sm-9 tic_col\">\n        <span class=\"tic_full_span\">\n          <select class=\"custom_select_box\" required formControlName=\"priority\">\n            <option value=\"\">Choose Priority</option>\n            <option value=\"2\">High</option>\n            <option value=\"1\">Medium</option>\n            <option value=\"0\">Low</option>\n          </select>\n        </span>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-2 col-sm-3 tic_col text-right\">\n        <span class=\"tic_label\">Link Survey:</span>\n      </div>\n      <div class=\"col-md-10 col-sm-9 tic_col\" formGroupName=\"linkedSurvey\">\n        <div class=\"row\">\n          <div class=\"col-md-12 col-sm-12\">\n            <div class=\"row\">\n              <div class=\"col-md-12 col-sm-12 margin_bottom3\">\n                <span class=\"custom_checkbox_grp\">\n                  <label>\n                    <input type=\"checkbox\" [(ngModel)]=\"linkedSurveyObj.feedback\" [ngModelOptions]=\"{standalone: true}\">\n                    <span class=\"custom_checkbox_txt\">\n                      Feedback Survey\n                    </span>\n                  </label>\n                </span>\n              </div>\n            </div>\n            <div class=\"row\" formGroupName=\"feedback\" *ngIf=\"linkedSurveyObj.feedback\">\n              <div class=\"col-md-8 col-sm-8 margin_bottom8\">\n                <select class=\"custom_select_box\" formControlName=\"surId\">\n                  <option value=\"\">Choose Survey</option>\n                  <option [value]=\"survey._id\" *ngFor=\"let survey of allSurveyList\" [innerHTML]=\"survey.title\"></option>\n                </select>\n              </div>\n              <div class=\"col-md-4 col-sm-4 margin_bottom8\">\n                <select class=\"custom_select_box\" formControlName=\"method\">\n                  <option value=\"\">Send By</option>\n                  <option [value]=\"method.value\" *ngFor=\"let method of triggerSurveyMethods\">{{method.text}}</option>\n                </select>\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-12 col-sm-12 margin_bottom3\">\n                <span class=\"custom_checkbox_grp\">\n                  <label>\n                    <input type=\"checkbox\" [(ngModel)]=\"linkedSurveyObj.satisfy\" [ngModelOptions]=\"{standalone: true}\">\n                    <span class=\"custom_checkbox_txt\">\n                      Satisfaction Survey\n                    </span>\n                  </label>\n                </span>\n              </div>\n            </div>\n            <div class=\"row\" formGroupName=\"satisfy\" *ngIf=\"linkedSurveyObj.satisfy\">\n              <div class=\"col-md-8 col-sm-8 margin_bottom8\">\n                <select class=\"custom_select_box\" formControlName=\"surId\">\n                  <option value=\"\">Choose Survey</option>\n                  <option [value]=\"survey._id\" *ngFor=\"let survey of allSurveyList\" [innerHTML]=\"survey.title\"></option>\n                </select>\n              </div>\n              <div class=\"col-md-4 col-sm-4 margin_bottom8\">\n                <select class=\"custom_select_box\" formControlName=\"method\">\n                  <option value=\"\">Send By</option>\n                  <option [value]=\"method.value\" *ngFor=\"let method of triggerSurveyMethods\">{{method.text}}</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-2 col-sm-3 tic_col text-right\">\n        <span class=\"tic_label\">Tags:</span>\n        <span class=\"req_astrk\">*</span>\n      </div>\n      <div class=\"col-md-10 col-sm-9 tic_col\">\n        <div class=\"row\" *ngFor=\"let item of tagsDataArr; index as tags_idx\">\n          <div class=\"col-md-10 col-sm-10\">\n            <div class=\"row\">\n              <div class=\"col-md-4 col-sm-4\">\n                <span class=\"tic_full_span\">\n                  <input type=\"text\" class=\"tic_text_input\" required placeholder=\"Enter Tag\" [(ngModel)]=\"item.name\" [ngModelOptions]=\"{standalone: true}\">\n                </span>\n              </div>\n              <div class=\"col-md-4 col-sm-4\">\n                <span class=\"tic_full_span\">\n                  <select class=\"custom_select_box\" required [(ngModel)]=\"item.type\" [ngModelOptions]=\"{standalone: true}\" (change)=resetTagId(tags_idx)>\n                    <option value=\"\">Choose Tag</option>\n                    <option [value]=\"item.value\" *ngFor=\"let item of ticketTags?.types\">{{item.text}}</option>\n                  </select>\n                </span>\n              </div>\n              <div class=\"col-md-4 col-sm-4\">\n                <span class=\"tic_full_span\">\n                  <span *ngIf=\"item.type == 'contactsData'\">\n                    <select class=\"custom_select_box\" required [(ngModel)]=\"item.id\" [ngModelOptions]=\"{standalone: true}\">\n                      <option value=\"\">Choose Contact</option>\n                      <option [value]=\"contact.value\" *ngFor=\"let contact of ticketTags?.contactFields\">\n                        {{contact.text}}\n                      </option>\n                    </select>\n                  </span>\n                  <span *ngIf=\"item.type == 'questions'\">\n                    <select class=\"custom_select_box\" required [(ngModel)]=\"item.id\" [ngModelOptions]=\"{standalone: true}\">\n                      <option value=\"\">Choose Question</option>\n                      <option [value]=\"ques._id\" *ngFor=\"let ques of ticketTags?.surveyQuestions\" [innerHTML]=\"ques.title | swapMongoIdAndQuesNum : true : ques._id\">\n                      </option>\n                    </select>\n                  </span>\n                  <span *ngIf=\"item.type == 'embedData' || item.type == 'manualData'\">\n                    <input type=\"text\" class=\"tic_text_input\" required placeholder=\"Custom Data\" [(ngModel)]=\"item.id\" [ngModelOptions]=\"{standalone: true}\">\n                  </span>\n                </span>\n              </div>\n            </div>\n          </div>\n          <div class=\"col-md-2 col-sm-2 text-right\">\n            <span [hidden]=\"!(tagsDataArr.length - 1 == tags_idx)\">\n              <span class=\"add_new add_del_icons\" title=\"Add New Tag\" (click)=\"addNewTag()\"></span>\n            </span>\n            <span>\n              <span class=\"del_existing add_del_icons\" title=\"Remove Tag\" (click)=\"removeTag(tags_idx)\"></span>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-2 col-sm-3 tic_col text-right\">\n        <span class=\"tic_label tic_body_label\">Ticket Body:</span>\n        <span class=\"req_astrk\">*</span>\n      </div>\n      <div class=\"col-md-10 col-sm-9 tic_col\">\n        <span class=\"tic_body_span\">\n          <textarea rows=\"6\" required placeholder=\"Enter Message\" formControlName=\"defText\">\n          </textarea>\n        </span>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12 text-right\">\n        <button type=\"button\" class=\"btn tic_save_btn save_btn\" [disabled]=\"ticketRuleForm.invalid\" (click)=\"saveOrUpdateTicketRule()\">\n          {{updateOrNew ? 'Update' : 'Save'}}\n        </button>\n        <span [hidden]=\"!updateOrNew\">\n          <button type=\"button\" class=\"btn del_btn\" (click)=\"deleteTicketRule()\">Delete</button>\n        </span>\n        <button type=\"button\" class=\"btn reset_btn\" (click)=\"resetTicketRule()\">Reset</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #selFolderModal>\n  <div class=\"modal-header\">\n    <h4 class=\"modal-title pull-left\">Select Folder</h4>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"hideModal()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body tic_lib_view\">\n    <app-libraries [libData]=\"{'type': 'rules', selType: 'folder'}\" (onFolderSelect)=\"onFolderSelect($event)\"></app-libraries>\n  </div>\n</ng-template>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/ticket-rule/ticket-rule.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TicketRuleComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ticket_rule_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/ticket-rule/ticket-rule.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_ngx_bootstrap_modal__ = __webpack_require__("./node_modules/ngx-bootstrap/modal/index.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var TicketRuleComponent = (function () {
    function TicketRuleComponent(ticRuleService, services, modalService) {
        this.ticRuleService = ticRuleService;
        this.services = services;
        this.modalService = modalService;
        this.updateOrNew = false; //update--> true, new--> false
        this.ticketTags = {
            types: [],
            contactFields: [],
            surveyQuestions: []
        };
        this.linkedSurveyObj = {
            feedback: false,
            satisfy: false
        };
        this.tagsDataArr = [];
        this.folderDetails = {};
        this.watchersArr = [];
        this.selWatcherIds = [];
    }
    TicketRuleComponent.prototype.openModal = function (template) {
        this.modalRef = this.modalService.show(template, { class: 'modal-lg' });
    };
    TicketRuleComponent.prototype.hideModal = function () {
        this.modalRef.hide();
    };
    TicketRuleComponent.prototype.ngOnInit = function () {
        this.getAllTicketRules();
        this.getUsers();
        this.getAllsurveys();
        this.ticketTags.types = this.services.constants.tagTypes;
        this.ticketTags.contactFields = this.services.constants.contactFields;
        this.ticketTags.surveyQuestions = this.services.form.getAllQuestions().filter(function (item) { return (item.type == 'q'); }); //this will get only questions (excluding statements)
        this.triggerSurveyMethods = this.ticRuleService.triggerSurveyMethods;
        this.newTicRule();
        console.log(this.ticketRuleForm);
    };
    TicketRuleComponent.prototype.getAllTicketRules = function () {
        var _this = this;
        this.services.resource.getTicketRules().subscribe(function (data) {
            _this.allTicRules = data;
            console.log(_this.allTicRules);
        }, function (err) {
            console.log('All Tickets could not be fetched');
        });
    };
    TicketRuleComponent.prototype.getAllsurveys = function () {
        var _this = this;
        this.services.resource.getSurveyList().subscribe(function (data) {
            _this.allSurveyList = data.data.list;
        }, function (err) {
            console.log('Complete Survey List could not be fetched');
        });
    };
    TicketRuleComponent.prototype.getUserGroups = function (usersArr) {
        var _this = this;
        this.services.resource.getUserGroups().subscribe(function (data) {
            _this.allUserGroupsObj = data;
            console.log(_this.allUserGroupsObj);
            var groupsArr = [];
            _this.allUserGroupsObj.res.forEach(function (item) {
                groupsArr.push({
                    text: item.name,
                    id: item._id,
                    type: 'Groups'
                });
            });
            _this.makeWatchersArr(usersArr, groupsArr);
        }, function (err) {
            console.log('User Groups could not be fetched');
        });
    };
    TicketRuleComponent.prototype.getUsers = function () {
        var _this = this;
        this.services.resource.getUsers().subscribe(function (data) {
            _this.allUsersObj = data;
            console.log(_this.allUsersObj);
            var usersArr = [];
            _this.allUsersObj.userList.forEach(function (item) {
                usersArr.push({
                    text: item.name.first + ' ' + item.name.last,
                    id: item._id,
                    type: 'Users'
                });
            });
            _this.getUserGroups(usersArr);
        }, function (err) {
            console.log('Users could not be fetched');
        });
    };
    TicketRuleComponent.prototype.makeWatchersArr = function (usersArr, groupsArr) {
        var temp = [];
        var children = [];
        usersArr.forEach(function (item) {
            children.push(item);
        });
        temp.push({
            id: 1,
            text: 'Users',
            children: children
        });
        children = [];
        groupsArr.forEach(function (item) {
            children.push(item);
        });
        temp.push({
            id: 2,
            text: 'Groups',
            children: children
        });
        this.watchersArr = temp;
    };
    TicketRuleComponent.prototype.selected = function (value) {
        var temp = [];
        var idx = 0;
        while (idx < this.selWatcherIds.length) {
            temp.push(this.selWatcherIds[idx]);
            idx++;
        }
        var prevIdx = this.services.utils.findIndex(temp, 'id', value.id);
        if (prevIdx > -1) {
            this.selWatcherIds = temp;
            return false;
        }
        temp.push({
            text: value.text,
            id: value.id
        });
        if (value.parent.text == 'Groups') {
            this.ticketRuleForm.get('watcherGroups').push(new __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormControl"](value.id));
        }
        else if (value.parent.text == 'Users') {
            this.ticketRuleForm.get('watcherUsers').push(new __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormControl"](value.id));
        }
        this.selWatcherIds = temp;
    };
    TicketRuleComponent.prototype.removed = function (value) {
        var obj = this.ticketRuleForm.getRawValue();
        var gIdx = obj.watcherGroups.indexOf(value.id);
        if (gIdx > -1) {
            this.ticketRuleForm.get('watcherGroups').removeAt(gIdx);
        }
        else {
            var uIdx = obj.watcherUsers.indexOf(value.id);
            if (uIdx > -1) {
                this.ticketRuleForm.get('watcherUsers').removeAt(uIdx);
            }
        }
        var temp = [];
        var idx = 0;
        while (idx < this.selWatcherIds.length) {
            temp.push(this.selWatcherIds[idx]);
            idx++;
        }
        var prevIdx = this.services.utils.findIndex(temp, 'id', value.id);
        if (prevIdx > -1) {
            temp.splice(prevIdx, 1);
            this.selWatcherIds = temp;
        }
    };
    TicketRuleComponent.prototype.getOwnersForGroup = function (grpId) {
        var _this = this;
        this.services.resource.getUsersForGroupId(grpId).subscribe(function (data) {
            _this.ownersForSelGroup = data;
            console.log(_this.ownersForSelGroup);
        }, function (err) {
            _this.services.toastr.error(err._body);
        });
    };
    TicketRuleComponent.prototype.setOwnersForGroup = function (grpId) {
        if (grpId == '') {
            this.ownersForSelGroup = [];
        }
        else {
            this.getOwnersForGroup(grpId);
        }
        this.ticketRuleForm.get('assignee').patchValue('');
    };
    TicketRuleComponent.prototype.selectTicketRule = function (id) {
        console.log(id);
        if (id == -1) {
            this.newTicRule();
            return false;
        }
        var idx = this.services.utils.findIndex(this.allTicRules, '_id', id);
        if (idx > -1) {
            this.editTicketFormJSON = this.services.utils.cloneObject(this.allTicRules[idx]);
            this.editTicketFormJSON = this.services.utils.extendObjectValue(this.editTicketFormJSON, this.ticRuleService.ticketRuleJSON);
            this.ticketRuleForm = this.ticRuleService.buildTicketRuleFormGroup(this.editTicketFormJSON);
            this.selectOrResetTicRule();
            this.updateOrNew = true;
            console.log(this.ticketRuleForm);
        }
    };
    TicketRuleComponent.prototype.selectOrResetTicRule = function () {
        if (this.editTicketFormJSON.grpId != '') {
            this.getOwnersForGroup(this.editTicketFormJSON.grpId);
        }
        this.setSelectedWatcherIds();
        this.makeTagsDataArr();
        if (this.editTicketFormJSON.linkedSurvey.feedback.surId) {
            this.linkedSurveyObj.feedback = true;
        }
        else {
            this.linkedSurveyObj.feedback = false;
            this.ticketRuleForm.get('linkedSurvey.feedback.surId').patchValue('');
            this.ticketRuleForm.get('linkedSurvey.feedback.method').patchValue('');
        }
        if (this.editTicketFormJSON.linkedSurvey.satisfy.surId) {
            this.linkedSurveyObj.satisfy = true;
        }
        else {
            this.linkedSurveyObj.satisfy = false;
            this.ticketRuleForm.get('linkedSurvey.satisfy.surId').patchValue('');
            this.ticketRuleForm.get('linkedSurvey.satisfy.method').patchValue('');
        }
    };
    TicketRuleComponent.prototype.resetTicketRule = function () {
        this.ticketRuleForm = this.ticRuleService.buildTicketRuleFormGroup(this.editTicketFormJSON);
        if (this.editTicketFormJSON.folderId == '') {
            this.folderDetails = {};
        }
        this.selectOrResetTicRule();
    };
    TicketRuleComponent.prototype.setSelectedWatcherIds = function () {
        var _this = this;
        var selWatcherIds = [];
        this.editTicketFormJSON.watcherUsers.forEach(function (item) {
            var idx = _this.services.utils.findIndex(_this.allUsersObj.userList, '_id', item);
            if (idx > -1) {
                var name = _this.allUsersObj.userList[idx].name.first + ' ' + _this.allUsersObj.userList[idx].name.last;
                selWatcherIds.push({
                    text: name,
                    id: item
                });
            }
        });
        this.editTicketFormJSON.watcherGroups.forEach(function (item) {
            var idx = _this.services.utils.findIndex(_this.allUserGroupsObj.res, '_id', item);
            if (idx > -1) {
                var name = _this.allUserGroupsObj.res[idx].name;
                selWatcherIds.push({
                    text: name,
                    id: item
                });
            }
        });
        this.selWatcherIds = selWatcherIds;
    };
    TicketRuleComponent.prototype.makeTagsDataArr = function () {
        this.tagsDataArr = [];
        for (var type in this.editTicketFormJSON.ticketData) {
            for (var item in this.editTicketFormJSON.ticketData[type]) {
                var obj = this.editTicketFormJSON.ticketData[type][item];
                this.addNewTag(obj.name, type, obj.id);
            }
        }
        if (this.tagsDataArr.length == 0) {
            this.addNewTag();
        }
        console.log(this.tagsDataArr);
    };
    TicketRuleComponent.prototype.addNewTag = function (name, type, id) {
        this.tagsDataArr.push({
            name: (name ? name : ''),
            type: (type ? type : ''),
            id: (id ? id : '')
        });
    };
    TicketRuleComponent.prototype.removeTag = function (idx) {
        if (this.tagsDataArr.length == 1) {
            this.services.toastr.warning('Atleast one tag is required.', 'Cannot be removed');
        }
        else {
            this.tagsDataArr.splice(idx, 1);
        }
    };
    TicketRuleComponent.prototype.resetTagId = function (idx) {
        this.tagsDataArr[idx].id = '';
    };
    TicketRuleComponent.prototype.browseFolder = function () {
        this.openModal(this.selFolderModal);
    };
    TicketRuleComponent.prototype.onFolderSelect = function (e) {
        this.hideModal();
        this.folderDetails = e;
        this.ticketRuleForm.get('folderId').patchValue(e.selFolderId);
        if (e.libType == 1) {
            this.ticketRuleForm.get('owner.typeOf').patchValue("MyLibrary");
            this.ticketRuleForm.get('owner.id').patchValue('');
        }
        else {
            this.ticketRuleForm.get('owner.typeOf').patchValue("GroupLibrary");
            this.ticketRuleForm.get('owner.id').patchValue(e.grpId);
        }
    };
    TicketRuleComponent.prototype.makeTicketTags = function () {
        var ticketTags = {
            contactsData: [],
            embedData: [],
            manualData: [],
            questions: []
        };
        for (var _i = 0, _a = this.tagsDataArr; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.name == '' || item.id == '') {
                return {};
            }
            if (item.type == 'contactsData') {
                ticketTags['contactsData'].push({
                    name: item.name,
                    id: item.id
                });
            }
            else if (item.type == 'embedData') {
                ticketTags['embedData'].push({
                    name: item.name,
                    id: item.id
                });
            }
            else if (item.type == 'manualData') {
                ticketTags['manualData'].push({
                    name: item.name,
                    id: item.id
                });
            }
            else if (item.type == 'questions') {
                ticketTags['questions'].push({
                    name: item.name,
                    id: item.id
                });
            }
        }
        return ticketTags;
    };
    TicketRuleComponent.prototype.deleteTicketRule = function () {
        var _this = this;
        this.services.alert({
            title: '<p class="sweetalert_title">Are you sure you want to delete this Ticket Rule?</p>',
            text: "",
            type: 'warning',
            showCancelButton: true,
            buttonsStyling: false,
            confirmButtonClass: 'sweetalert_apply_btn',
            cancelButtonClass: 'sweetalert_cancel_btn',
            confirmButtonText: 'Yes, delete it!'
        }).then(function (result) {
            if (result.value) {
                var ticRuleId_1 = _this.editTicketFormJSON._id;
                _this.services.resource.deleteTicketRule(ticRuleId_1).subscribe(function (data) {
                    var idx = _this.services.utils.findIndex(_this.allTicRules, '_id', ticRuleId_1);
                    if (idx > -1) {
                        _this.allTicRules.splice(idx, 1);
                        _this.services.toastr.success('Ticket Rule has been deleted successfully.', 'Deleted');
                        _this.newTicRule();
                    }
                }, function (err) {
                    _this.services.toastr.error('Error in delting ticket rule.');
                });
            }
        });
    };
    TicketRuleComponent.prototype.newTicRule = function () {
        this.editTicketFormJSON = this.services.utils.cloneObject(this.ticRuleService.ticketRuleJSON);
        this.ticketRuleForm = this.ticRuleService.buildTicketRuleFormGroup(this.editTicketFormJSON);
        this.makeTagsDataArr();
        this.selWatcherIds = [];
        this.folderDetails = {};
        this.ticRuleSelect.nativeElement.value = -1;
        this.linkedSurveyObj.feedback = false;
        this.linkedSurveyObj.satisfy = false;
        this.updateOrNew = false;
    };
    TicketRuleComponent.prototype.saveOrUpdateTicketRule = function () {
        var _this = this;
        var res = this.ticketRuleForm.getRawValue();
        if (this.updateOrNew == false) {
            if (res.folderId == '') {
                this.services.toastr.error('Please select a folder to save ticket.', 'Folder not selected');
                return false;
            }
            delete res._id;
            delete res.linkedSurvey.feedback._id;
            delete res.linkedSurvey.satisfy._id;
            if (res.owner.id == '') {
                delete res.owner.id;
            }
        }
        else {
            delete res.folderId;
        }
        res['ticketData'] = this.makeTicketTags();
        res['tags'] = [];
        for (var type in res['ticketData']) {
            if (res['ticketData'][type].length == 0) {
                delete res['ticketData'][type];
            }
            else {
                res['tags'].push(type);
            }
        }
        if (res['tags'].length == 0) {
            this.services.toastr.error('Please enter Tag Details.', 'Tags Required');
            return false;
        }
        if (this.linkedSurveyObj.feedback == false) {
            res.linkedSurvey.feedback = {};
        }
        else {
            if (res.linkedSurvey.feedback.surId == '' || res.linkedSurvey.feedback.method == '') {
                this.services.toastr.error('Please fill respective details for feedback survey.');
                return false;
            }
        }
        if (this.linkedSurveyObj.satisfy == false) {
            res.linkedSurvey.satisfy = {};
        }
        else {
            if (res.linkedSurvey.satisfy.surId == '' || res.linkedSurvey.satisfy.method == '') {
                this.services.toastr.error('Please fill respective details for satisfation survey.');
                return false;
            }
        }
        console.log(res);
        if (this.updateOrNew == false) {
            this.services.resource.saveTicketRule(res).subscribe(function (data) {
                _this.allTicRules.push(data);
                _this.services.toastr.success('Ticket Rule has been saved successfully.', 'Saved');
                _this.newTicRule();
            }, function (err) {
                _this.services.toastr.error('Error in saving Ticket Rule.');
            });
        }
        else {
            var idx_1 = this.services.utils.findIndex(this.allTicRules, '_id', res._id);
            this.services.resource.updateTicketRule(res._id, res).subscribe(function (data) {
                _this.allTicRules.splice(idx_1, 1, data);
                _this.services.toastr.success('Ticket Rule has been updated successfully.', 'Updated');
                _this.newTicRule();
            }, function (err) {
                _this.services.toastr.error('Error in updating Ticket Rule.');
            });
        }
    };
    return TicketRuleComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('selFolderModal'),
    __metadata("design:type", Object)
], TicketRuleComponent.prototype, "selFolderModal", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('ticRuleSelect'),
    __metadata("design:type", Object)
], TicketRuleComponent.prototype, "ticRuleSelect", void 0);
TicketRuleComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-ticket-rule',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.advance/ticket-rule/ticket-rule.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.advance/survey.advance.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.advance/ticket-rule/ticket-rule.component.css")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__ticket_rule_service__["a" /* TicketRuleService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__ticket_rule_service__["a" /* TicketRuleService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_4_ngx_bootstrap_modal__["a" /* BsModalService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4_ngx_bootstrap_modal__["a" /* BsModalService */]) === "function" && _c || Object])
], TicketRuleComponent);

var _a, _b, _c;
//# sourceMappingURL=ticket-rule.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.advance/ticket-rule/ticket-rule.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TicketRuleService; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_s2c_form_builder_service__ = __webpack_require__("./src/app/shared/services/s2c.form.builder.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var TicketRuleService = (function () {
    function TicketRuleService(_fb, s2cFB) {
        this._fb = _fb;
        this.s2cFB = s2cFB;
        this.ticketRuleJSON = {
            _id: '',
            name: '',
            folderId: '',
            owner: {
                typeOf: '',
                id: ''
            },
            grpId: '',
            assignee: '',
            watcherUsers: [],
            watcherGroups: [],
            priority: '',
            linkedSurvey: {
                feedback: {
                    surId: '',
                    method: '',
                    _id: ''
                },
                satisfy: {
                    surId: '',
                    method: '',
                    _id: ''
                }
            },
            tags: [],
            ticketData: {},
            defText: '',
        };
        this.triggerSurveyMethods = [
            {
                text: "Manual",
                value: 2
            }
        ];
    }
    TicketRuleService.prototype.buildTicketRuleFormGroup = function (ticketRuleJSON) {
        console.log(ticketRuleJSON);
        var ticketRuleForm = this._fb.group({
            _id: '',
            name: '',
            folderId: '',
            owner: this._fb.group({
                typeOf: '',
                id: ''
            }),
            grpId: '',
            assignee: '',
            watcherUsers: this._fb.array([]),
            watcherGroups: this._fb.array([]),
            priority: '',
            linkedSurvey: this._fb.group({
                feedback: this._fb.group({
                    surId: '',
                    method: '',
                    _id: ''
                }),
                satisfy: this._fb.group({
                    surId: '',
                    method: '',
                    _id: ''
                }),
            }),
            tags: this._fb.array([]),
            ticketData: this._fb.group({}),
            defText: '',
        });
        var idx = 0;
        while (idx < ticketRuleJSON.watcherGroups.length) {
            ticketRuleForm.get('watcherGroups').push(new __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormControl"](''));
            idx++;
        }
        idx = 0;
        while (idx < ticketRuleJSON.watcherUsers.length) {
            ticketRuleForm.get('watcherUsers').push(new __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormControl"](''));
            idx++;
        }
        //tags and ticketData is not formed in formGroup.
        ticketRuleForm.patchValue(ticketRuleJSON);
        console.log(ticketRuleForm);
        return ticketRuleForm;
    };
    return TicketRuleService;
}());
TicketRuleService = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormBuilder"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormBuilder"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_s2c_form_builder_service__["a" /* S2cFormBuilderService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_s2c_form_builder_service__["a" /* S2cFormBuilderService */]) === "function" && _b || Object])
], TicketRuleService);

var _a, _b;
//# sourceMappingURL=ticket-rule.service.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.copy.question/survey.copy.question.component.css":
/***/ (function(module, exports) {

module.exports = ".margin_row0{\n  margin: 0 0 30px 0;\n}\n\n.copy_move_header{\n  padding: 10px 30px;\n}\n\n.copy_ques_text{\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n\n}\n\n.copy_move_pos .copy_move_inp > .inner_copy_move{\n  padding: 7px;\n}\n\n.copy_ques_btns_div{\n  padding: 0 20px;\n}\n\n.copyBodyContainer{\n  margin: 10px;\n  border: 1px solid #EBEBEB;\n  border-radius: 3px;\n  padding: 10px;\n}\n\n.copyBodyContainer .tab_radio_inp > .inner_tab_radio_inp.active{\n    background-color: #f3f3f2;\n    color: #1a1d1f;\n}\n\n.copyBodyContainer .tab_radio_inp > .inner_tab_radio_inp{\n  color: #4f5b63;\n}\n\n.copyBodyContainer .tab_radio_inp {\n    border: 1px solid #dcdccb;\n}\n\n.copyBodyContainer .copy_move_header {\n    padding: 10px 10px;\n}\n\n.copyBodyContainer .tab_radio_inp> .inner_tab_radio_inp:not(:last-child) {\n    border-right: 0px;\n}\n\n.copyButtons .s2c_cancel_btn{\n    width: 49%;\n    font-size: 14px;\n    line-height: 1.0;\n    font-family: 'Helvetica';\n}\n\n.copyButtons .s2c_save_btn{\n  width: 48%;\n  float: right;\n  line-height: 1.0;\n  margin-right: -5px;\n  font-size: 14px;\n  font-family: 'Helvetica';\n}\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.copy.question/survey.copy.question.component.html":
/***/ (function(module, exports) {

module.exports = "<app-question-actions-header [inpData]=\"{text: 'Copy/Move Question', icon: 'duplicate.svg'}\"></app-question-actions-header>\n<div class=\"copyBodyContainer\">\n  <div class=\"row margin_row0\">\n    <div class=\"col-md-12 col-sm-12 col-xs-12 copy_move_header\">\n      <div class=\"tab_radio_inp\">\n        <label class=\"inner_tab_radio_inp\" [ngClass]=\"copyMoveQuesObj.action == 'copy' ? 'active' : ''\">\n          <input type=\"radio\" name=\"copyOrMove\" value=\"copy\" [(ngModel)]=\"copyMoveQuesObj.action\">\n          <span>Copy</span>\n        </label>\n        <label class=\"inner_tab_radio_inp\" [ngClass]=\"copyMoveQuesObj.action == 'move' ? 'active' : ''\">\n          <input type=\"radio\" name=\"copyOrMove\" value=\"move\" [(ngModel)]=\"copyMoveQuesObj.action\">\n          <span>Move</span>\n        </label>\n      </div>\n    </div>\n  </div>\n  <div class=\"row margin_row0\">\n    <div class=\"col-md-4 col-sm-4 col-xs-4\">\n      <div class=\"copy_ques_text\">\n        Page:\n      </div>\n    </div>\n    <div class=\"col-md-8 col-sm-8 col-xs-8\">\n      <div>\n        <span class=\"custom_select_div\">\n          <select class=\"form-control width100\" [(ngModel)]=\"copyMoveQuesObj.toPageId\" (change)=\"setPageIdInCopyOrMoveQues()\">\n            <option *ngFor=\"let pageObj of formObj.pageFields; trackBy: services.utils.trackByIndex;\" [value]=\"pageObj._id\">Page {{allPagesAndQues.data[pageObj._id].count}}</option>\n          </select>\n        </span>\n      </div>\n    </div>\n  </div>\n  <div class=\"row margin_row0\" *ngIf=\"allPagesAndQues.data[copyMoveQuesObj.toPageId].ques.length != 0\">\n    <div class=\"col-md-4 col-sm-4 col-xs-4\">\n      <div class=\"copy_ques_text\">\n        Position:\n      </div>\n    </div>\n    <div class=\"col-md-8 col-sm-8 col-xs-8 copy_move_pos\">\n      <div class=\"tab_radio_inp\">\n        <label class=\"inner_tab_radio_inp\" [ngClass]=\"copyMoveQuesObj.pos == 'before' ? 'active' : ''\">\n          <input type=\"radio\" name=\"copyPos\" value=\"before\" [(ngModel)]=\"copyMoveQuesObj.pos\">\n          <span>Before</span>\n        </label>\n        <label class=\"inner_tab_radio_inp\" [ngClass]=\"copyMoveQuesObj.pos == 'after' ? 'active' : ''\">\n          <input type=\"radio\" name=\"copyPos\" value=\"after\" [(ngModel)]=\"copyMoveQuesObj.pos\">\n          <span>After</span>\n        </label>\n      </div>\n    </div>\n  </div>\n  <div class=\"row margin_row0\" *ngIf=\"allPagesAndQues.data[copyMoveQuesObj.toPageId].ques.length != 0\">\n    <div class=\"col-md-4 col-sm-4 col-xs-4\">\n      <div class=\"copy_ques_text\">\n        Question:\n      </div>\n    </div>\n    <div class=\"col-md-8 col-sm-8 col-xs-8\">\n      <div>\n        <span class=\"custom_select_div\" *ngIf=\"copyMoveQuesObj.toPageId != ''\">\n          <select class=\"form-control width100\" [(ngModel)]=\"copyMoveQuesObj.toRefQuesId\">\n            <option *ngFor=\"let ques of allPagesAndQues.data[copyMoveQuesObj.toPageId].ques; trackBy services.utils.trackByIndex;\" [value]=\"ques._id\" [innerHTML]=\"(ques.count ? ques.count + '. ' + ques.title : ques.title)\"></option>\n          </select>\n        </span>\n      </div>\n    </div>\n  </div>\n</div>\n  <div class=\"row margin_row0 copyButtons\">\n    <div class=\"copy_ques_btns_div\">\n      <button type=\"button\" class=\"btn s2c_save_btn\" (click)=\"copyOrMoveQuestion()\">{{(copyMoveQuesObj.action == 'copy') ? 'Copy' : 'Move'}}</button>\n      <button type=\"button\" class=\"btn s2c_cancel_btn\" (click)=\"cancelCopyOrMoveQuestion()\">Cancel</button>\n    </div>\n  </div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.copy.question/survey.copy.question.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyCopyQuestionComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var SurveyCopyQuestionComponent = (function () {
    function SurveyCopyQuestionComponent(editDataService, services) {
        this.editDataService = editDataService;
        this.services = services;
        // <copyInputData> = {
        //   fromPId: '',
        //   quesId: '',
        //   quesIdx: ''
        // }
        this.onCancel = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.onSuccess = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.copyMoveQuesObj = {
            action: 'copy',
            fromPageId: '',
            toPageId: '',
            toRefQuesId: '',
            pos: '' //<'before','after'>
        };
    }
    SurveyCopyQuestionComponent.prototype.ngOnInit = function () {
        this.formObj = this.services.form.formObj;
        this.allPagesAndQues = this.services.form.getAllPagesAndQuestions();
        this.copyMoveQuesObj.action = 'copy';
        this.copyMoveQuesObj.fromPageId = this.copyInputData.fromPId;
        this.copyMoveQuesObj.toPageId = Object.keys(this.allPagesAndQues.data)[0];
        this.copyMoveQuesObj.pos = "before";
        this.setPageIdInCopyOrMoveQues();
    };
    SurveyCopyQuestionComponent.prototype.setPageIdInCopyOrMoveQues = function () {
        this.copyMoveQuesObj.toRefQuesId = (this.allPagesAndQues.data[this.copyMoveQuesObj.toPageId].ques[0] ? this.allPagesAndQues.data[this.copyMoveQuesObj.toPageId].ques[0]._id : null);
    };
    SurveyCopyQuestionComponent.prototype.cancelCopyOrMoveQuestion = function () {
        this.onCancel.emit();
    };
    SurveyCopyQuestionComponent.prototype.copyOrMoveQuestion = function () {
        var refQuesId = ''; // this is ref ques id to be sent at backend.
        var toPIdx = this.allPagesAndQues.data[this.copyMoveQuesObj.toPageId].count - 1;
        var fromPIdx = this.allPagesAndQues.data[this.copyMoveQuesObj.fromPageId].count - 1;
        var quesArr = this.allPagesAndQues.data[this.copyMoveQuesObj.toPageId].ques;
        var toQIdx = -1; //toQIdx = -1 for pages which have no questions
        if (this.copyMoveQuesObj.toRefQuesId != null) {
            toQIdx = this.services.utils.findIndex(quesArr, '_id', this.copyMoveQuesObj.toRefQuesId);
        }
        if (this.copyMoveQuesObj.pos == "after") {
            refQuesId = ((this.copyMoveQuesObj.toRefQuesId != null) ? this.copyMoveQuesObj.toRefQuesId : null);
        }
        else if (this.copyMoveQuesObj.pos == "before") {
            if (toQIdx == 0 || toQIdx == -1) {
                refQuesId = null;
            }
            else {
                refQuesId = quesArr[toQIdx - 1]._id;
            }
        }
        if (this.copyMoveQuesObj.action == 'copy') {
            this.copyQuestion(fromPIdx, toPIdx, refQuesId, toQIdx);
        }
        else if (this.copyMoveQuesObj.action == 'move') {
            this.moveQuestion(fromPIdx, toPIdx, refQuesId, toQIdx);
        }
    };
    SurveyCopyQuestionComponent.prototype.copyQuestion = function (fromPIdx, toPIdx, refQuesId, toQIdx) {
        var _this = this;
        var pagesArr = this.services.form.getAllPageIdsArr();
        var question = this.services.form.allQuestionsOfSurvey[this.copyInputData.quesId];
        var carryFrwdFlag = this.checkForCarryForward(question, pagesArr, 'copied');
        if (!carryFrwdFlag) {
            return;
        }
        var pipingFlag = this.checkForPiping(pagesArr);
        if (!pipingFlag) {
            return;
        }
        this.services.resource.copyQuestion(this.copyInputData.quesId, this.copyMoveQuesObj.toPageId, refQuesId).subscribe(function (data) {
            if (toQIdx == -1) {
                _this.formObj.pageFields[toPIdx].formFields.splice(0, 0, new Question(data));
            }
            else {
                if (_this.copyMoveQuesObj.pos == "after") {
                    _this.formObj.pageFields[toPIdx].formFields.splice(toQIdx + 1, 0, new Question(data));
                }
                else {
                    _this.formObj.pageFields[toPIdx].formFields.splice(toQIdx, 0, new Question(data));
                }
            }
            _this.services.form.addNewQuesInAllQuesObj(new Question(data));
            _this.onSuccess.emit('copy-question');
            setTimeout(function () {
                _this.services.utils.scrollPage(data._id, 150);
                _this.cancelCopyOrMoveQuestion();
                _this.services.toastr.success('Question has been copied successfully.', 'Success');
            }, 1000);
        });
    };
    SurveyCopyQuestionComponent.prototype.moveQuestion = function (fromPIdx, toPIdx, refQuesId, toQIdx) {
        var _this = this;
        var pagesArr = this.services.form.getAllPageIdsArr();
        var question = this.services.form.allQuestionsOfSurvey[this.copyInputData.quesId];
        var carryFrwdFlag = this.checkForCarryForward(question, pagesArr, 'moved');
        if (!carryFrwdFlag) {
            return;
        }
        var pipingFlag = this.checkForPiping(pagesArr);
        if (!pipingFlag) {
            return;
        }
        var arrayOfSrcQuesId = [];
        for (var _i = 0, _a = question.destLogicArr; _i < _a.length; _i++) {
            var logic = _a[_i];
            arrayOfSrcQuesId.push(logic.srcQId);
        }
        var allquesArr = this.services.form.getAllQuesIdArr();
        var toCheckForCircularLogic = false;
        for (var _b = 0, allquesArr_1 = allquesArr; _b < allquesArr_1.length; _b++) {
            var qId = allquesArr_1[_b];
            if (qId == this.copyMoveQuesObj.toRefQuesId && qId != this.copyInputData.quesId) {
                toCheckForCircularLogic = true;
            }
            if (toCheckForCircularLogic) {
                if (arrayOfSrcQuesId.indexOf(qId) != -1) {
                    this.services.toastr.warning('Logic behaviour might be circular now.', 'Circular Logic');
                }
            }
        }
        this.services.resource.moveQuestion(this.copyInputData.quesId, this.copyMoveQuesObj.fromPageId, this.copyMoveQuesObj.toPageId, refQuesId).subscribe(function (data) {
            _this.formObj.pageFields[fromPIdx].formFields.splice(_this.copyInputData.quesIdx, 1);
            var idx = 0;
            for (var _i = 0, _a = data.moveDone.formFields; _i < _a.length; _i++) {
                var qId = _a[_i];
                if (qId == question._id) {
                    _this.formObj.pageFields[toPIdx].formFields.splice(idx, 0, new Question(question));
                    break;
                }
                idx++;
            }
            _this.onSuccess.emit('copy-question');
            setTimeout(function () {
                _this.services.utils.scrollPage(question._id, 150);
                _this.cancelCopyOrMoveQuestion();
                _this.services.toastr.success('Question has been moved successfully.', 'Success');
            }, 1000);
        });
    };
    SurveyCopyQuestionComponent.prototype.checkForCarryForward = function (question, pagesArr, str) {
        for (var _i = 0, _a = question.frmCarryForward; _i < _a.length; _i++) {
            var carryItem = _a[_i];
            var pIdOfCarryQues = this.services.form.getPageId(carryItem.quesId);
            if (pagesArr.indexOf(this.copyMoveQuesObj.toPageId) <= pagesArr.indexOf(pIdOfCarryQues)) {
                this.services.alert({
                    title: "Alert",
                    text: "Carry forwarded Question can not be " + str + " on or before the page from which it is carrying the carry forwarded responses.",
                    showConfirmButton: true
                });
                return false;
            }
        }
        for (var _b = 0, _c = question.toCarryForward; _b < _c.length; _b++) {
            var qId = _c[_b];
            var pIdOfCarryQues = this.services.form.getPageId(qId);
            if (pagesArr.indexOf(this.copyMoveQuesObj.toPageId) >= pagesArr.indexOf(pIdOfCarryQues)) {
                this.services.alert({
                    title: "Alert",
                    text: "Carry forwarded Question can not be " + str + " on or after the page to which it is carry forwarded.",
                    showConfirmButton: true
                });
                return false;
            }
        }
        return true;
    };
    SurveyCopyQuestionComponent.prototype.checkForPiping = function (pagesArr) {
        var piped = this.services.form.getPipingObject();
        var isPiped = this.services.form.getIsPipingObject();
        if (piped[this.copyInputData.quesId]) {
            for (var _i = 0, _a = piped[this.copyInputData.quesId]; _i < _a.length; _i++) {
                var qId = _a[_i];
                var pIdOfPipedQues = this.services.form.getPageId(qId);
                if (pagesArr.indexOf(this.copyMoveQuesObj.toPageId) <= pagesArr.indexOf(pIdOfPipedQues)) {
                    this.services.alert({
                        title: "Alert",
                        text: "Piped question can not be on the same or later page",
                        showConfirmButton: true
                    });
                    return false;
                }
            }
        }
        if (isPiped[this.copyInputData.quesId]) {
            for (var _b = 0, _c = isPiped[this.copyInputData.quesId]; _b < _c.length; _b++) {
                var qId = _c[_b];
                var pIdOfIsPipedQues = this.services.form.getPageId(qId);
                if (pagesArr.indexOf(this.copyMoveQuesObj.toPageId) >= pagesArr.indexOf(pIdOfIsPipedQues)) {
                    this.services.alert({
                        title: "Alert",
                        text: "Piped question can not be on the same or later page",
                        showConfirmButton: true
                    });
                    return false;
                }
            }
        }
        return true;
    };
    return SurveyCopyQuestionComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], SurveyCopyQuestionComponent.prototype, "copyInputData", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SurveyCopyQuestionComponent.prototype, "onCancel", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SurveyCopyQuestionComponent.prototype, "onSuccess", void 0);
SurveyCopyQuestionComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey-copy-question',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.copy.question/survey.copy.question.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.copy.question/survey.copy.question.component.css"), __webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__edit_data_service__["a" /* EditDataService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object])
], SurveyCopyQuestionComponent);

var _a, _b;
//# sourceMappingURL=survey.copy.question.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/carry.forward/carry.forward.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"logic-panel\">\n  <div class=\"logic-header\">\n    <span class=\"logicSideTitle\">\n      <div class=\"headerTitle\">\n        <span>Carry Forward</span>\n        <span class=\"pull-right\" *ngIf=\"frmCarryForward.length\"><button type=\"button\" class=\"btn closeButton\" (click)=\"removeCarryForward()\"></button></span>\n      </div>\n    </span>\n  </div>\n  <div *ngFor=\"let carryObj of frmCarryForward; index as idx\" class=\"carry-panel\">\n    <div class=\"add-delete-button-div\">\n      <!-- <span [hidden]=\"frmCarryForward.length == carryQuestions.length\">\n        <span class=\"carry-anchor carry-anchor-add\" (click)=\"addCarryArea(idx)\"></span>\n      </span> -->\n      <span [hidden]=\"frmCarryForward.length == 1\">\n        <span class=\"removeButton\" (click)=\"removeCarryArea(idx)\"></span>\n      </span>\n    </div>\n    <div class=\"row form-group\">\n      <div class=\"col-md-3 col-sm-3 col-xs-3\">\n        <label class=\"center\"> From : </label>\n      </div>\n      <div class=\"col-md-9 col-sm-9 col-xs-9\">\n        <select class=\"form-control\" [(ngModel)]=\"carryObj.quesId\" (change)=\"carryTypeOnQuestionType(carryObj.quesId,idx)\">\n          <option value=\"\"> Select an option : </option>\n          <option [value]='ques._id' *ngFor=\"let ques of carryQuestions\" [innerHTML]=\"ques.count + '. ' + ques.quesData.title\"></option>\n        </select>\n      </div>\n    </div>\n    <div class=\"row form-group\">\n      <div class=\"col-md-3 col-sm-3 col-xs-3\">\n        <label class=\"center\"> Carry : </label>\n      </div>\n      <div class=\"col-md-9 col-sm-9 col-xs-9\">\n        <select class=\"form-control\" [(ngModel)]=\"carryTypeChoiceArray[idx].value\" #carryTypeQuestion (change)=\"setData(carryTypeQuestion.value,idx)\">\n          <option value=\"\" disabled> Select an option : </option>\n          <option [value]='cIndex' *ngFor=\"let cType of carryTypes[idx]; index as cIndex\">{{ cType.text }}</option>\n        </select>\n      </div>\n    </div>\n    <div>\n      <div class=\"checkbox_mrgn\">\n        <div>\n          <span class=\"custom_checkbox_grp\">\n            <label>\n              <input type=\"checkbox\" value=\"0\" (change)=\"changeCarryDetails('wtOrInd',$event,idx)\" [(ngModel)]=\"carryObj.wtOrInd\">\n              <span class=\"custom_checkbox_txt\">Carry Codes</span>\n            </label>\n          </span>\n        </div>\n        <div>\n          <span class=\"custom_checkbox_grp\">\n            <label>\n              <input type=\"checkbox\" value=\"0\" (change)=\"changeCarryDetails('carryAtTop',$event,idx)\" [(ngModel)]=\"carryObj.carryAtTop\">\n              <span class=\"custom_checkbox_txt\">Carry at top</span>\n            </label>\n          </span>\n        </div>\n    </div>\n    </div>\n    <div class=\"logic_else_if_hr\" [hidden]=\"frmCarryForward.length == carryQuestions.length\">\n    </div>\n      <button class=\"btn logic_else_if_btn\" type=\"button\" (click)=\"addCarryArea(idx)\"><span>+</span>Add new condition</button>\n  </div>\n  <div class=\"logic-footer\">\n    <button type=\"button\" class=\"btn save_logic\" (click)=\"saveCarryForward()\"> Save </button>\n    <button type=\"button\" class=\"btn cancel_save_logic\" (click)=\"cancelCarryForward()\"> Cancel </button>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/carry.forward/carry.forward.component.scss":
/***/ (function(module, exports) {

module.exports = ".carry-panel {\n  padding: 10px;\n  border: 1px solid #ccc;\n  margin-bottom: 15px; }\n\n.carry-anchor {\n  cursor: pointer;\n  height: 35px;\n  display: inline-block;\n  width: 35px;\n  background-repeat: no-repeat !important;\n  background-size: 28px !important; }\n\n.carry-anchor-delete {\n  background: url(/assets/images/editSurvey/minus.svg); }\n\n.carry-anchor-add {\n  background: url(/assets/images/editSurvey/add.svg); }\n\n.carry-anchor-add:hover {\n  background: url(/assets/images/editSurvey/add-hover.svg); }\n\n.headerTitle {\n  display: inline-block;\n  width: 100%; }\n\n.carry-anchor-delete:hover {\n  background: url(/assets/images/editSurvey/minus-hover.svg); }\n\n.carry-save-button {\n  background-color: #0A73BA;\n  -webkit-box-shadow: -1px 6px 14px 0 rgba(10, 115, 186, 0.39);\n  box-shadow: -1px 6px 14px 0 rgba(10, 115, 186, 0.39);\n  color: white;\n  margin: 6px;\n  padding: 6px 16px; }\n\n.carry-cancel-button {\n  background-color: white;\n  border: solid 1px #0A73BA;\n  -webkit-box-shadow: -1px 6px 14px 0 rgba(10, 115, 186, 0.39);\n  box-shadow: -1px 6px 14px 0 rgba(10, 115, 186, 0.39);\n  color: #0A73BA;\n  margin: 6px;\n  padding: 6px 16px; }\n\n.add-delete-button-div {\n  text-align: right; }\n\nlabel.center {\n  margin-top: 6px; }\n\n.checkbox_mrgn {\n  margin-left: 22px; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/carry.forward/carry.forward.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CarryForwardComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__carry_forward_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/carry.forward/carry.forward.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var CarryForwardComponent = (function () {
    function CarryForwardComponent(services, carryService, editService) {
        this.services = services;
        this.carryService = carryService;
        this.editService = editService;
        this.carryForwardChanged = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.canceled = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.frmCarryForward = []; // Carry Forward Array
        this.carryObj = {
            quesId: '',
            type: 0,
            scale: 0,
            rowId: null,
            colId: null,
            weightDoc: {},
            wtOrInd: 0,
            carryAtTop: 0
        };
        this.carryTypes = []; // Types array for each carry forward object
        this.carryTypeChoiceArray = []; // Types value array for each carry forward object
    }
    CarryForwardComponent.prototype.ngOnInit = function () {
        this.allQuestionsOfSurvey = this.services.form.allQuestionsOfSurvey;
        this.carryJSON = this.carryService.getCarryJSON();
        this.carryMatrixJSON = this.carryService.getCarryMatrixJSON();
        var type = ['single-choice', 'mul-choice', 'dropdown', 'matrix-rating'];
        var pageId = this.services.form.formObj.getPageByQuestionId(this.qId)._id;
        var cQuestions = this.services.form.getQuestionsBeforeCurrPage(pageId);
        this.carryQuestions = [];
        for (var qIndex = 0; qIndex < cQuestions.length; qIndex++) {
            if (type.indexOf(cQuestions[qIndex].type.type) > -1) {
                this.carryQuestions.push(cQuestions[qIndex]);
            }
        }
        var ques = this.services.form.formObj.getQuestionById(this.qId);
        if (ques.frmCarryForward && ques.frmCarryForward.length) {
            this.frmCarryForward = this.services.utils.cloneObject(ques.frmCarryForward);
        }
        else {
            this.carryObj["scale"] = this.scale;
            this.frmCarryForward.push(this.services.utils.cloneObject(this.carryObj));
        }
        for (var i = 0; i < this.frmCarryForward.length; i++) {
            if (this.frmCarryForward[i].quesId) {
                this.frmCarryForward[i]["scale"] = this.scale;
                this.carryTypeOnQuestionType(this.frmCarryForward[i].quesId, i);
                var carType = this.frmCarryForward[i].type;
                var rowId = this.frmCarryForward[i].rowId;
                var colId = this.frmCarryForward[i].colId;
                for (var k = 0; k < this.carryTypes[i].length; k++) {
                    if (this.carryTypes[i][k].val == carType && (colId && this.carryTypes[i][k].colId == colId || rowId && this.carryTypes[i][k].rowId == rowId || !(rowId || colId))) {
                        var obj = {};
                        obj["value"] = k;
                        this.carryTypeChoiceArray.push(obj);
                    }
                }
            }
            else {
                this.carryTypeChoiceArray.push({ value: "" });
            }
        }
    };
    CarryForwardComponent.prototype.addCarryArea = function (index) {
        this.frmCarryForward.push(this.services.utils.cloneObject(this.carryObj));
        this.carryTypes.push([]);
        this.carryTypeChoiceArray.push({ value: "" });
    };
    CarryForwardComponent.prototype.removeCarryArea = function (index) {
        this.frmCarryForward.splice(index, 1);
        this.carryTypes.splice(index, 1);
        this.carryTypeChoiceArray.push(index, 1);
    };
    CarryForwardComponent.prototype.removeCarryForward = function () {
        var _this = this;
        this.services.alert({
            title: '<p class="sweetalert_title">Are you sure you want to delete?</p>',
            text: "",
            type: 'warning',
            showCancelButton: true,
            buttonsStyling: false,
            confirmButtonClass: 'sweetalert_apply_btn',
            cancelButtonClass: 'sweetalert_cancel_btn',
            confirmButtonText: 'Yes, delete it!'
        }).then(function (result) {
            if (result.value) {
                var carryForward_1 = _this.services.utils.cloneObject(_this.allQuestionsOfSurvey[_this.qId].frmCarryForward);
                _this.services.resource.updateQuestionData(_this.qId, { frmCarryForward: [] }).subscribe(function (data) {
                    _this.services.form.formObj.getQuestionById(_this.qId).setFrmCarryForward(data.resBody.frmCarryForward);
                    /*  Removing Present Question ID from toCarryForward of carried QUestions */
                    for (var i = 0; i < carryForward_1.length; i++) {
                        var cQId = carryForward_1[i].quesId;
                        if (_this.allQuestionsOfSurvey[cQId].toCarryForward && _this.allQuestionsOfSurvey[cQId].toCarryForward.length) {
                            var idx = _this.allQuestionsOfSurvey[cQId].toCarryForward.indexOf(_this.qId);
                            _this.allQuestionsOfSurvey[cQId].toCarryForward.splice(idx, 1);
                        }
                    }
                    /*  Removing Present Question ID from toCarryForward of carried QUestions */
                    _this.services.toastr.success("Question has been updated successfully.", "Success");
                });
                _this.frmCarryForward = [];
                _this.canceled.emit();
            }
        });
    };
    CarryForwardComponent.prototype.carryTypeOnQuestionType = function (qId, index) {
        if (this.frmCarryForward.length != 1) {
            for (var fC = 0; fC < this.frmCarryForward.length; fC++) {
                if (this.frmCarryForward[fC].quesId == qId && fC !== index) {
                    this.frmCarryForward[fC] = this.services.utils.cloneObject(this.carryObj);
                    this.carryTypes[fC] = [];
                    this.carryTypeChoiceArray[fC] = { value: "" };
                    break;
                }
            }
        }
        this.carryTypes[index] = [];
        if (qId) {
            var ques = this.services.form.formObj.getQuestionById(qId);
            var rows = ques.getRowArray();
            var jsonArrayToAdd = null;
            if (ques.fieldType.family == 'multiChoice') {
                jsonArrayToAdd = this.services.utils.cloneObject(this.carryJSON);
                var flag = 0;
                for (var j = 0; j < rows.length; j++) {
                    if (rows[j].hasText || rows[j].isComment) {
                        flag = 1;
                    }
                }
                if (!flag) {
                    jsonArrayToAdd.splice(5, 2);
                }
            }
            else {
                jsonArrayToAdd = this.services.utils.cloneObject(this.carryMatrixJSON);
                var cols = ques.getColArray();
                for (var i = 0; i < cols.length; i++) {
                    var obj = {};
                    obj["val"] = 12;
                    obj["text"] = 'Selected Rows - ' + this.services.utils.getTextOutOfHtml(cols[i].text) + ' Selected choices';
                    obj["colId"] = cols[i]._id;
                    jsonArrayToAdd.push(obj);
                    obj = {};
                    obj["val"] = 13;
                    obj["text"] = 'Unselected Rows - ' + this.services.utils.getTextOutOfHtml(cols[i].text) + ' Selected choices';
                    obj["colId"] = cols[i]._id;
                    jsonArrayToAdd.push(obj);
                }
                for (var j = 0; j < rows.length; j++) {
                    if (!(rows[j].hasText || rows[j].isComment)) {
                        jsonArrayToAdd.splice(8, 1);
                    }
                    var obj = {};
                    obj["val"] = 14;
                    obj["text"] = 'Selected Columns - ' + this.services.utils.getTextOutOfHtml(rows[j].text);
                    obj["rowId"] = rows[j]._id;
                    jsonArrayToAdd.push(obj);
                }
            }
            for (var idx = 0; idx < jsonArrayToAdd.length; idx++) {
                jsonArrayToAdd[idx]["scale"] = this.scale;
            }
            this.carryTypes[index] = jsonArrayToAdd;
        }
    };
    CarryForwardComponent.prototype.setData = function (cTypeIndex, index) {
        if (cTypeIndex) {
            this.frmCarryForward[index].type = this.carryTypes[index][cTypeIndex].val;
            this.frmCarryForward[index].scale = this.carryTypes[index][cTypeIndex].scale;
            if (this.carryTypes[index][cTypeIndex].hasOwnProperty('rowId')) {
                this.frmCarryForward[index].rowId = this.carryTypes[index][cTypeIndex].rowId;
            }
            else {
                this.frmCarryForward[index].rowId = null;
            }
            if (this.carryTypes[index][cTypeIndex].hasOwnProperty('colId')) {
                this.frmCarryForward[index].colId = this.carryTypes[index][cTypeIndex].colId;
            }
            else {
                this.frmCarryForward[index].colId = null;
            }
        }
    };
    CarryForwardComponent.prototype.saveCarryForward = function () {
        var _this = this;
        for (var i = 0; i < this.frmCarryForward.length; i++) {
            if (!this.frmCarryForward[i].quesId || this.frmCarryForward[i].type == 0) {
                this.services.toastr.error("All fields must have a value", "Error");
                return;
            }
        }
        this.services.resource.updateQuestionData(this.qId, { frmCarryForward: this.frmCarryForward }).subscribe(function (data) {
            _this.services.form.formObj.getQuestionById(_this.qId).setFrmCarryForward(data.resBody.frmCarryForward);
            /*  Adding Present Question ID to toCarryForward of carried QUestions */
            for (var i = 0; i < _this.frmCarryForward.length; i++) {
                var qId = _this.frmCarryForward[i].quesId;
                if (_this.allQuestionsOfSurvey[qId].toCarryForward && _this.allQuestionsOfSurvey[qId].toCarryForward.length) {
                    if (!(_this.allQuestionsOfSurvey[qId].toCarryForward.indexOf(_this.qId) > -1)) {
                        _this.allQuestionsOfSurvey[qId].toCarryForward.push(_this.qId);
                    }
                }
                else {
                    _this.allQuestionsOfSurvey[qId].toCarryForward = [];
                    _this.allQuestionsOfSurvey[qId].toCarryForward.push(_this.qId);
                }
            }
            /*  Adding Present Question ID to toCarryForward of carried QUestions */
            _this.services.toastr.success("Question has been updated successfully.", "Success");
            _this.canceled.emit();
        });
    };
    CarryForwardComponent.prototype.cancelCarryForward = function () {
        this.frmCarryForward = [];
        this.carryTypes = [];
        this.carryTypeChoiceArray = [];
        this.canceled.emit();
    };
    CarryForwardComponent.prototype.changeCarryDetails = function (key, event, index) {
        if (event.target.checked) {
            this.frmCarryForward[index][key] = 1;
        }
        else {
            this.frmCarryForward[index][key] = 0;
        }
    };
    return CarryForwardComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], CarryForwardComponent.prototype, "qId", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], CarryForwardComponent.prototype, "scale", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], CarryForwardComponent.prototype, "carryForwardChanged", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _b || Object)
], CarryForwardComponent.prototype, "canceled", void 0);
CarryForwardComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-carry-forward',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/carry.forward/carry.forward.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/carry.forward/carry.forward.component.scss")],
        providers: [__WEBPACK_IMPORTED_MODULE_2__carry_forward_service__["a" /* CarryForwardService */]]
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2__carry_forward_service__["a" /* CarryForwardService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__carry_forward_service__["a" /* CarryForwardService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_3__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__edit_data_service__["a" /* EditDataService */]) === "function" && _e || Object])
], CarryForwardComponent);

var _a, _b, _c, _d, _e;
//# sourceMappingURL=carry.forward.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/carry.forward/carry.forward.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CarryForwardService; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var CarryForwardService = (function () {
    // matrix =  t(2,10,11,9,12,13) t(5,7,8,14) t(1) t(3) t(4) t(6)
    // else =     t(2,4,5,6,7,8,9,10,11) t(1) t(3)
    function CarryForwardService(services) {
        this.services = services;
        this.carryJSON = [
            { val: 1, text: 'All Choices Displayed & Hidden', scale: 0 },
            { val: 2, text: 'Displayed Choices', scale: 0 },
            { val: 3, text: 'Hidden Choices', scale: 0 },
            { val: 4, text: 'Selected Choices', scale: 0 },
            { val: 5, text: 'Unselected Choices', scale: 0 },
            { val: 6, text: 'All Choices  -- Entered text', scale: 0 },
            { val: 7, text: 'Selected Choices  -- Entered text', scale: 0 },
            { val: 8, text: 'All displayed choices before Selected (First to Selected)', scale: 0 },
            { val: 9, text: 'All displayed choices after Selected (Selected to Last)', scale: 0 },
            { val: 10, text: 'All displayed choices before Selected (Selected to First)', scale: 0 },
            { val: 11, text: 'All displayed choices after Selected (Last to Selected)', scale: 0 },
        ];
        this.carryMatrixJSON = [
            { val: 1, text: 'All Rows Displayed & Hidden', scale: 0 },
            { val: 2, text: 'Displayed Rows', scale: 0 },
            { val: 3, text: 'Hidden Rows', scale: 0 },
            { val: 4, text: 'All Columns -- Displayed & Hidden', scale: 0 },
            { val: 5, text: 'Displayed Columns', scale: 0 },
            { val: 6, text: 'Hidden Columns', scale: 0 },
            { val: 7, text: 'Selected Columns', scale: 0 },
            { val: 8, text: 'Unselected Columns', scale: 0 },
            { val: 9, text: 'Selected Rows  -- Entered text', scale: 0 },
            { val: 10, text: 'Selected Rows', scale: 0 },
            { val: 11, text: 'Unselected Rows', scale: 0 },
        ];
    }
    CarryForwardService.prototype.getCarryJSON = function () {
        return this.services.utils.cloneObject(this.carryJSON);
    };
    CarryForwardService.prototype.getCarryMatrixJSON = function () {
        return this.services.utils.cloneObject(this.carryMatrixJSON);
    };
    return CarryForwardService;
}());
CarryForwardService = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _a || Object])
], CarryForwardService);

var _a;
//# sourceMappingURL=carry.forward.service.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/left.panel.component.html":
/***/ (function(module, exports) {

module.exports = "<div [ngSwitch]=\"action\" class=\"scroll\">\n  <div *ngSwitchCase=\"'add-question'\" class=\"add_ques_div\">\n    <app-survey-add-question\n      (onRestoreQues)=\"success($event)\">\n    </app-survey-add-question>\n  </div>\n  <div *ngSwitchCase=\"'survey-flow'\">\n    <app-survey-flow\n      (onRandomization)=\"change($event)\">\n    </app-survey-flow>\n  </div>\n  <div *ngSwitchCase=\"'recode'\">\n    <app-recode-value *ngIf=\"actionObject.qId\"\n      [qId]=\"actionObject.qId\"\n      (onCancel)=\"cancel()\">\n    </app-recode-value>\n  </div>\n  <div *ngSwitchCase=\"'copy-question'\">\n    <app-survey-copy-question *ngIf=\"actionObject.copyInputData\"\n      [copyInputData]=\"actionObject.copyInputData\"\n      (onCancel)=\"cancel()\"\n      (onSuccess)=\"success($event)\">\n    </app-survey-copy-question>\n  </div>\n  <div *ngSwitchCase=\"'page-delete'\">\n    <app-survey-page-delete *ngIf=\"actionObject.delPageInpData\"\n      [delPageInpData]=\"actionObject.delPageInpData\"\n      (onCancel)=\"cancel()\"\n      (onSuccess)=\"success($event)\">\n    </app-survey-page-delete>\n  </div>\n  <div *ngSwitchCase=\"'randomization'\">\n    <app-survey-randomization *ngIf=\"actionObject.ranInpData\"\n      [ranInpData]=\"actionObject.ranInpData\"\n      (onCancel)=\"cancel()\">\n    </app-survey-randomization>\n  </div>\n  <div *ngSwitchCase=\"'logic'\">\n    <app-logics\n      [pId]=\"actionObject.pId\"\n      [qId]=\"actionObject.qId\"\n      [qType]=\"actionObject?.qType?.type\"\n      [editLogicType]=\"actionObject?.editLogicType\">\n    </app-logics>\n  </div>\n  <div *ngSwitchCase=\"'survey-page-title-desc'\">\n    <app-survey-page-title-settings\n      [settingsInpData]=\"actionObject.titleDescInpData\"\n      (onCancel)=\"cancel()\">\n    </app-survey-page-title-settings>\n  </div>\n  <div *ngSwitchCase=\"'survey-logo'\">\n    <app-logo-settings\n      [logoInpData]=\"actionObject.logoInpData\"\n      (onCancel)=\"cancel()\"\n      (onSuccess)=\"success($event)\">\n    </app-logo-settings>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/left.panel.component.scss":
/***/ (function(module, exports) {

module.exports = ".scroll {\n  overflow-y: auto;\n  height: 100%;\n  overflow-x: hidden; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/left.panel.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LeftPanelComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var LeftPanelComponent = (function () {
    function LeftPanelComponent() {
        this.onCancel = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.onChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.onSuccess = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.onSuccessAction = {};
    }
    LeftPanelComponent.prototype.ngOnInit = function () {
    };
    LeftPanelComponent.prototype.cancel = function () {
        this.onCancel.emit();
    };
    LeftPanelComponent.prototype.change = function (event) {
        this.onChange.emit(event);
    };
    LeftPanelComponent.prototype.success = function (event) {
        this.onSuccess.emit(event);
    };
    return LeftPanelComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], LeftPanelComponent.prototype, "action", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], LeftPanelComponent.prototype, "actionObject", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], LeftPanelComponent.prototype, "onCancel", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _b || Object)
], LeftPanelComponent.prototype, "onChange", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _c || Object)
], LeftPanelComponent.prototype, "onSuccess", void 0);
LeftPanelComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'design-left-panel',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/left.panel.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/left.panel.component.scss")]
    }),
    __metadata("design:paramtypes", [])
], LeftPanelComponent);

var _a, _b, _c;
//# sourceMappingURL=left.panel.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/delayed.branching/delayed.branching.component.html":
/***/ (function(module, exports) {

module.exports = "<form class=\"logic-panel\" [formGroup]=\"logicFormGroup\">\n  <div class=\"logic-header\">\n    <!-- <span id=\"arrow\"><img src=\"../../../../../../../assets/images/arrow.png\" style=\"width=10%;\"></span> -->\n    <span class=\"logicSideTitle\"><div><h4>Delayed Branching</h4></div></span>\n    <span class=\"remove-all-logic-btn pull-right\">\n      <button class=\"btn closeButton\" type=\"button\" (click)=\"removeAllLogic()\"></button>\n    </span>\n  </div>\n  <div formArrayName=\"logicArr\">\n    <!-- <div>\n      <span><div class=\"logic_type_heading\">Set Delayed Branching</div></span>\n    </div> -->\n    <div *ngFor=\"let logic of logicFormGroup.get('logicArr')?.controls; index as logicIdx\" [formGroupName]=\"logicIdx\">\n      <div class=\"logic_row\">\n        <div  class=\"logicBodyContainer\">\n          <div [hidden]=\"(logicIdx == (appliedLogicsLength - 1)) || (logicIdx == 0)\" class=\"db-logic-delete\" (click)=\"deleteLogic(logicIdx)\">\n            <span class=\"removeButton\"></span>\n          </div>\n          <div class=\"logic_width_40 display_inline_block\">\n            <div *ngIf=\"logicIdx < appliedLogicsLength - 1\">\n              <label class=\"logics_label logic_delay_cond\">{{logicIdx != 0 ? \"Else if\" : \"If Conditions met\"}} *</label>\n              <div class=\"logics_select_dropdown_div\">\n                <select class=\"form-control logics_select_small\" formControlName=\"ansId\" (change)=\"showCriteriaForm($event)\" required>\n                  <option value=\"\" disabled=\"\">Select Criteria</option>\n                  <option [value]=\"criteria._id\" *ngFor=\"let criteria of criteriaArr; index as criteria_idx\">{{criteria.name}}</option>\n                  <option value=\"0\">Create New</option>\n                </select>\n              </div>\n            </div>\n          </div>\n          <div class=\"display_inline_block\">\n            <label class=\"logics_label logic_delay_skip\">{{logicIdx == (appliedLogicsLength - 1) ? \"Else \" : \"Skip to\"}}  *</label>\n            <div class=\"logics_select_dropdown_div\">\n              <select class=\"form-control logics_select_large\" (change)=\"updateLogic(logic, logicIdx)\" formControlName=\"destQId\" required>\n                <option disabled=\"\" value=\"\">Select Question</option>\n              <option *ngFor=\"let ques of questionList\" [value]=\"ques._id\" innerHTML=\"{{ques.count + ' ' + ques.title}}\"></option>\n                <option *ngFor=\"let addOp of additionalOptions\" [value]=\"addOp.value\">{{addOp.label}}</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"logic_else_if_hr\"></div>\n      <button class=\"btn logic_else_if_btn\" type=\"button\" (click)=\"addNewCondition()\"><span>+</span>Else if</button>\n  </div>\n  <div class=\"logic-footer\">\n    <span ><button class=\"btn save_logic\" type=\"button\" [disabled]=\"!logicFormGroup.valid\" (click)=\"saveLogic()\">Save Changes</button></span>\n    <span><button class=\"btn cancel_save_logic\" type=\"button\" (click)=\"cancel()\">Cancel</button></span>\n  </div>\n</form>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/delayed.branching/delayed.branching.component.scss":
/***/ (function(module, exports) {

module.exports = ".logic-header span {\n  display: inline-block;\n  vertical-align: top; }\n\n.logic-header span {\n  display: inline-block; }\n\n.logic_type_heading {\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n  display: inline; }\n\n.halfWidth {\n  width: 48%; }\n\ndiv logicBodyContainer div {\n  margin-bottom: 10px; }\n\n.logicBodyContainer {\n  padding-bottom: 0px;\n  padding-top: 10px; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/delayed.branching/delayed.branching.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DelayedBranchingComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__logic_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logic.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var DelayedBranchingComponent = (function () {
    function DelayedBranchingComponent(logicService, services) {
        this.logicService = logicService;
        this.services = services;
        this.logicChanged = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.canceled = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.logicName = this.logicService.allLogicName.compound.name;
    }
    DelayedBranchingComponent.prototype.ngOnInit = function () {
        this.question = this.services.form.getFormData().getQuestionById(this.qId);
        this.criteriaArr = this.services.form.getFormData().getAllCriterias();
        this.questionList = this.services.form.getQuestionsAfter(this.question._id);
        this.additionalOptions = this.logicService.getAdditionalOptionsForQuestionList();
        this.setAppliedLogic();
    };
    DelayedBranchingComponent.prototype.setAppliedLogic = function () {
        var _this = this;
        var question = this.services.utils.cloneObject(this.question);
        question.logicArr = question.logicArr.filter(function (logic) { return logic.logic == _this.logicName; });
        if (question.logicArr.length < 2) {
            for (var i = 0; i < 2; i++) {
                question.logicArr.push(question.logicArr[i] || this.getLogicData());
            }
        }
        question.logicArr.forEach(function (logic) {
            if (!_this.checkForAdditionalOptions(logic.lType)) {
                logic.destQId = logic.lType;
            }
        });
        this.logicFormGroup = this.logicService.buildCriteriaForm(question);
        this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
    };
    DelayedBranchingComponent.prototype.addNewCondition = function () {
        this.logicFormGroup.get('logicArr')["insert"](this.appliedLogicsLength - 1, this.logicService.getFormGroup(this.getLogicData()));
        this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
    };
    DelayedBranchingComponent.prototype.saveLogic = function () {
        var _this = this;
        var logicArr = this.logicFormGroup.value.logicArr;
        logicArr.forEach(function (logic, index) {
            if (index == logicArr.length - 1) {
                logic.metUnmet = 0;
                logic.ansId = logicArr[0].ansId;
            }
        });
        var logicFormData = this.logicService.getLogicFormData(this.question, logicArr, this.logicName);
        this.logicService.saveLogicData(logicFormData, this.question._id).subscribe(function (data) {
            if (!_this.services.form.formObj.isLastQuestionOnPage(_this.question._id)) {
                var page = _this.services.form.formObj.getPageByQuestionId(_this.question._id);
                _this.services.resource.addPageBreak(page._id, _this.services.form.formObj._id, _this.question._id).subscribe(function (data1) {
                    _this.logicChanged.emit({ logicName: _this.logicName, res: data });
                    _this.services.form.fetchSurveyDataFromServer(_this.services.form.formObj._id).subscribe(function (data2) {
                    });
                });
            }
            else {
                _this.logicChanged.emit({ logicName: _this.logicName, res: data });
            }
        });
    };
    DelayedBranchingComponent.prototype.updateLogic = function (logic, index) {
        if (this.checkForAdditionalOptions(logic.get('destQId').value)) {
            logic.get('lType').setValue("normal");
            logic.get('destPId').setValue(this.services.form.getPageId(logic.get('destQId').value));
        }
        else {
            logic.get('lType').setValue(logic.get('destQId').value);
        }
    };
    DelayedBranchingComponent.prototype.deleteLogic = function (index) {
        if (this.appliedLogicsLength > 2) {
            this.logicFormGroup.get('logicArr')["removeAt"](index);
            this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
        }
    };
    DelayedBranchingComponent.prototype.getLogicData = function () {
        var logicObject = this.services.utils.cloneObject(this.logicService.logicData);
        logicObject["logic"] = this.logicName;
        return logicObject;
    };
    DelayedBranchingComponent.prototype.checkForAdditionalOptions = function (value) {
        return this.additionalOptions.map(function (item) { return item.value; }).indexOf(value) == -1;
    };
    DelayedBranchingComponent.prototype.removeAllLogic = function () {
        var _this = this;
        this.logicService.removeAllLogicByName(this.question, this.logicName).subscribe(function (data) {
            _this.logicChanged.emit({ logicName: _this.logicName, res: data });
            _this.services.toastr.success('Logic has been successfully removed.');
        });
    };
    DelayedBranchingComponent.prototype.showCriteriaForm = function (event) {
        (event.target.value == '0') && this.logicChanged.emit({ view: 'Criteria' });
    };
    DelayedBranchingComponent.prototype.cancel = function () {
        this.canceled.emit();
    };
    return DelayedBranchingComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], DelayedBranchingComponent.prototype, "qId", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], DelayedBranchingComponent.prototype, "logicChanged", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _b || Object)
], DelayedBranchingComponent.prototype, "canceled", void 0);
DelayedBranchingComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-delayed-branching',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/delayed.branching/delayed.branching.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/delayed.branching/delayed.branching.component.scss")] //'../../../../criteria.and.logics/criteria.and.logics.component.css'
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__logic_service__["a" /* LogicService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__logic_service__["a" /* LogicService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _d || Object])
], DelayedBranchingComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=delayed.branching.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/display.logic/display.logic.component.html":
/***/ (function(module, exports) {

module.exports = "<form class=\"logic-panel\" [formGroup]=\"logicFormGroup\">\n    <div class=\"logic-header\">\n      <span class=\"logicSideTitle\">Set Display Logic</span>\n      <span class=\"remove-all-logic-btn pull-right\">\n      <button class=\"btn closeButton\" type=\"button\" (click)=\"removeAllLogic()\"></button>\n    </span>\n    </div>\n    <div class=\"logicBodyContainer\">\n      <div class=\"logics_label\">This question/options will be displayed if criteria is met.</div>\n  \t<div>\n  \t\t<span class=\"checkbox_mrgn\">\n        <label>\n          <input type=\"checkbox\" [value]=\"true\" [(ngModel)]=\"isLogicOnOptions\" [ngModelOptions]=\"{standalone: true}\" (change)=\"updateLogicForOption($event)\">\n          <span class=\"custom_checkbox\"></span>\n        </label>\n      </span>\n      <span>Apply Display logic on options as well(Only on question - by default). Not choosing any options means you are applying display logic on question. </span>\n  \t</div>\n    <div formArrayName=\"logicArr\" class=\"logic-body\">\n      <div *ngFor=\"let logic of logicFormGroup.get('logicArr')?.controls; index as logicIdx\" [formGroupName]=\"logicIdx\">\n        <!-- if logic on question -->\n        <div class=\"logic_row\" *ngIf=\"!isLogicOnOptions\">\n          <div>\n            <label class=\"logics_label logic_delay_cond\">Select Criteria *</label>\n            <span class=\"logics_select_dropdown_div\">\n              <select class=\"form-control logics_select_small\" formControlName=\"ansId\" (change)=\"showCriteriaForm($event)\" required>\n                <option value=\"\" disabled=\"\">Select Criteria</option>\n                <option [value]=\"criteria._id\" *ngFor=\"let criteria of criteriaArr; index as criteria_idx\">{{criteria.name}}</option>\n                <option value=\"0\">Create New</option>\n              </select>\n            </span>\n          </div>\n        </div>\n        <!-- if logic on question -->\n\n        <!-- if logic on options -->\n        <div class=\"logic_row\" *ngIf=\"isLogicOnOptions\">\n          <div class=\"display_op\">\n            <div [hidden]=\"logicIdx == (appliedLogicsLength - 1) || appliedLogicsLength == 2\" class=\"db-logic-delete\" (click)=\"deleteLogic(logicIdx)\">\n              <span class=\"removeButton\"></span>\n            </div>\n            <div *ngIf=\"logicIdx !== (appliedLogicsLength - 1)\">\n              <label class=\"logics_label\">Display these options if *</label>\n              <span class=\"logics_select_dropdown_div\">\n                <select class=\"form-control logics_select_small\" formControlName=\"ansId\" (change)=\"showCriteriaForm($event)\" required>\n                  <option value=\"\" disabled=\"\">Select Criteria</option>\n                  <option [value]=\"criteria._id\" *ngFor=\"let criteria of criteriaArr; index as criteria_idx\">{{criteria.name}}</option>\n                <option value=\"0\">Create New</option>\n                </select>\n              </span>\n              <label class=\"logics_label\">criteria is met.</label>\n            </div>\n\n            <div [hidden]=\"logicIdx != (appliedLogicsLength - 1)\">\n              Else Display These Options(If no options is selected, This question wont be displayed.)\n            </div>\n            <div>\n              <checkbox-group formControlName=\"optArr\">\n                <checkbox *ngFor=\"let option of fieldOptions\" [value]=\"option.id\">\n                  &nbsp;<span innerHTML=\"{{option.text}}\"></span>\n                </checkbox>\n              </checkbox-group>\n            </div>\n          </div>\n            <div>\n              <button *ngIf=\"logicIdx == (appliedLogicsLength - 2)\" class=\"btn logic_else_if_btn\" type=\"button\" (click)=\"addNewCondition()\">Add Criteria Logic</button>\n            </div>\n            <div class=\"logic_else_if_hr\"></div>\n        </div>\n        <!-- if logic on options -->\n      </div>\n    </div>\n  </div>\n  <div class=\"logic-footer\">\n    <button class=\"btn save_logic\" type=\"button\" [disabled]=\"!logicFormGroup.valid\" (click)=\"saveLogic()\">Save</button>\n    <button class=\"btn cancel_save_logic\" type=\"button\" (click)=\"cancel()\">Cancel</button>\n  </div>\n</form>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/display.logic/display.logic.component.scss":
/***/ (function(module, exports) {

module.exports = ".logic-header span {\n  display: inline-block;\n  vertical-align: top; }\n\n.logic-header span {\n  display: inline-block; }\n\n.logic_type_heading {\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n  display: inline; }\n\n.logic_else_if_hr {\n  border: 1px solid #CDCBCB;\n  border-radius: 4px;\n  border-style: dotted;\n  margin: 10px 10px 10px 15px;\n  color: #5eb65c;\n  text-align: center; }\n\n.logic_else_if_btn {\n  background-color: #fff; }\n\n.halfWidth {\n  width: 48%; }\n\ndiv.logic_row > div {\n  margin-bottom: 20px; }\n\n.checkbox_mrgn {\n  margin-left: 12px; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/display.logic/display.logic.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DisplayLogicComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__ = __webpack_require__("./src/app/shared/questionTemplates/question-types.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__logic_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logic.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var DisplayLogicComponent = (function () {
    function DisplayLogicComponent(logicService, qTypesService, services) {
        this.logicService = logicService;
        this.qTypesService = qTypesService;
        this.services = services;
        this.logicChanged = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.canceled = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.logicName = this.logicService.allLogicName.display.name;
        this.additionalKeysInLogic = {
            "optArr": []
        };
        this.isLogicOnOptions = false;
        this.fieldOptions = [];
    }
    DisplayLogicComponent.prototype.ngOnInit = function () {
        this.question = this.services.form.getFormData().getQuestionById(this.qId);
        this.criteriaArr = this.services.form.getFormData().getAllCriterias();
        this.questionList = this.services.form.getQuestionsAfter(this.question._id);
        this.setAppliedLogic();
    };
    DisplayLogicComponent.prototype.setAppliedLogic = function () {
        var _this = this;
        var question = this.services.utils.cloneObject(this.question);
        var logicArr = question.logicArr.filter(function (logic) { return logic.logic == _this.logicName; });
        if (!logicArr.length) {
            question.logicArr = [this.getLogicData()];
        }
        else {
            (logicArr.length > 1) && (this.isLogicOnOptions = true);
            question.logicArr = logicArr;
        }
        this.buildCriteriaForm(question);
        this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
        this.setFieldOptions(question, logicArr);
    };
    DisplayLogicComponent.prototype.setFieldOptions = function (question, logicArr) {
        var _this = this;
        this.fieldOptions = [];
        var carryOptions = this.logicService.getCarryOption(question._id);
        carryOptions.topArray.forEach(function (option) {
            var logic = _this.logicService.getLogicOnOption(logicArr, option, _this);
            _this.fieldOptions.push(logic);
        });
        question.fieldOptions.row.forEach(function (option) {
            var logic = _this.logicService.getLogicOnOption(logicArr, option, _this);
            _this.fieldOptions.push(logic);
        });
        question.fieldOptions.col.forEach(function (option) {
            var logic = _this.logicService.getLogicOnOption(logicArr, option, _this);
            _this.fieldOptions.push(logic);
        });
        carryOptions.bottomArray.forEach(function (option) {
            var logic = _this.logicService.getLogicOnOption(logicArr, option, _this);
            _this.fieldOptions.push(logic);
        });
    };
    DisplayLogicComponent.prototype.buildCriteriaForm = function (question) {
        if (this.isLogicOnOptions) {
            this.logicFormGroup = this.logicService.buildCriteriaForm(question, this.additionalKeysInLogic);
        }
        else {
            this.logicFormGroup = this.logicService.buildCriteriaForm(question);
        }
    };
    DisplayLogicComponent.prototype.addNewCondition = function () {
        this.logicFormGroup.get('logicArr')["push"](this.logicService.getFormGroup(this.getLogicData()));
        this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
    };
    DisplayLogicComponent.prototype.saveLogic = function () {
        var _this = this;
        var logicArr = this.logicFormGroup.value.logicArr;
        if (logicArr.length > 1) {
            logicArr.forEach(function (logic, index) {
                if (index == logicArr.length - 1) {
                    logic.metUnmet = 0;
                    logic.ansId = logicArr[0].ansId;
                }
            });
        }
        var logicFormData = this.logicService.getLogicFormData(this.question, logicArr, this.logicName);
        this.logicService.saveLogicData(logicFormData, this.question._id).subscribe(function (data) {
            _this.logicChanged.emit({ logicName: _this.logicName, res: data });
        });
    };
    DisplayLogicComponent.prototype.updateLogic = function (logic, index) {
    };
    DisplayLogicComponent.prototype.updateLogicForOption = function (event) {
        var _this = this;
        var question = this.services.utils.cloneObject(this.question);
        var qtype = this.qTypesService.getQuestionType(question.fieldType.family, question.fieldType.subtype);
        if (['single-text', 'ranking', 'graph-rating', 'nps', 'contacts', 'comment', 'statement', 'file', 'slider'].indexOf(qtype.type) != -1) {
            this.services.toastr.error("Option Dsiplay Logic cant be applied on this type of question.", "Logical Error");
            this.isLogicOnOptions = false;
            event.target.checked = false;
            return;
        }
        var logicArr = question.logicArr.filter(function (logic) { return logic.logic == _this.logicName; });
        if (this.isLogicOnOptions == true) {
            if (logicArr.length > 1) {
                this.setAppliedLogic();
            }
            else {
                question.logicArr = [this.getLogicData(), this.getLogicData()];
                this.buildCriteriaForm(question);
            }
        }
        else {
            if (logicArr.length > 1) {
                question.logicArr = [this.getLogicData()];
                this.buildCriteriaForm(question);
            }
            else {
                this.setAppliedLogic();
            }
        }
        this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
    };
    DisplayLogicComponent.prototype.deleteLogic = function (index) {
        if (this.appliedLogicsLength > 2) {
            this.logicFormGroup.get('logicArr')["removeAt"](index);
            this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
        }
    };
    DisplayLogicComponent.prototype.getLogicData = function (option) {
        var logicObject = this.services.utils.cloneObject(this.logicService.logicData);
        if (this.isLogicOnOptions) {
            for (var key in this.additionalKeysInLogic) {
                logicObject[key] = this.services.utils.cloneObject(this.additionalKeysInLogic[key]);
            }
        }
        logicObject["logic"] = this.logicName;
        logicObject["lType"] = "normal";
        logicObject["text"] = option ? option.text : '';
        logicObject["id"] = option ? option._id : '';
        return logicObject;
    };
    DisplayLogicComponent.prototype.removeAllLogic = function () {
        var _this = this;
        this.logicService.removeAllLogicByName(this.question, this.logicName).subscribe(function (data) {
            _this.logicChanged.emit({ logicName: _this.logicName, res: data });
            _this.services.toastr.success('Logic has been successfully removed.');
        });
    };
    DisplayLogicComponent.prototype.showCriteriaForm = function (event) {
        (event.target.value == '0') && this.logicChanged.emit({ view: 'Criteria' });
    };
    DisplayLogicComponent.prototype.cancel = function () {
        this.canceled.emit();
    };
    return DisplayLogicComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], DisplayLogicComponent.prototype, "qId", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], DisplayLogicComponent.prototype, "logicChanged", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _b || Object)
], DisplayLogicComponent.prototype, "canceled", void 0);
DisplayLogicComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-display-logic',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/display.logic/display.logic.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/display.logic/display.logic.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__logic_service__["a" /* LogicService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__logic_service__["a" /* LogicService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _e || Object])
], DisplayLogicComponent);

var _a, _b, _c, _d, _e;
//# sourceMappingURL=display.logic.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/edata.logic/edata.logic.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"logic-panel\" [formGroup]=\"logicFormGroup\">\n  <div class=\"logic-header\">\n    <span class=\"logicSideTitle\">Set Embededd Data Logic</span>\n    <span class=\"remove-all-logic-btn\">\n      <button class=\"btn closeButton\" type=\"button\" (click)=\"removeAllLogic()\"></button>\n    </span>\n  </div>\n    <div formArrayName=\"logicArr\" class=\"logicBodyContainer\">\n      <div><p>On meeting the criteria selected the values of provided fields would be set.</p></div>\n      <div *ngFor=\"let logic of logicFormGroup.get('logicArr')?.controls; index as logicIdx\" [formGroupName]=\"logicIdx\">\n        <div [hidden]=\"logicIdx == 0\" class=\"logic_else_if_hr\"></div>\n        <div class=\"logic_row\">\n          <div [hidden]=\"appliedLogicsLength == 1\" class=\"db-logic-delete-2\" (click)=\"deleteLogic(logicIdx)\">\n            <span class=\"removeButton\"></span>\n          </div>\n          <div class=\"display_inline_block\">\n            <div>\n              <div class=\"logics_label\">Criteria</div>\n              <div class=\"logics_select_dropdown_div\">\n                <select class=\"form-control logics_select_small\" formControlName=\"ansId\" (change)=\"showCriteriaForm($event)\">\n                  <option value=\"\" disabled=\"\">Select Criteria</option>\n                  <option [value]=\"criteria._id\" *ngFor=\"let criteria of criteriaArr; index as criteria_idx\">{{criteria.name}}</option>\n                  <option value=\"0\">Create New</option>\n                </select>\n              </div>\n              <!-- <div class=\"logics_label\">>></div> -->\n            </div>\n          </div>\n          <div formArrayName=\"eDataArr\" class=\"edata-logic-div\">\n            <div *ngFor=\"let edata of logic.get('eDataArr').controls; index as edataIdx\" [formGroupName]=\"edataIdx\">\n              <div class=\"logic_row\">\n                <div class=\"row\">\n                  <span class=\"col-lg-3 logics_label\">Field\n                    <input type=\"text\" formControlName=\"field\" class=\"form-control\">\n                  </span>\n                  <!-- <div class=\"logics_label\"><-|-></div> -->\n                  <span class=\"logics_select_dropdown_div col-lg-6 logics_label\">Embedded Data\n                    <select class=\"form-control logics_select_small\"  [(ngModel)]=\"eDataTypeList[logicIdx][edataIdx]\" [ngModelOptions]=\"{standalone: true}\" (change)=\"updateLogic(logic, logicIdx)\">\n                      <option *ngFor=\"let option of requiredOptions.typeOfEmbeddedData\" [value]=\"option.value\">{{option.text}}</option>\n                    </select>\n                  </span>\n                  <!-- <div class=\"logics_label\">-></div> -->\n                  <div class=\"col-lg-3 logics_label\">Value\n                    <input *ngIf=\"eDataTypeList[logicIdx][edataIdx] == 'm'\" type=\"text\" formControlName=\"value\" class=\"form-control\">\n\n                    <input *ngIf=\"eDataTypeList[logicIdx][edataIdx] == 'e'\" type=\"text\" formControlName=\"value\" class=\"form-control\">\n\n                    <span *ngIf=\"eDataTypeList[logicIdx][edataIdx] == 'c'\" class=\"logics_select_dropdown_div\">\n                      <select class=\"form-control logics_select_small\" formControlName=\"value\">\n                        <option *ngFor=\"let option of requiredOptions.contactFields\" [value]=\"option.value\">{{option.text}}</option>\n                      </select>\n                    </span>\n                  </div>\n                </div>\n                <div>\n                  <div class=\"db-logic-add\" (click)=\"addNewEdataCondition(logic, logicIdx, edataIdx)\">\n                    <span class=\"add-button\"></span>\n                  </div>\n                  <div [hidden]=\"logic.get('eDataArr').controls.length < 2\" class=\"db-logic-delete\" (click)=\"deleteEdataCondition(logic, logicIdx, edataIdx)\">\n                    <span class=\"close-button\"></span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    <div class=\"logic_else_if_hr\">\n    </div>\n      <button class=\"btn logic_else_if_btn\" type=\"button\" (click)=\"addNewCondition()\"><span>+</span>Add if Condition</button>\n  </div>\n  <div class=\"logic-footer\">\n    <button class=\"btn save_logic\" type=\"button\" (click)=\"saveLogic()\">Save</button>\n    <button class=\"btn cancel_save_logic\" type=\"button\" (click)=\"cancel()\">Cancel</button>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/edata.logic/edata.logic.component.scss":
/***/ (function(module, exports) {

module.exports = ".edata-logic-div {\n  padding: 0px; }\n\n.logic_row div {\n  margin-bottom: 10px; }\n\ndiv > p {\n  font-style: italic;\n  font-size: 12px; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/edata.logic/edata.logic.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EdataLogicComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__logic_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logic.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var EdataLogicComponent = (function () {
    function EdataLogicComponent(logicService, services) {
        this.logicService = logicService;
        this.services = services;
        this.logicChanged = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.canceled = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.logicName = this.logicService.allLogicName.embed.name;
        this.additionalKeysInLogic = {
            eDataArr: [
                { field: "", value: "" }
            ]
        };
        this.eDataTypeList = [];
    }
    ;
    EdataLogicComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.question = this.services.form.getFormData().getQuestionById(this.qId);
        this.criteriaArr = this.services.form.getFormData().getAllCriterias();
        this.requiredOptions = {
            typeOfEmbeddedData: this.services.constants.typeOfEmbeddedData,
            contactFields: this.services.constants.contactFields
        };
        this.defaultEdataOption = this.requiredOptions.typeOfEmbeddedData[0].value;
        this.services.resource.getEdataList().subscribe(function (data) { return _this.edataList = data; });
        this.setAppliedLogic();
    };
    EdataLogicComponent.prototype.setAppliedLogic = function () {
        var _this = this;
        var question = this.services.utils.cloneObject(this.question);
        question.logicArr = question.logicArr.filter(function (logic) { return logic.logic == _this.logicName; });
        if (!question.logicArr.length) {
            question.logicArr.push(this.getLogicData());
            this.eDataTypeList = [[this.defaultEdataOption]];
        }
        else {
            question.logicArr.forEach(function (logic) {
                var typeArr = [];
                logic.eDataArr.forEach(function (item) {
                    var eData = _this.services.eData.getDataFromString(item.value);
                    typeArr.push(eData.type);
                    item.value = eData.value;
                });
                _this.eDataTypeList.push(typeArr);
            });
        }
        this.buildCriteriaForm(question);
        this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
    };
    EdataLogicComponent.prototype.buildCriteriaForm = function (question) {
        this.logicFormGroup = this.logicService.buildCriteriaForm(question, this.additionalKeysInLogic);
    };
    EdataLogicComponent.prototype.addNewCondition = function () {
        var logicData = this.getLogicData();
        this.logicService.setDataForAdditionalParam(logicData, this.additionalKeysInLogic, this.additionalKeysInLogic);
        this.logicFormGroup.get('logicArr')["push"](this.logicService.getFormGroup(logicData));
        this.eDataTypeList.push([[this.defaultEdataOption]]);
        this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
    };
    EdataLogicComponent.prototype.addNewEdataCondition = function (logic, lIndex, eIndex) {
        var logicData = this.getLogicData();
        logic.get('eDataArr')["insert"](eIndex + 1, this.logicService.getFormGroup(this.additionalKeysInLogic.eDataArr[0]));
        this.eDataTypeList[lIndex].splice(eIndex + 1, 0, [[this.defaultEdataOption]]); // push([[this.defaultEdataOption]]);
    };
    EdataLogicComponent.prototype.saveLogic = function () {
        var _this = this;
        var logicArr = this.services.utils.cloneObject(this.logicFormGroup.value.logicArr);
        logicArr.forEach(function (logic, lIndex) {
            logic.eDataArr.forEach(function (item, eIndex) {
                item.value = _this.services.eData.getEdataString(_this.eDataTypeList[lIndex][eIndex], item.value);
            });
        });
        var logicFormData = this.logicService.getLogicFormData(this.question, logicArr, this.logicName);
        this.logicService.saveLogicData(logicFormData, this.question._id).subscribe(function (data) {
            _this.logicChanged.emit({ logicName: _this.logicName, res: data });
        });
    };
    EdataLogicComponent.prototype.updateLogic = function (logic, index) {
    };
    EdataLogicComponent.prototype.deleteLogic = function (index) {
        if (this.appliedLogicsLength > 1) {
            this.logicFormGroup.get('logicArr')["removeAt"](index);
            this.eDataTypeList.splice(index, 1);
            this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
        }
    };
    EdataLogicComponent.prototype.deleteEdataCondition = function (logic, lIndex, eIndex) {
        if (logic.get('eDataArr').controls.length > 1) {
            logic.get('eDataArr')["removeAt"](eIndex);
            this.eDataTypeList[lIndex].splice(eIndex, 1);
        }
    };
    EdataLogicComponent.prototype.getLogicData = function () {
        var logicObject = this.services.utils.cloneObject(this.logicService.logicData);
        if (this.additionalKeysInLogic) {
            for (var key in this.additionalKeysInLogic) {
                logicObject[key] = this.additionalKeysInLogic[key];
            }
        }
        logicObject["lType"] = "normal";
        logicObject["logic"] = this.logicName;
        return logicObject;
    };
    EdataLogicComponent.prototype.removeAllLogic = function () {
        var _this = this;
        this.logicService.removeAllLogicByName(this.question, this.logicName).subscribe(function (data) {
            _this.logicChanged.emit({ logicName: _this.logicName, res: data });
            _this.services.toastr.success('Logic has been successfully removed.');
        });
    };
    EdataLogicComponent.prototype.showCriteriaForm = function (event) {
        (event.target.value == '0') && this.logicChanged.emit({ view: 'Criteria' });
    };
    EdataLogicComponent.prototype.cancel = function () {
        this.canceled.emit();
    };
    return EdataLogicComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], EdataLogicComponent.prototype, "qId", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], EdataLogicComponent.prototype, "logicChanged", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _b || Object)
], EdataLogicComponent.prototype, "canceled", void 0);
EdataLogicComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-edata-logic',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/edata.logic/edata.logic.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/edata.logic/edata.logic.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__logic_service__["a" /* LogicService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__logic_service__["a" /* LogicService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _d || Object])
], EdataLogicComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=edata.logic.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/logic.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LogicService; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var LogicService = (function () {
    function LogicService(_fb, service) {
        var _this = this;
        this._fb = _fb;
        this.service = service;
        this.logicNameArr = [
            "rLogic",
            "embed",
            "protractor",
            "promoter",
            "display",
            "compound",
            "skip"
        ];
        this.allLogicName = {};
        this.logicData = {
            "destPId": "",
            "destQId": "",
            "lType": "",
            "ansId": "",
            "metUnmet": 1,
            "logic": "",
            "text": ""
        };
        this.logicNameArr.forEach(function (logicName) {
            _this.allLogicName[logicName] = {
                name: logicName
            };
        });
    }
    LogicService.prototype.setPageFields = function (pageFields) {
        this.pageFields = this.service.utils.cloneObject(pageFields);
    };
    LogicService.prototype.validateFbAppId = function (appId) {
        return this.service.resource.validateApi(appId);
    };
    LogicService.prototype.setPageId = function (id) {
        this.pageId = id;
    };
    LogicService.prototype.buildCriteriaForm = function (question, addtionalParam) {
        var _this = this;
        var logicData = this.service.utils.cloneObject(this.logicData);
        addtionalParam = this.service.utils.cloneObject((addtionalParam || {}));
        var logicFB = this._fb.group({
            logicArr: this.getFormArray()
        });
        question["logicArr"].forEach(function (logic) {
            _this.setDataForAdditionalParam(logicData, addtionalParam, logic);
            logicFB.get('logicArr').push(_this.getFormGroup(logicData));
        });
        logicFB.patchValue(question);
        return logicFB;
    };
    LogicService.prototype.getFormGroup = function (data) {
        return this._fb.group(data);
    };
    LogicService.prototype.getFormArray = function () {
        return this._fb.array([]);
    };
    LogicService.prototype.setDataForAdditionalParam = function (data, addtionalParam, item) {
        var _this = this;
        var _loop_1 = function (key) {
            if (Array.isArray(addtionalParam[key]) && (addtionalParam[key][0] != undefined)) {
                data[key] = this_1.getFormArray();
                item && item[key] && Array.isArray(item[key]) && item[key].forEach(function (keyData) {
                    data[key].push(_this.getFormGroup(addtionalParam[key][0]));
                });
            }
            else {
                data[key] = addtionalParam[key];
            }
        };
        var this_1 = this;
        for (var key in addtionalParam) {
            _loop_1(key);
        }
    };
    LogicService.prototype.getAdditionalOptionsForQuestionList = function () {
        return [{
                value: "disqua",
                label: "Disqualification Page"
            }, {
                value: "end",
                label: "End Page"
            }
        ];
    };
    LogicService.prototype.getLogicFormData = function (question, logicArr, logicName) {
        var _this = this;
        var logicFormData = {};
        var questionLogicArr = question.logicArr.filter(function (logic) { return logic.logic != logicName; });
        logicArr.forEach(function (logic, index) {
            !logic.ansId && (logic.ansId = null);
            !logic.destPId && (logic.destPId = null);
            !logic.destQId && (logic.destQId = null);
            if (!_this.checkForAdditionalOptions(logic.lType)) {
                logic.destQId = null;
                logic.destPId = null;
            }
            delete logic.text;
            questionLogicArr.push(logic);
        });
        var finalLogicArr = [];
        this.logicNameArr.forEach(function (lName) {
            finalLogicArr.push(questionLogicArr.filter(function (logic) { return logic.logic == lName; }));
        });
        finalLogicArr = Array.prototype.concat.apply([], finalLogicArr);
        logicFormData["logicArr"] = finalLogicArr;
        return logicFormData;
    };
    LogicService.prototype.saveLogicData = function (logicFormData, qId) {
        logicFormData['pageId'] = this.service.form.formObj.getPageByQuestionId(qId).getId();
        logicFormData['surId'] = this.service.form.formObj._id;
        return this.service.resource.saveLogicData(logicFormData, qId);
    };
    LogicService.prototype.checkForAdditionalOptions = function (value) {
        return this.getAdditionalOptionsForQuestionList().map(function (item) { return item.value; }).indexOf(value) == -1;
    };
    LogicService.prototype.removeAllLogicByName = function (question, logicName) {
        var LogicArr = question.logicArr.filter(function (logic) { return logic.logic != logicName; });
        var data = { 'logicArr': LogicArr };
        return this.saveLogicData(data, question._id);
    };
    LogicService.prototype.getCarryOption = function (qId) {
        var result = {
            topArray: [],
            bottomArray: []
        };
        var carryOptions = this.service.form.formObj.getCarryOptionArrays(qId);
        carryOptions.topArray.forEach(function (qData) {
            qData.options.forEach(function (opt) {
                opt.isCarry = true;
                result.topArray.push(opt);
            });
        });
        carryOptions.bottomArray.forEach(function (qData) {
            qData.options.forEach(function (opt) {
                opt.isCarry = true;
                result.bottomArray.push(opt);
            });
        });
        return result;
    };
    LogicService.prototype.getLogicOnOption = function (logicArr, option, scope) {
        var result = null;
        try {
            var logic = logicArr.find(function (logic) { return logic.ansId == option._id; });
            if (logic) {
                logic['text'] = option['text'];
            }
            else {
                logic = scope.getLogicData.call(scope, option);
            }
            result = logic;
        }
        catch (ex) {
            console.error(ex);
        }
        return result;
    };
    return LogicService;
}());
LogicService = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormBuilder"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_forms__["FormBuilder"]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object])
], LogicService);

var _a, _b;
//# sourceMappingURL=logic.service.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.html":
/***/ (function(module, exports) {

module.exports = "<div [ngSwitch]=\"actionObj.name\" class=\"logicClass\">\n  <div *ngSwitchCase=\"allLogicName.skip.name\">\n    <app-skip-logic [qId]=\"qId\" (logicChanged)=\"onChangeLogic($event)\" (canceled)=\"changeView($event)\"></app-skip-logic>\n  </div>\n  <div *ngSwitchCase=\"allLogicName.compound.name\">\n    <app-delayed-branching [qId]=\"qId\" (logicChanged)=\"onChangeLogic($event)\" (canceled)=\"changeView($event)\"></app-delayed-branching>\n  </div>\n  <div *ngSwitchCase=\"allLogicName.display.name\">\n    <app-display-logic [qId]=\"qId\" (logicChanged)=\"onChangeLogic($event)\" (canceled)=\"changeView($event)\"></app-display-logic>\n  </div>\n  <div *ngSwitchCase=\"allLogicName.protractor.name\">\n    <app-ticket-generation [qId]=\"qId\" (logicChanged)=\"onChangeLogic($event)\" (canceled)=\"changeView($event)\"></app-ticket-generation>\n  </div>\n  <div *ngSwitchCase=\"allLogicName.promoter.name\">\n    <app-promoter-amplification [qId]=\"qId\" (logicChanged)=\"onChangeLogic($event)\" (canceled)=\"changeView($event)\"></app-promoter-amplification>\n  </div>\n  <div *ngSwitchCase=\"allLogicName.embed.name\">\n    <app-edata-logic [qId]=\"qId\" (logicChanged)=\"onChangeLogic($event)\" (canceled)=\"changeView($event)\"></app-edata-logic>\n  </div>\n  <div *ngSwitchCase=\"allLogicName.rLogic.name\">\n    <app-redirect-logic [qId]=\"qId\" (logicChanged)=\"onChangeLogic($event)\" (canceled)=\"changeView($event)\"></app-redirect-logic>\n  </div>\n  <div *ngSwitchCase=\"'Carry Forward'\">\n    <app-carry-forward [qId]=\"qId\" [scale]=\"actionObj.scale\" (carryForwardChanged)=\"onChange($event)\" (canceled)=\"changeView($event)\"></app-carry-forward>\n  </div>\n  <div *ngSwitchCase=\"'Criteria'\" class=\"left-panel-criteria\">\n    <app-criteria [qId]=\"qId\" (onChange)=\"onChangeCriteria($event)\" (canceled)=\"onChangeCriteria($event)\"></app-criteria>\n  </div>\n  <div *ngSwitchCase=\"'Randomizations'\" class=\"left-panel-criteria\">\n    <div style=\"margin-left: 12px; margin-top: 4px; cursor: pointer;\" (click)=\"changeView($event)\">\n      <img src=\"../../../../assets/images/arrow.png\" style=\"max-width: 32px;\">\n    </div>\n    <app-survey-randomization [ranInpData]=\"{'type':'Options', 'qid': qId}\" (onChange)=\"onChangeRdmz($event)\" (canceled)=\"onChangeRdmz($event)\"></app-survey-randomization>\n  </div>\n  <div *ngSwitchDefault>\n    <div class=\"logic-header\">\n      <h4 class=\"logicSideTitle\">Conditional Flow</h4>\n    </div>\n    <ul class=\"logicList\">\n      <li [hidden]=\"!isSkipLogic\" (click)=\"changeView(allLogicName.skip.name);\" [ngClass]=\"{'active': !!logicDisplayObj.skip.length, 'corrupt': logicDisplayObj[allLogicName.skip.name][0]?.isCorrupt}\">Skip Logic\n        <div [hidden]=\"!logicDisplayObj.skip.length\">\n          <span class=\"LogicSummary\">\n            <div *ngFor=\"let item of logicDisplayObj[allLogicName.skip.name]; index as idx\">\n              <div *ngIf=\"idx < 3\">\n                <span>Option </span> <span class=\"bold_text\" innerHTML=\"{{item.optionText}}\"></span>\n                <span> skips to </span> <span class=\"bold_text\"> {{item.skipTo }}</span>\n              </div>\n            </div>\n            <div *ngIf=\"logicDisplayObj[allLogicName.skip.name].length > 3\">...</div>\n          </span>\n          <span><button type=\"button\" class=\"resetButton\">Reset</button></span>\n        </div>\n      </li>\n      <li (click)=\"changeView(allLogicName.compound.name);\" [ngClass]=\"{'active': !!logicDisplayObj.compound.length, 'corrupt': logicDisplayObj[allLogicName.compound.name][0]?.isCorrupt}\">Delayed Branching\n        <div [hidden]=\"!logicDisplayObj.compound.length\">\n          <span class=\"LogicSummary\">\n            <div *ngFor=\"let item of logicDisplayObj[allLogicName.compound.name]; index as idx\">\n              <div *ngIf=\"idx < 3\">\n                <span [hidden]=\"idx === 0\" class=\"bold_text\">Else </span>\n                <span [hidden]=\"item.metUnmet == 0\">\n                  <span class=\"bold_text\"> If </span> criteria\n                  <span class=\"bold_text\"> {{item.criteria}} </span>\n                </span> skip to <span> {{item.skipTo}} </span>\n              </div>\n            </div>\n            <div *ngIf=\"logicDisplayObj[allLogicName.compound.name].length > 3\">...</div>\n          </span>\n          <span><button type=\"button\" class=\"resetButton\">Reset</button></span>\n        </div>\n      </li>\n      <li (click)=\"changeView(allLogicName.display.name);\" [ngClass]=\"{'active': !!logicDisplayObj.display.length, 'corrupt': logicDisplayObj[allLogicName.display.name][0]?.isCorrupt}\">Display Logic\n        <div [hidden]=\"!logicDisplayObj.display.length\">\n          <span class=\"LogicSummary\">\n            <div>\n              <span> Will be displayed if criteria </span>\n              <span class=\"bold_text\" *ngFor=\"let item of logicDisplayObj[allLogicName.display.name]; index as idx\">\n                {{item.criteria}}\n                <span [hidden]=\"!(item.criteria && idx != logicDisplayObj[allLogicName.display.name].length - 1)\">, </span>\n              </span> is met\n            </div>\n            <!-- <div>\n              <span [hidden]=\"logicDisplayObj[allLogicName.display.name].length <= 1\">\n                <span> Options will be displayed if criteria </span>\n                <span *ngFor=\"let item of logicDisplayObj[allLogicName.display.name]; index as idx\" [hidden]=\"item.metUnmet == 0\">\n                  <span class=\"bold_text\"> {{item.criteria}}, </span>\n                </span>\n                <span> is met </span>\n              </span>\n            </div> -->\n            <div *ngIf=\"logicDisplayObj[allLogicName.display.name].length > 3\">...</div>\n          </span>\n          <span><button type=\"button\" class=\"resetButton\">Reset</button></span>\n        </div>\n      </li>\n      <li (click)=\"changeView(allLogicName.protractor.name);\" [ngClass]=\"{'active': !!logicDisplayObj.protractor.length, 'corrupt': logicDisplayObj[allLogicName.protractor.name][0]?.isCorrupt}\">Ticket Generation\n        <div [hidden]=\"!logicDisplayObj.protractor.length\">\n          <span class=\"LogicSummary\"><div>Logic Applied</div></span>\n          <span><button type=\"button\" class=\"resetButton\">Reset</button></span>\n        </div>\n      <li [hidden]=\"!isPromoter\" (click)=\"changeView(allLogicName.promoter.name);\">Promoter Amplification</li>\n      <li (click)=\"changeView(allLogicName.embed.name);\" [ngClass]=\"{'active': !!logicDisplayObj.embed.length, 'corrupt': logicDisplayObj[allLogicName.embed.name][0]?.isCorrupt}\">Embedded Data Logic\n        <div [hidden]=\"!logicDisplayObj.embed.length\">\n          <span class=\"LogicSummary\"><div>Logic Applied</div></span>\n          <span><button type=\"button\" class=\"resetButton\">Reset</button></span>\n        </div>\n      </li>\n      <!-- <li (click)=\"changeView(allLogicName.rLogic.name);\">Redirection Logic</li> -->\n      <li (click)=\"gotoCarryForward(0);\" [hidden]=\"!actions.carryChoice\">Carry Forward Choice\n        <!-- <div\">\n          <span class=\"LogicSummary\"><div>Logic Applied</div></span>\n          <span><button type=\"button\" class=\"resetButton\">Reset</button></span>\n        </div> -->\n      </li>\n      <li (click)=\"gotoCarryForward(1);\" [hidden]=\"!actions.carryRow\">Carry Forward Rows\n        <!-- <div\">\n          <span class=\"LogicSummary\"><div>Logic Applied</div></span>\n          <span><button type=\"button\" class=\"resetButton\">Reset</button></span>\n        </div> -->\n      </li>\n      <li (click)=\"gotoCarryForward(2);\" [hidden]=\"!actions.carryCol\">Carry Forward Columns\n        <!-- <div\">\n          <span class=\"LogicSummary\"><div>Logic Applied</div></span>\n          <span><button type=\"button\" class=\"resetButton\">Reset</button></span>\n        </div> -->\n      </li>\n      <li (click)=\"changeView('Randomizations');\" [hidden]=\"!actions['option-randomize']\">Randomizations\n        <!-- <div>\n          <span class=\"LogicSummary\"><div>Logic Applied</div></span>\n          <span><button type=\"button\" class=\"resetButton\">Reset</button></span>\n        </div> -->\n      </li>\n    </ul>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.scss":
/***/ (function(module, exports) {

module.exports = ".logic-panel {\n  margin-bottom: 50px; }\n\n.logicList {\n  list-style-type: none;\n  padding: 10px 10px 10px 15px; }\n\n.logicList li {\n  cursor: pointer;\n  width: 100%;\n  border: 1px solid #ebebeb;\n  border-radius: 3px;\n  padding: 10px;\n  margin-bottom: 10px;\n  font-family: 'Helvetica Neue Medium'; }\n\n.logicList li.active {\n  border: 1px solid #C7E6C3;\n  background-color: rgba(249, 255, 248, 0.5); }\n\n.LogicSummary {\n  width: 75%; }\n\n.logic_else_if_btn {\n  margin: 0px 10px 15px 15px;\n  width: 100%;\n  margin-left: 0px;\n  border: 1px dashed #CDCBCB;\n  background-color: #FFF;\n  color: #45A83A; }\n\n.logic_else_if_btn:focus {\n  outline: none; }\n\n.logic_else_if_hr {\n  border: 1px solid #CDCBCB;\n  border-radius: 4px;\n  border-style: dotted;\n  margin: 10px 0px 10px;\n  color: #5eb65c;\n  text-align: center; }\n\n.logicSideTitle {\n  font-family: 'Helvetica Neue Medium'; }\n\n.logicList span {\n  display: inline-block;\n  vertical-align: top;\n  font-size: 12px;\n  color: #777; }\n\n.resetButton {\n  background-color: #fff;\n  border: 1px solid #f2f2f2;\n  margin-left: 10px;\n  padding: 5px 10px;\n  color: #f00; }\n\n.removeButton {\n  height: 40px;\n  width: 40px;\n  padding: 0 5px;\n  float: right;\n  background: url(/assets/images/editSurvey/minus1.svg);\n  cursor: pointer;\n  display: inline-block;\n  background-repeat: no-repeat; }\n\n.closeButton {\n  height: 40px;\n  width: 40px;\n  padding: 0 5px;\n  float: right;\n  background: url(/assets/images/editSurvey/cross.svg);\n  cursor: pointer;\n  display: inline-block;\n  background-repeat: no-repeat; }\n\n.logicBodyContainer {\n  border: 1px solid #EBEBEB;\n  border-radius: 3px;\n  margin: 10px 10px 10px 15px;\n  padding: 20px 10px 10px 10px;\n  border-radius: 2px; }\n\n.save_logic {\n  background-color: #1B97E0;\n  border-radius: 2px;\n  width: 47%;\n  margin-left: 15px;\n  color: #fff; }\n\n.cancel_save_logic {\n  border: 1px solid #1B97E0;\n  border-radius: 2px;\n  width: 42%;\n  float: right;\n  background-color: #fff;\n  color: #1B97E0;\n  margin-right: 10px; }\n\n.logics_label {\n  font-family: 'Helvetica Neue Medium';\n  font-size: 14px;\n  font-weight: 500; }\n\n.logic_type_heading {\n  margin-bottom: 20px;\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n  display: inline; }\n\n.logic-header {\n  margin: 10px 10px 20px 15px; }\n\ndiv.logicBodyContainer > div {\n  margin-bottom: 15px; }\n\n.alert-msg {\n  color: #6a6b4d;\n  background-color: #f0f1d8;\n  border: 1px solid #d8daae;\n  width: 100%;\n  padding: 10px;\n  border-radius: 4px;\n  font-family: 'Helvetica Neue Medium'; }\n\n.logicList li.active.corrupt {\n  border-color: #ff0000;\n  background-color: rgba(255, 0, 0, 0.1); }\n\ninput[type=checkbox] {\n  display: none; }\n\n.custom_checkbox_grp {\n  margin-right: 7px;\n  margin-top: 8px;\n  display: inline-block; }\n\n.custom_checkbox_grp input[type=checkbox] {\n    display: none; }\n\n.custom_checkbox_grp .custom_checkbox_txt {\n    cursor: pointer;\n    font-family: 'Helvetica Neue Medium';\n    font-size: 12px;\n    font-weight: 500;\n    vertical-align: text-bottom; }\n\n.custom_checkbox_grp input[type=checkbox] + .custom_checkbox_txt:before {\n    content: '';\n    background: url(/assets/images/editSurvey/uncheck.svg);\n    background-repeat: no-repeat;\n    height: 16px;\n    width: 16px;\n    position: absolute;\n    margin-left: -20px;\n    background-size: 90%; }\n\n.custom_checkbox_grp input[type=checkbox]:checked + .custom_checkbox_txt:before {\n    content: '';\n    background: url(/assets/images/editSurvey/check.svg);\n    background-repeat: no-repeat;\n    height: 16px;\n    width: 16px;\n    position: absolute;\n    margin-left: -20px;\n    background-size: 90%; }\n\n.custom_checkbox {\n  margin-left: 20px;\n  cursor: pointer;\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n  font-weight: 500;\n  vertical-align: text-bottom; }\n\ninput[type=checkbox] + .custom_checkbox {\n  margin-left: -13px; }\n\ninput[type=checkbox] + .custom_checkbox:before {\n  content: '';\n  background: url(/assets/images/editSurvey/uncheck.svg);\n  background-repeat: no-repeat;\n  height: 16px;\n  width: 16px;\n  position: absolute;\n  margin-top: 3px; }\n\ninput[type=checkbox]:checked + .custom_checkbox {\n  margin-left: -13px; }\n\ninput[type=checkbox]:checked + .custom_checkbox:before {\n  content: '';\n  background: url(/assets/images/editSurvey/check.svg);\n  background-repeat: no-repeat;\n  height: 16px;\n  width: 16px;\n  position: absolute;\n  margin-top: 3px; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LogicsComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__ = __webpack_require__("./src/app/shared/questionTemplates/question-types.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__logic_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logic.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var LogicsComponent = (function () {
    function LogicsComponent(logicServ, qTypesServ, services) {
        this.logicServ = logicServ;
        this.qTypesServ = qTypesServ;
        this.services = services;
        this.logicChanged = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.allLogicName = {};
        this.actionObj = {
            name: '',
            prev: ''
        };
        this.actions = {};
        this.isSkipLogic = false;
        this.isDelayedBranching = true;
        this.isDisplayLogic = true;
        this.isTicketGeneration = true;
        this.isPromoter = false;
        this.isEmbedded = true;
        this.isRedirection = true;
    }
    LogicsComponent.prototype.ngOnInit = function () {
        if (this.editLogicType) {
            this.actionObj.name = this.editLogicType;
        }
        this.allLogicName = this.logicServ.allLogicName;
        this.setLogicVisibility();
        this.setLogicArray();
    };
    LogicsComponent.prototype.setLogicVisibility = function () {
        var _this = this;
        this.qTypesServ.questionTypesJSON[this.qType].actions.forEach(function (item) {
            _this.actions[item.value] = true;
        });
        var question = this.services.form.getFormData().getQuestionById(this.qId);
        var fieldType = question.fieldType;
        if (fieldType.family == "multiChoice" || (fieldType.subtype == "radio" && fieldType.subtype == "checkbox" && fieldType.subtype == "dropdown")) {
            this.isSkipLogic = true;
        }
        if (fieldType.family == "matrix" && fieldType.subtype == "rating") {
            this.isSkipLogic = true;
            this.isPromoter = true;
        }
    };
    LogicsComponent.prototype.setLogicArray = function () {
        var _this = this;
        this.logicDisplayObj = {};
        var question = this.services.form.getFormData().getQuestionById(this.qId);
        this.logicServ.logicNameArr.forEach(function (logicName) {
            var logicArr = [];
            question.logicArr.filter(function (logic) {
                return logic.logic === logicName;
            }).forEach(function (logic) {
                var logicItem = {
                    isCorrupt: logic.isCorrupt,
                    metUnmet: logic.metUnmet
                };
                if (logicName === _this.allLogicName.skip.name) {
                    logicItem['optionText'] = _this.services.utils.getTextOutOfHtml(question.getOptionById(logic.ansId).text);
                    var skipTo = _this.getRedirectQuestion(logic.lType, logic.destQId);
                    logicItem['skipTo'] = skipTo;
                }
                else if (logicName === _this.allLogicName.compound.name) {
                    if (logic.metUnmet == 1) {
                        var criteria = _this.services.form.formObj.getCriteriaById(logic.ansId);
                        logicItem['criteria'] = criteria ? criteria.name : '';
                    }
                    var skipTo = _this.getRedirectQuestion(logic.lType, logic.destQId);
                    logicItem['skipTo'] = skipTo;
                }
                else if (logicName === _this.allLogicName.display.name) {
                    logicItem['optArr'] = logic.optArr;
                    if (logic.metUnmet == 1) {
                        var criteria = _this.services.form.formObj.getCriteriaById(logic.ansId);
                        logicItem['criteria'] = criteria ? criteria.name : '';
                    }
                    var skipTo = _this.getRedirectQuestion(logic.lType, logic.destQId);
                    logicItem['skipTo'] = skipTo;
                }
                logicArr.push(logicItem);
            });
            _this.logicDisplayObj[logicName] = logicArr;
        });
    };
    LogicsComponent.prototype.getRedirectQuestion = function (lType, destQId) {
        var result = '';
        if (lType === 'normal') {
            var countObj = this.services.form.formObj.getQuestionsCount();
            if (countObj.hasOwnProperty(destQId)) {
                var qCount = countObj[destQId];
                result = qCount ? 'Question ' + qCount : 'Statement';
            }
            else {
                result = null;
            }
        }
        (lType === 'disqua') && (result = 'Disqualification Page');
        (lType === 'end') && (result = 'End Page');
        (lType === 'end') && (result = 'End Page');
        return result;
    };
    LogicsComponent.prototype.changeView = function (viewName) {
        this.actionObj.prev = this.actionObj.name;
        this.actionObj.name = viewName || '';
    };
    LogicsComponent.prototype.gotoCarryForward = function (scale) {
        this.actionObj.scale = scale;
        this.changeView('Carry Forward');
    };
    LogicsComponent.prototype.onChange = function (event) {
        // console.log(event, this.services.form.getFormData());
        // this.logicChanged.emit(event);
        this.changeView(event.logicName);
    };
    LogicsComponent.prototype.onChangeLogic = function (event) {
        try {
            var question = this.services.form.getFormData().getQuestionById(this.qId);
            if (event.res) {
                question.setLogicArray(event.res.resBody.logicArr);
                this.setLogicArray();
            }
            this.changeView(event.view);
            this.services.form.allQuestionsOfSurvey[this.qId] = question;
            this.services.form.setLogicNamesArr(this.pId, this.qId, event.res.resBody.logicArr);
        }
        catch (ex) {
            console.error(ex);
        }
    };
    LogicsComponent.prototype.onChangeCriteria = function (event) {
        if (event === 'saved' || event === 'canceled') {
            this.changeView(this.actionObj.prev);
        }
    };
    LogicsComponent.prototype.onChangeRdmz = function (event) {
        this.logicChanged.emit(event.ranInpData);
    };
    return LogicsComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], LogicsComponent.prototype, "pId", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], LogicsComponent.prototype, "qId", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], LogicsComponent.prototype, "qType", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], LogicsComponent.prototype, "editLogicType", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], LogicsComponent.prototype, "logicChanged", void 0);
LogicsComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-logics',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.scss")],
        providers: [__WEBPACK_IMPORTED_MODULE_3__logic_service__["a" /* LogicService */]]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__logic_service__["a" /* LogicService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__logic_service__["a" /* LogicService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _d || Object])
], LogicsComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=logics.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/promoter.amplification/promoter.amplification.component.css":
/***/ (function(module, exports) {

module.exports = ".pullCheckboxRight{\n  float:right;\n  /* margin-right: 20px; */\n}\n\n.panel-heading label{\n  width: 100%;\n  position: relative;\n}\n\ndiv .logicBodyContainer > div{\n  margin-bottom: 5px;\n}\n\nlabel{\n  margin-bottom: 0px;\n}\n\ndiv .panel-body > div{\n  margin-top: 5px;\n}\n\n.logicBodyContainer{\n  padding-top: 10px;\n}\n\n/* .panel-heading{\n  margin-bottom: 10px;\n} */\n\np{\n  font-style: italic;\n  font-size: 12px;\n  font-weight: 500;\n}\n\n.logics_label{\n  font-family: 'Helvetica';\n}\n\n.panel-body{\n  background-color: #fff;\n  padding-top: 0px;\n}\n\n.panelCheckColor{\n  background-color: #D8D8D8;\n}\n\n.panelNocolor{\n  background-color: #fff;\n}\n\n.optional{\n  font-family: \"Helvetica\";\n  font-size: 10px;\n  font-weight: 500;\n}\n\n.mandatory{\n  color: #f00;\n  font-size: 20px;\n}\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/promoter.amplification/promoter.amplification.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"logic-panel\">\n  <div class=\"logic-header\">\n      <span class=\"logicSideTitle\">Promoter Amplification Logic </span>\n      <span class=\"remove-all-logic-btn\">\n        <button class=\"btn closeButton\" type=\"button\" (click)=\"removeAllLogic()\"></button>\n      </span>\n  </div>\n  <div class=\"logicBodyContainer\">\n    <div class=\"logics_label\"><p>If the user selects 9,10 in this NPS Type question he would be provided an option of promoting links you provide below on social media:</p></div>\n    <div class=\"panel panel-default\">\n      <div class=\"panel-heading promoter_panel_heading\" [ngClass]=\"flagsArr['fa'] ? 'panelCheckColor' : 'panelNocolor'\">\n        <label class=\"promoter_label\">\n          <span><img src=\"/assets/images/editSurvey/facebook.svg\" width=\"20px\"></span>\n          <span class=\"logics_label\">Facebook</span>\n          <span class=\"pullCheckboxRight\"><input type=\"checkbox\" [(ngModel)]=\"flagsArr['fa']\" (change)=\"togglePanelBody('facebook')\">\n            <span class=\"custom_checkbox\"></span>\n          </span>\n        </label>\n      </div>\n      <div class=\"panel-body\" [hidden]=\"!flagsArr['fa']\">\n        <div>\n          <span class=\"mandatory\">*</span>\n          <span>Link to Share:</span>\n          <div><input class='form-control' type=\"text\" placeholder=\"Enter a VALID link to be shared\" [(ngModel)]='shareContentObj.fa.shareUrl' (input)=\"disableSubmitButton()\"></div>\n        </div>\n        <div>\n          <span class=\"mandatory\">*</span>\n          <span>App ID:</span>\n          <div><input  class='form-control ' type=\"text\" placeholder=\"Survey2connect AppID by default\" [(ngModel)]='apiDocObj.fa.appId' (input)=\"validatefbApi()\"></div>\n            <div *ngIf='buttonFlag&&fbapiFlag' class=\"alert alert-danger\">\n              Enter the Correct Facbebbok AppId\n            </div>\n        </div>\n        <div>\n          <span>Message shared on facebook:</span>\n          <span class=\"optional\">(optional)</span>\n          <div><input  class='form-control ' type=\"text\" placeholder=\"Enter the message body of link to be shared\" [(ngModel)]='shareContentObj.fa.shareMsg'></div>\n        </div>\n        <div>\n          <span>Caption on Facebook Link:</span>\n          <span class=\"optional\">(optional)</span>\n          <div><input  class='form-control ' type=\"text\" placeholder=\"Enter caption for the facebook link\" [(ngModel)]='shareContentObj.fa.shareCaption'></div>\n        </div>\n      </div>\n    </div>\n    <div class=\"panel panel-default\">\n      <div class=\"panel-heading promoter_panel_heading\" [ngClass]=\"flagsArr['go'] ? 'panelCheckColor' : 'panelNocolor'\">\n        <label class=\"promoter_label\">\n          <span><img src=\"/assets/images/editSurvey/google-plus.svg\" width=\"20px\"></span>\n          <span class=\"logics_label\">Google</span>\n          <span class=\"pullCheckboxRight\"><input type=\"checkbox\" [(ngModel)]=\"flagsArr['go']\" (change)=\"togglePanelBody('google')\">\n            <span class=\"custom_checkbox\"></span>\n          </span>\n        </label>\n      </div>\n      <div class=\"panel-body\" [hidden]=\"!flagsArr['go']\">\n        <div>\n          <span class=\"mandatory\">*</span>\n          <span>Link to Share:</span>\n          <span><input class='form-control ' type=\"text\" placeholder=\"Enter a VALID link to be shared\" [(ngModel)]='shareContentObj.go.shareUrl' (input)=\"disableSubmitButton()\"></span>\n        </div>\n        <div>\n          <span>Message shared on this social media:</span>\n          <span class=\"optional\">(optional)</span>\n          <span><input class='form-control ' type=\"text\" placeholder=\"Enter Message to be shared\" [(ngModel)]='shareContentObj.go.shareMsg'></span>\n        </div>\n      </div>\n    </div>\n    <div class=\"panel panel-default\">\n      <div class=\"panel-heading promoter_panel_heading\" [ngClass]=\"flagsArr['tw'] ? 'panelCheckColor' : 'panelNocolor'\">\n        <label class=\"promoter_label\">\n          <span><img src=\"/assets/images/editSurvey/twitter.svg\" width=\"20px\"></span>\n          <span class=\"logics_label\">Twitter</span>\n          <span class=\"pullCheckboxRight\"><input type=\"checkbox\" [(ngModel)]=\"flagsArr['tw']\" (change)=\"togglePanelBody('twitter')\">\n            <span class=\"custom_checkbox\"></span>\n          </span>\n        </label>\n      </div>\n      <div class=\"panel-body\" [hidden]=\"!flagsArr['tw']\">\n        <div>\n          <span class=\"mandatory\">*</span>\n          <span>Link to Share:</span>\n          <span><input class='form-control ' type=\"text\" placeholder=\"Enter a VALID link to be shared\" [(ngModel)]='shareContentObj.tw.shareUrl' (input)=\"disableSubmitButton()\"></span>\n        </div>\n        <div>\n          <span>Message shared on this social media:</span>\n          <span class=\"optional\">(optional)</span>\n          <span><input class='form-control ' type=\"text\" placeholder=\"Enter Message to be shared\" [(ngModel)]='shareContentObj.tw.shareMsg'></span>\n        </div>\n      </div>\n    </div>\n    <div class=\"panel panel-default\">\n      <div class=\"panel-heading promoter_panel_heading\" [ngClass]=\"flagsArr['li'] ? 'panelCheckColor' : 'panelNocolor'\">\n        <label class=\"promoter_label\">\n          <span><img src=\"/assets/images/editSurvey/linkedin.svg\" width=\"20px\"></span>\n          <span class=\"logics_label\">LinkedIn</span>\n          <span class=\"pullCheckboxRight\"><input type=\"checkbox\" [(ngModel)]=\"flagsArr['li']\" (change)=\"togglePanelBody('linkedin')\">\n            <span class=\"custom_checkbox\"></span>\n          </span>\n        </label>\n      </div>\n      <div class=\"panel-body\" [hidden]=\"!flagsArr['li']\">\n        <div>\n          <span class=\"mandatory\">*</span>\n          <span>Link to Share:</span>\n          <span><input class='form-control ' type=\"text\" placeholder=\"Enter a VALID link to be shared\" [(ngModel)]='shareContentObj.li.shareUrl' (input)=\"disableSubmitButton()\"></span>\n        </div>\n        <div>\n          <span>Message shared on this social media:</span>\n          <span class=\"optional\">(optional)</span>\n          <span><input class='form-control ' type=\"text\" placeholder=\"Enter Message to be shared\" [(ngModel)]='shareContentObj.li.shareMsg'></span>\n        </div>\n      </div>\n    </div>\n    <div class=\"panel panel-default\">\n      <div class=\"panel-heading promoter_panel_heading\" [ngClass]=\"flagsArr['wh'] ? 'panelCheckColor' : 'panelNocolor'\">\n        <label class=\"promoter_label\">\n          <span><img src=\"/assets/images/editSurvey/whatsapp.svg\" width=\"20px\"></span>\n          <span class=\"logics_label\">Whatsapp</span>\n          <span class=\"optional\">(Would be visible only on mobile devices)</span>\n          <span class=\"pullCheckboxRight\"><input type=\"checkbox\" [(ngModel)]=\"flagsArr['wh']\" (change)=\"togglePanelBody('whatsapp')\">\n            <span class=\"custom_checkbox\"></span>\n          </span>\n        </label>\n      </div>\n      <div class=\"panel-body\" [hidden]=\"!flagsArr['wh']\">\n        <!-- <div>{{whFlag=1}}</div> -->\n        <div>\n          <span class=\"mandatory\">*</span>\n          <span>Link to Share:</span>\n          <span><input class='form-control ' type=\"text\" placeholder=\"Enter a VALID link to be shared\" [(ngModel)]='shareContentObj.wh.shareUrl' (input)=\"disableSubmitButton()\"></span>\n        </div>\n        <div>\n          <span>Message shared on this social media:</span>\n          <span class=\"optional\">(optional)</span>\n          <span><input class='form-control ' type=\"text\" placeholder=\"Enter Message to be shared\" [(ngModel)]='shareContentObj.wh.shareMsg'></span>\n        </div>\n      </div>\n    </div>\n    <div>\n      <span>Message to survey respondent</span>\n      <input type=\"text\" [(ngModel)]='sharedText' class=\"form-control \">\n    </div>\n  </div>\n  <div class=\"logic-footer\">\n    <button class=\"btn save_logic\" type=\"button\" [disabled]=\"buttonFlag\" (click)=\"saveLogic()\">Save</button>\n    <button class=\"btn cancel_save_logic\" type=\"button\" (click)=\"cancel()\">Cancel</button>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/promoter.amplification/promoter.amplification.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PromoterAmplificationComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__logic_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logic.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var PromoterAmplificationComponent = (function () {
    function PromoterAmplificationComponent(logicService, services) {
        this.logicService = logicService;
        this.services = services;
        this.logicChanged = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.canceled = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.apiDocObj = {
            share: '',
            fa: {
                appId: '1551121098529209',
                shareType: ''
            },
            go: {
                // appId:  '',
                shareType: ''
            },
            tw: {
                // appId:  '',
                shareType: ''
            },
            li: {
                // appId:  '',
                shareType: ''
            },
            wh: {
                // appId:  '',
                shareType: ''
            }
        };
        this.shareContentObj = {
            fa: {
                shareCaption: '',
                shareMsg: '',
                shareType: '',
                shareUrl: ''
            },
            go: {
                shareMsg: '',
                shareType: '',
                shareUrl: ''
            },
            tw: {
                shareMsg: '',
                shareType: '',
                shareUrl: ''
            },
            li: {
                shareMsg: '',
                shareType: '',
                shareUrl: ''
            },
            wh: {
                shareMsg: '',
                shareType: '',
                shareUrl: ''
            },
        };
        this.res = {
            apiDoc: [],
            share: '',
            lType: "normal",
            logic: "promoter",
            metUnmet: 1,
            shareContent: [],
            shareText: ''
        };
        this.logicArr = [];
        this.apiDoc = [];
        this.shareContentArr = [];
        this.sharety = '';
        this.sharedText = 'Thanks for the positive feedback. Please share with your friends.';
        this.logicName = 'promoter';
        this.buttonFlag = false;
        this.fbapiFlag = false;
        this.facebookAppIdDefaullt = '1551121098529209';
        this.correctApi = true;
        this.tagscheck = false;
    }
    PromoterAmplificationComponent.prototype.ngOnInit = function () {
        this.question = this.services.form.getFormData().getQuestionById(this.qId);
        this.flagsArr = [];
        this.flagsArr['fa'] = false;
        this.flagsArr['go'] = false;
        this.flagsArr['tw'] = false;
        this.flagsArr['li'] = false;
        this.flagsArr['wh'] = false;
        this.checkPrevData();
    };
    PromoterAmplificationComponent.prototype.togglePanelBody = function (str) {
        if (!this.flagsArr['fa']) {
            this.validatefbApi();
        }
        else {
            this.apiDocObj.fa.appId = this.facebookAppIdDefaullt;
            this.buttonFlag = false;
        }
        this.disableSubmitButton();
    };
    PromoterAmplificationComponent.prototype.disableSubmitButton = function () {
        for (var i = 0; i < Object.keys(this.flagsArr).length; i++) {
            if (!this.shareContentObj[Object.keys(this.flagsArr)[i]].shareUrl.trim()
                && this.flagsArr[Object.keys(this.flagsArr)[i]]) {
                this.buttonFlag = true;
                return;
            }
            if (Object.keys(this.flagsArr)[i] == 'fa'
                && !this.apiDocObj.fa.appId.trim()
                && this.flagsArr[Object.keys(this.flagsArr)[i]]) {
                this.buttonFlag = true;
                return;
            }
        }
        this.buttonFlag = false;
    };
    PromoterAmplificationComponent.prototype.validatefbApi = function () {
        var _this = this;
        if (!this.flagsArr['fa']) {
            return this.buttonFlag = false;
        }
        if (this.apiDocObj.fa.appId == '') {
            this.buttonFlag = true;
            return;
        }
        this.logicService.validateFbAppId(this.apiDocObj.fa.appId).subscribe(function (data) {
            _this.services.toastr.success('Successfully verified the AppId');
            if (_this.shareContentObj.fa.shareUrl == '') {
                _this.buttonFlag = true;
            }
            else
                _this.buttonFlag = false;
            _this.fbapiFlag = false;
            _this.facebookAppIdDefaullt = _this.apiDocObj.fa.appId;
        }, function (err) {
            _this.services.toastr.error('Please enter the correct Facebook AppId');
            _this.buttonFlag = true;
            _this.fbapiFlag = true;
        });
    };
    PromoterAmplificationComponent.prototype.checkPrevData = function () {
        for (var i = 0; i < this.question.logicArr.length; i++) {
            if (this.question.logicArr[i].logic == 'promoter') {
                for (var j = 0; j < this.question.logicArr[i].apiDoc.length; j++) {
                    var shareVar = this.question.logicArr[i].apiDoc[j].shareType;
                    var flag = shareVar + 'Flag';
                    this.apiDocObj[shareVar] = this.question.logicArr[i].apiDoc[j];
                }
                for (var j = 0; j < this.question.logicArr[i].shareContent.length; j++) {
                    var shareVar = this.question.logicArr[i].apiDoc[j].shareType;
                    this.flagsArr[shareVar] = true;
                    this.shareContentObj[shareVar] = this.question.logicArr[i].shareContent[j];
                }
            }
        }
    };
    PromoterAmplificationComponent.prototype.saveLogic = function () {
        var _this = this;
        this.logicArr = [];
        this.apiDoc = [];
        this.shareContentArr = [];
        this.sharety = '';
        if (this.flagsArr['fa']) {
            this.apiDocObj.fa.shareType = 'fa';
            this.apiDoc.push(this.apiDocObj.fa);
            this.sharety = this.sharety + 'fa|';
            this.shareContentObj.fa.shareType = 'fa';
            this.shareContentArr.push(this.shareContentObj.fa);
        }
        if (this.flagsArr['go']) {
            this.apiDocObj.go.shareType = 'go';
            this.apiDoc.push(this.apiDocObj.go);
            this.sharety = this.sharety + 'go|';
            this.shareContentObj.go.shareType = 'go';
            this.shareContentArr.push(this.shareContentObj.go);
        }
        if (this.flagsArr['tw']) {
            this.apiDocObj.tw.shareType = 'tw';
            this.apiDoc.push(this.apiDocObj.tw);
            this.sharety = this.sharety + 'tw|';
            this.shareContentObj.tw.shareType = 'tw';
            this.shareContentArr.push(this.shareContentObj.tw);
        }
        if (this.flagsArr['li']) {
            this.apiDocObj.li.shareType = 'li';
            this.apiDoc.push(this.apiDocObj.li);
            this.sharety = this.sharety + 'li|';
            this.shareContentObj.li.shareType = 'li';
            this.shareContentArr.push(this.shareContentObj.li);
        }
        if (this.flagsArr['wh']) {
            this.apiDocObj.wh.shareType = 'wh';
            this.apiDoc.push(this.apiDocObj.wh);
            this.sharety = this.sharety + 'wh|';
            this.shareContentObj.wh.shareType = 'wh';
            this.shareContentArr.push(this.shareContentObj.wh);
        }
        this.res.apiDoc = this.apiDoc;
        this.res.share = this.sharety;
        this.res.shareContent = this.shareContentArr;
        this.res.shareText = this.sharedText;
        this.logicArr.push(this.res);
        var logicFormData = this.logicService.getLogicFormData(this.question, this.logicArr, this.logicName);
        this.logicService.saveLogicData(logicFormData, this.question._id).subscribe(function (data) {
            _this.logicChanged.emit({ logicName: _this.logicName, res: data });
        });
    };
    PromoterAmplificationComponent.prototype.removeAllLogic = function () {
        var _this = this;
        this.logicService.removeAllLogicByName(this.question, this.logicName).subscribe(function (data) {
            _this.logicChanged.emit({ logicName: _this.logicName, res: data });
            _this.services.toastr.success('Logic has been successfully removed.');
        });
    };
    PromoterAmplificationComponent.prototype.cancel = function () {
        this.canceled.emit();
    };
    return PromoterAmplificationComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], PromoterAmplificationComponent.prototype, "qId", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], PromoterAmplificationComponent.prototype, "logicChanged", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _b || Object)
], PromoterAmplificationComponent.prototype, "canceled", void 0);
PromoterAmplificationComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-promoter-amplification',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/promoter.amplification/promoter.amplification.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/promoter.amplification/promoter.amplification.component.css")]
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__logic_service__["a" /* LogicService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__logic_service__["a" /* LogicService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _d || Object])
], PromoterAmplificationComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=promoter.amplification.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/redirect.logic/redirect.logic.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"logic-panel\" [formGroup]=\"logicFormGroup\">\n  <div class=\"logic-header\">\n    <span class=\"logicSideTitle\">Set Redirection Logic</span>\n    <span class=\"remove-all-logic-btn\">\n      <button class=\"btn closeButton\" type=\"button\" (click)=\"removeAllLogic()\"></button>\n    </span>\n  </div>\n<div class=\"logicBodyContainer\">\n  <div>This logic will redirect to a specified link if the corresponding criteria is met. If no criteria is selected it will redirect to URL provided into Else block.</div>\n  <div formArrayName=\"logicArr\" class=\"logic-body\">\n    <div *ngFor=\"let logic of logicFormGroup.get('logicArr')?.controls; index as logicIdx\" [formGroupName]=\"logicIdx\">\n      <div class=\"logic_row\">\n        <div class=\"rd-criteria-box display_inline_block\">\n          <div *ngIf=\"logicIdx == 0\">\n            <label class=\"logics_label\">If </label>\n            <div class=\"logics_select_dropdown_div\">\n              <select class=\"form-control logics_select_small\" formControlName=\"ansId\" (change)=\"showCriteriaForm($event)\">\n                <option value=\"\" disabled=\"\">Select Criteria</option>\n                <option [value]=\"criteria._id\" *ngFor=\"let criteria of criteriaArr; index as criteria_idx\">{{criteria.name}}</option>\n                <option value=\"0\">Create New</option>\n              </select>\n            </div>\n            <div><label class=\"logics_label\"> Redirection Link :</label></div>\n          </div>\n        </div>\n        <div class=\"display_inline_block\">\n          <input placeholder=\"Enter a valid link\" type=\"text\" formControlName=\"url\" class=\"form-control\">\n        </div>\n      </div>\n    </div>\n  </div>\n  </div>\n  <div class=\"logic-footer\">\n    <button class=\"btn save_logic\" type=\"button\" (click)=\"saveLogic()\">Save</button>\n    <button class=\"btn cancel_save_logic\" type=\"button\" (click)=\"cancel()\">Cancel</button>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/redirect.logic/redirect.logic.component.scss":
/***/ (function(module, exports) {

module.exports = ".rd-criteria-box {\n  width: 50%; }\n\ndiv.logic_row div {\n  margin-bottom: 10px; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/redirect.logic/redirect.logic.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RedirectLogicComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__logic_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logic.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var RedirectLogicComponent = (function () {
    function RedirectLogicComponent(services, logicService) {
        this.services = services;
        this.logicService = logicService;
        this.logicChanged = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.canceled = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.logicName = this.logicService.allLogicName.rLogic.name;
        this.additionalKeysInLogic = {
            "ifCount": "",
            "url": ""
        };
    }
    RedirectLogicComponent.prototype.ngOnInit = function () {
        this.question = this.services.form.getFormData().getQuestionById(this.qId);
        this.criteriaArr = this.services.form.getFormData().getAllCriterias();
        this.setAppliedLogic();
    };
    RedirectLogicComponent.prototype.setAppliedLogic = function () {
        var _this = this;
        var question = this.services.utils.cloneObject(this.question);
        question.logicArr = question.logicArr.filter(function (logic) { return logic.logic == _this.logicName; });
        if (!question.logicArr.length) {
            question.logicArr.push(this.getLogicData(1));
            question.logicArr.push(this.getLogicData(0));
        }
        this.buildCriteriaForm(question);
    };
    RedirectLogicComponent.prototype.buildCriteriaForm = function (question) {
        this.logicFormGroup = this.logicService.buildCriteriaForm(question, this.additionalKeysInLogic);
    };
    RedirectLogicComponent.prototype.saveLogic = function () {
        var _this = this;
        var logicArr = this.logicFormGroup.value.logicArr;
        var logicFormData = this.logicService.getLogicFormData(this.question, logicArr, this.logicName);
        this.logicService.saveLogicData(logicFormData, this.question._id).subscribe(function (data) {
            _this.logicChanged.emit({ logicName: _this.logicName, res: data });
        });
    };
    RedirectLogicComponent.prototype.getLogicData = function (ifCount) {
        var logicObject = this.services.utils.cloneObject(this.logicService.logicData);
        if (this.additionalKeysInLogic) {
            for (var key in this.additionalKeysInLogic) {
                logicObject[key] = this.additionalKeysInLogic[key];
            }
        }
        logicObject["ifCount"] = ifCount;
        logicObject["logic"] = this.logicName;
        logicObject["lType"] = "normal";
        return logicObject;
    };
    RedirectLogicComponent.prototype.removeAllLogic = function () {
        var _this = this;
        this.logicService.removeAllLogicByName(this.question, this.logicName).subscribe(function (data) {
            _this.logicChanged.emit({ logicName: _this.logicName, res: data });
            _this.services.toastr.success('Logic has been successfully removed.');
        });
    };
    RedirectLogicComponent.prototype.showCriteriaForm = function (event) {
        (event.target.value == '0') && this.logicChanged.emit({ view: 'Criteria' });
    };
    RedirectLogicComponent.prototype.cancel = function () {
        this.canceled.emit();
    };
    return RedirectLogicComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], RedirectLogicComponent.prototype, "qId", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], RedirectLogicComponent.prototype, "logicChanged", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _b || Object)
], RedirectLogicComponent.prototype, "canceled", void 0);
RedirectLogicComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-redirect-logic',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/redirect.logic/redirect.logic.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/redirect.logic/redirect.logic.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_2__logic_service__["a" /* LogicService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__logic_service__["a" /* LogicService */]) === "function" && _d || Object])
], RedirectLogicComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=redirect.logic.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/skip.logic/skip.logic.component.css":
/***/ (function(module, exports) {

module.exports = "\n.logicBodyContainer{\n  padding: 0px 10px 0px 15px;\n}\n\ndiv.logicBodyContainer > div{\n  margin: 5px 0px;\n}\n\n.colPadding{\n  padding:0px;\n}\n\n.boxLabel{\n  font-family: \"Helvetica Neue Medium\";\n  font-size: 14px;\n}\n\n.logic_else_if_btn{\n  margin-bottom: 0px;\n}\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/skip.logic/skip.logic.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"logic-panel\" [formGroup]=\"logicFormGroup\">\n  <div class=\"logic-header\">\n    <span class=\"logicSideTitle\">Set Skip Logic</span>\n    <span class=\"remove_logic\">\n      <button class=\"btn closeButton\" type=\"button\" (click)=\"removeAllLogic()\"></button>\n    </span>\n  </div>\n  <div [hidden]=\"!isCircular\">\n    <div class=\"alert-msg\">Circular Logic warning. May lead to unexpected behaviour</div>\n  </div>\n  <div formArrayName=\"logicArr\">\n    <div *ngFor=\"let logic of logicFormGroup.get('logicArr')?.controls; index as logicIdx\" [formGroupName]=\"logicIdx\">\n      <div class=\"logic_row logicBodyContainer\">\n        <!-- Other than NPS question -->\n        <div *ngIf=\"!isNPSQues\" class=\"logic_width_40 display_inline_block\" align=\"center\">\n          <span innerHTML=\"{{logic.get('text').value}}\"></span>\n        </div>\n        <!-- For NPS question -->\n        <div [hidden]=\"!isNPSQues\" class=\"logic_action\">\n          <div class=\"db-logic-delete boxLabel logics_label\" (click)=\"deleteLogic(logicIdx)\">If the answer is...\n            <span class=\"removeButton\"></span>\n          </div>\n        </div>\n        <div *ngIf=\"isNPSQues\" class=\"row\" align=\"center\">\n          <div class=\"col-lg-12\">\n            <div class=\"row\">\n              <div class=\"col-lg-5 colPadding\">\n                <select #start class=\"form-control\" [ngModel]=\"question.selectedNPSOptions[logicIdx].start\" [ngModelOptions]=\"{standalone: true}\" (change)=\"updateNPSOptions('start', logicIdx, start.value)\">\n                  <option *ngFor=\"let op of npsOptions\" [value]=\"op\">{{op}}</option>\n                </select>\n              </div>\n              <div class=\"col-lg-2\">\n                <span class=\"logics_label\">to</span>\n              </div>\n              <div class=\"col-lg-5 colPadding\">\n                <select #end class=\"form-control\" [ngModel]=\"question.selectedNPSOptions[logicIdx].end\" [ngModelOptions]=\"{standalone: true}\" (change)=\"updateNPSOptions('end', logicIdx, end.value)\">\n                  <option *ngFor=\"let op of npsOptions\" [value]=\"op\">{{op}}</option>\n                </select>\n              </div>\n              <div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"display_inline_block\">\n          <span class=\"logics_select_dropdown_div\">\n            <select class=\"form-control logics_select_large\" (change)=\"updateLogic(logic, logicIdx)\" formControlName=\"destQId\">\n              <option value=\"\">No Branching</option>\n              <option *ngFor=\"let ques of questionList\" [value]=\"ques._id\" [disabled]=\"ques.type=='p'\" innerHTML=\"{{ques.title}}\"></option>\n              <option disabled=\"\">Custom Pages</option>\n              <option *ngFor=\"let addOp of additionalOptions\" [value]=\"addOp.value\">{{addOp.label}}</option>\n            </select>\n          </span>\n        </div>\n        <div [hidden]=\"!isNPSQues\" class=\"logic_action\">\n          <!-- <div class=\"db-logic-add\" (click)=\"addNewCondition(logicIdx)\">\n            <span class=\"add-button\"></span>\n          </div> -->\n          <button class=\"btn logic_else_if_btn\" type=\"button\" (click)=\"addNewCondition(logicIdx)\">\n            <span>+</span> Add another logic\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"logic-footer\">\n    <button class=\"btn save_logic\" type=\"button\" (click)=\"saveLogic()\">Save</button>\n    <button class=\"btn cancel_save_logic\" type=\"button\" (click)=\"cancel()\">Cancel</button>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/skip.logic/skip.logic.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SkipLogicComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__logic_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logic.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var SkipLogicComponent = (function () {
    function SkipLogicComponent(logicService, services) {
        this.logicService = logicService;
        this.services = services;
        this.logicChanged = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.canceled = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.logicName = this.logicService.allLogicName.skip.name;
        this.isNPSQues = false;
        this.isCircular = false;
    }
    SkipLogicComponent.prototype.ngOnInit = function () {
        this.question = this.services.form.getFormData().getQuestionById(this.qId);
        this.questionList = this.services.form.getAllQuestions();
        this.additionalOptions = this.logicService.getAdditionalOptionsForQuestionList();
        this.setAppliedLogic();
        this.checkCircularDependency();
    };
    SkipLogicComponent.prototype.setAppliedLogic = function () {
        var _this = this;
        var question = this.services.utils.cloneObject(this.question);
        if (question.fieldType.family == "matrix" && question.fieldType.subtype == "rating") {
            this.isNPSQues = true;
        }
        var logicArr = question.logicArr.filter(function (logic) { return logic.logic == _this.logicName; });
        question.logicArr = [];
        if (this.isNPSQues) {
            question.logicArr = this.setNPSLogic(question, logicArr);
        }
        else {
            question.fieldOptions.row.forEach(function (option) {
                var logic = _this.logicService.getLogicOnOption(logicArr, option, _this);
                question.logicArr.push(logic);
            });
            question.logicArr.forEach(function (logic) {
                if (!_this.logicService.checkForAdditionalOptions(logic.lType)) {
                    logic.destQId = logic.lType;
                }
            });
            var finalLogicArr_1 = [];
            var carryOptions = this.logicService.getCarryOption(question._id);
            carryOptions.topArray.forEach(function (option) {
                var logic = _this.logicService.getLogicOnOption(logicArr, option, _this);
                finalLogicArr_1.push(logic);
            });
            question.fieldOptions.row.forEach(function (option) {
                var logic = _this.logicService.getLogicOnOption(logicArr, option, _this);
                finalLogicArr_1.push(logic);
            });
            carryOptions.bottomArray.forEach(function (option) {
                var logic = _this.logicService.getLogicOnOption(logicArr, option, _this);
                finalLogicArr_1.push(logic);
            });
            question.logicArr = finalLogicArr_1;
        }
        this.logicFormGroup = this.logicService.buildCriteriaForm(question);
        console.log(this.logicFormGroup);
        this.appliedLogicsLength = question.logicArr.length;
    };
    SkipLogicComponent.prototype.setNPSLogic = function (question, logicArr) {
        var _this = this;
        this.npsOptions = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
        this.question.selectedNPSOptions = [];
        if (!logicArr.length) {
            var defaultOptions = [
                { start: 0, end: 6 },
                { start: 7, end: 8 },
                { start: 9, end: 10 },
            ];
            defaultOptions.forEach(function (option) {
                _this.question.selectedNPSOptions.push(option);
                question.logicArr.push(_this.getLogicData());
            });
        }
        else {
            var logicGroupArr = this.services.utils.groupBy(logicArr, function (item) { return [item.destQId]; });
            var currentIndex_1 = 0, start_1, end_1 = 0;
            console.log(this.question.fieldOptions.col);
            logicGroupArr.forEach(function (logicGroup, index) {
                start_1 = _this.services.utils.findIndex(_this.question.fieldOptions.col, "_id", logicGroup[0].ansId);
                if (start_1 > currentIndex_1) {
                    _this.question.selectedNPSOptions.push({ "start": currentIndex_1, "end": (start_1 - 1) });
                    question.logicArr.push(_this.getLogicData());
                    end_1 = start_1;
                }
                end_1 += (logicGroup.length - 1);
                console.log(end_1);
                _this.question.selectedNPSOptions.push({ "start": start_1, "end": end_1 });
                question.logicArr.push(logicGroup[0]);
                start_1 = end_1 + 1;
                currentIndex_1 = start_1;
            });
            if (end_1 < 10) {
                this.question.selectedNPSOptions.push({ "start": start_1, "end": 10 });
                question.logicArr.push(this.getLogicData());
            }
        }
        return question.logicArr;
    };
    SkipLogicComponent.prototype.addNewCondition = function (index) {
        if (this.appliedLogicsLength <= 10) {
            this.question.selectedNPSOptions.splice(index + 1, 0, { start: 0, end: 0 });
            this.logicFormGroup.get('logicArr')["insert"](index + 1, this.logicService.getFormGroup(this.getLogicData()));
            this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
        }
    };
    SkipLogicComponent.prototype.saveLogic = function () {
        var _this = this;
        var logicArr = [];
        if (this.isNPSQues) {
            if (!this.checkNPSValid()) {
                this.services.toastr.error("Not a valid logic");
                return;
            }
            this.question.selectedNPSOptions.forEach(function (option, index) {
                var start = option.start;
                var logicLength = option.end - option.start + 1;
                for (var i = start; i < start + logicLength; i++) {
                    var logicData = _this.getLogicData(_this.question.fieldOptions.col[i]);
                    for (var key in _this.logicFormGroup.get('logicArr').value[index]) {
                        if (key != "ansId")
                            logicData[key] = _this.logicFormGroup.get('logicArr').value[index][key];
                    }
                    logicArr.push(logicData);
                }
            });
        }
        else {
            logicArr = this.logicFormGroup.get('logicArr').value;
        }
        logicArr = logicArr.filter(function (logic) {
            return !!logic.destQId;
        });
        var logicFormData = this.logicService.getLogicFormData(this.question, logicArr, this.logicName);
        this.logicService.saveLogicData(logicFormData, this.question._id).subscribe(function (data) {
            if (!_this.services.form.formObj.isLastQuestionOnPage(_this.question._id)) {
                var page = _this.services.form.formObj.getPageByQuestionId(_this.question._id);
                _this.services.resource.addPageBreak(page._id, _this.services.form.formObj._id, _this.question._id).subscribe(function (data1) {
                    _this.logicChanged.emit({ logicName: _this.logicName, res: data });
                    _this.services.form.fetchSurveyDataFromServer(_this.services.form.formObj._id).subscribe(function (data2) {
                    });
                });
            }
            else {
                _this.logicChanged.emit({ logicName: _this.logicName, res: data });
            }
        });
    };
    SkipLogicComponent.prototype.updateLogic = function (logic, index) {
        if (this.logicService.checkForAdditionalOptions(logic.get('destQId').value)) {
            logic.get('lType').setValue("normal");
            logic.get('destPId').setValue(this.services.form.getPageId(logic.get('destQId').value));
        }
        else {
            logic.get('lType').setValue(logic.get('destQId').value);
        }
        this.checkCircularDependency();
    };
    SkipLogicComponent.prototype.checkCircularDependency = function () {
        var _this = this;
        this.isCircular = false;
        var questionCountAndId = this.services.form.getQuestionCountAndId();
        this.logicFormGroup.get('logicArr').value.forEach(function (item) {
            if (questionCountAndId.data[item.destQId] && (questionCountAndId.data[item.destQId] <= questionCountAndId.data[_this.question._id])) {
                _this.isCircular = true;
            }
        });
    };
    SkipLogicComponent.prototype.deleteLogic = function (index) {
        if (this.appliedLogicsLength > 1) {
            this.question.selectedNPSOptions.splice(index, 1);
            this.logicFormGroup.get('logicArr')["removeAt"](index);
            this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
        }
    };
    SkipLogicComponent.prototype.getLogicData = function (option) {
        var logicObject = this.services.utils.cloneObject(this.logicService.logicData);
        logicObject["logic"] = this.logicName;
        logicObject["ansId"] = option ? option._id : '';
        logicObject["text"] = option ? option.text : '';
        return logicObject;
    };
    SkipLogicComponent.prototype.checkNPSValid = function () {
        var valid = true;
        var previousLast = -1;
        var first;
        this.question.selectedNPSOptions.forEach(function (option) {
            if (valid == false) {
                return;
            }
            ;
            first = option.start;
            if (first - previousLast != 1) {
                valid = false;
            }
            else {
                previousLast = option.end;
            }
            if (previousLast < first) {
                valid = false;
            }
        });
        if (previousLast != 10) {
            valid = false;
        }
        ;
        return valid;
    };
    SkipLogicComponent.prototype.updateNPSOptions = function (key, index, value) {
        this.question.selectedNPSOptions[index][key] = +value;
    };
    SkipLogicComponent.prototype.removeAllLogic = function () {
        var _this = this;
        this.logicService.removeAllLogicByName(this.question, this.logicName).subscribe(function (data) {
            _this.logicChanged.emit({ logicName: _this.logicName, res: data });
            _this.services.toastr.success('Logic has been successfully removed.');
        });
    };
    SkipLogicComponent.prototype.cancel = function () {
        this.canceled.emit();
    };
    return SkipLogicComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], SkipLogicComponent.prototype, "qId", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], SkipLogicComponent.prototype, "logicChanged", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _b || Object)
], SkipLogicComponent.prototype, "canceled", void 0);
SkipLogicComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-skip-logic',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/skip.logic/skip.logic.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/skip.logic/skip.logic.component.css")]
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__logic_service__["a" /* LogicService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__logic_service__["a" /* LogicService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _d || Object])
], SkipLogicComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=skip.logic.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/ticket.generation/ticket.generation.component.html":
/***/ (function(module, exports) {

module.exports = "<form class=\"logic-panel\" [formGroup]=\"logicFormGroup\">\n  <div class=\"logic-header\">\n      <span class=\"logicSideTitle\">Set Ticket Logic</span>\n      <span class=\"remove-all-logic-btn\">\n        <button class=\"btn closeButton\" type=\"button\" (click)=\"removeAllLogic()\" title=\"Remove all logics\"></button>\n      </span>\n  </div>\n  <div class=\"alert-msg\">Select the criteria on the basis of which ticket would be generated on the selected rule.</div>\n  <div formArrayName=\"logicArr\" class=\"logicBodyContainer\">\n    <div *ngFor=\"let logic of logicFormGroup.get('logicArr')?.controls; index as logicIdx\" [formGroupName]=\"logicIdx\">\n      <div class=\"logic_else_if_hr\" [hidden]=\"logicIdx == 0 || (logic.get('ifCount').value == 0)\"></div>\n      <div class=\"logic_row\">\n        <div>\n          <!-- <div class=\"db-logic-add\" (click)=\"addNewCondition(0, logicIdx)\">\n            <span class=\"removeButton\">+</span>\n          </div> -->\n          <div [hidden]=\"appliedLogicsLength == 1\" class=\"db-logic-delete\" (click)=\"deleteLogic(logicIdx)\">\n            <span class=\"removeButton\"></span>\n          </div>\n        </div>\n        <div class=\"logic_width_40 display_inline_block\">\n          <div>\n            <label class=\"logics_label logic_delay_cond\">\n              <span [hidden]=\"logicIdx == 0 || (logic.get('ifCount').value === 1)\">Else</span> If Criteria *\n            </label>\n            <span class=\"logics_select_dropdown_div\">\n              <select class=\"form-control logics_select_small\" formControlName=\"ansId\" (change)=\"showCriteriaForm($event)\" required>\n                <option value=\"\" disabled=\"\">Select Criteria</option>\n                <option [value]=\"criteria._id\" *ngFor=\"let criteria of criteriaArr; index as criteria_idx\">{{criteria.name}}</option>\n                <option value=\"0\">Create New</option>\n              </select>\n            </span>\n          </div>\n        </div>\n        <div class=\"display_inline_block\">\n          <label class=\"logics_label\">Rule *</label>\n          <span class=\"logics_select_dropdown_div\">\n            <select class=\"form-control logics_select_large\" (change)=\"updateLogic(logic, logicIdx)\" formControlName=\"ruleId\" required>\n              <option disabled=\"\" value=\"\">Select Rule</option>\n              <option *ngFor=\"let rule of ticketRules\" [value]=\"rule._id\">{{rule.name}}</option>\n            </select>\n          </span>\n        </div>\n        <div class=\"logic_else_if_hr\">\n        </div>\n          <button class=\"btn logic_else_if_btn\" type=\"button\" (click)=\"addNewCondition(0, logicIdx)\"><span>+</span> Else Condition</button>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"logic_else_if_hr\">\n  </div>\n    <button class=\"btn logic_else_if_btn\" type=\"button\" (click)=\"addNewCondition(1)\"><span>+</span> If Condition</button>\n  <div class=\"logic-footer\">\n    <button class=\"btn save_logic\" type=\"button\" [disabled]=\"!logicFormGroup.valid\" (click)=\"saveLogic()\">Save</button>\n    <button class=\"btn cancel_save_logic\" type=\"button\" (click)=\"cancel()\">Cancel</button>\n  </div>\n</form>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/ticket.generation/ticket.generation.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logics/ticket.generation/ticket.generation.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TicketGenerationComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__logic_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logic.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var TicketGenerationComponent = (function () {
    function TicketGenerationComponent(logicService, services) {
        this.logicService = logicService;
        this.services = services;
        this.logicChanged = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.canceled = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.logicName = this.logicService.allLogicName.protractor.name;
        this.additionalKeysInLogic = {
            "ifCount": 0,
            "ruleId": ""
        };
    }
    TicketGenerationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.question = this.services.form.getFormData().getQuestionById(this.qId);
        this.criteriaArr = this.services.form.getFormData().getAllCriterias();
        this.services.resource.getTicketRules().subscribe(function (data) { return _this.ticketRules = data; });
        this.setAppliedLogic();
    };
    TicketGenerationComponent.prototype.setAppliedLogic = function () {
        var _this = this;
        var question = this.services.utils.cloneObject(this.question);
        question.logicArr = question.logicArr.filter(function (logic) { return logic.logic == _this.logicName; });
        if (!question.logicArr.length) {
            question.logicArr.push(this.getLogicData());
        }
        this.buildCriteriaForm(question);
        this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
    };
    TicketGenerationComponent.prototype.buildCriteriaForm = function (question) {
        this.logicFormGroup = this.logicService.buildCriteriaForm(question, this.additionalKeysInLogic);
    };
    TicketGenerationComponent.prototype.addNewCondition = function (ifCount, index) {
        this.logicFormGroup.get('logicArr')["insert"]((index != undefined) ? (index + 1) : this.appliedLogicsLength, this.logicService.getFormGroup(this.getLogicData(ifCount)));
        this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
        ifCount && (this.logicFormGroup.get('logicArr').value[0].ifCount = 1);
    };
    TicketGenerationComponent.prototype.saveLogic = function () {
        var _this = this;
        var logicArr = this.logicFormGroup.value.logicArr;
        var logicFormData = this.logicService.getLogicFormData(this.question, logicArr, this.logicName);
        this.logicService.saveLogicData(logicFormData, this.question._id).subscribe(function (data) {
            _this.logicChanged.emit({ logicName: _this.logicName, res: data });
        });
    };
    TicketGenerationComponent.prototype.updateLogic = function (logic, index) {
    };
    TicketGenerationComponent.prototype.deleteLogic = function (index) {
        if (this.appliedLogicsLength > 1) {
            this.logicFormGroup.get('logicArr')["removeAt"](index);
            this.appliedLogicsLength = this.logicFormGroup.get('logicArr')["controls"].length;
        }
        if (this.appliedLogicsLength == 1) {
            this.logicFormGroup.get('logicArr').value[0].ifCount = 0;
        }
    };
    TicketGenerationComponent.prototype.getLogicData = function (ifCount) {
        var logicObject = this.services.utils.cloneObject(this.logicService.logicData);
        if (this.additionalKeysInLogic) {
            for (var key in this.additionalKeysInLogic) {
                logicObject[key] = this.additionalKeysInLogic[key];
            }
        }
        ifCount && (logicObject["ifCount"] = ifCount);
        logicObject["lType"] = "ticket";
        logicObject["logic"] = this.logicName;
        return logicObject;
    };
    TicketGenerationComponent.prototype.removeAllLogic = function () {
        var _this = this;
        this.logicService.removeAllLogicByName(this.question, this.logicName).subscribe(function (data) {
            _this.logicChanged.emit({ logicName: _this.logicName, res: data });
            _this.services.toastr.success('Logic has been successfully removed.');
        });
    };
    TicketGenerationComponent.prototype.showCriteriaForm = function (event) {
        (event.target.value == '0') && this.logicChanged.emit({ view: 'Criteria' });
    };
    TicketGenerationComponent.prototype.cancel = function () {
        this.canceled.emit();
    };
    return TicketGenerationComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], TicketGenerationComponent.prototype, "qId", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], TicketGenerationComponent.prototype, "logicChanged", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _b || Object)
], TicketGenerationComponent.prototype, "canceled", void 0);
TicketGenerationComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-ticket-generation',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/ticket.generation/ticket.generation.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/ticket.generation/ticket.generation.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__logic_service__["a" /* LogicService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__logic_service__["a" /* LogicService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _d || Object])
], TicketGenerationComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=ticket.generation.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logo-settings/logo-settings.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"logo-panel\">\n  <div class=\"logo-heading\">\n    Logo Settings\n  </div>\n  <div class=\"row logo-thumbnil\">\n    <div class=\"col-md-6 col-sm-6 col-xs-6\">\n      <img class=\"img-responsive\" [src]=\"logoDetails?.src\" height=\"30\">\n    </div>\n    <div class=\"col-md-6 col-sm-6 col-xs-6 logo-btn-div\">\n      <button class=\"btn\" type=\"button\" class=\"logo-btn replace-btn\" (click)=\"editLogo()\">Replace</button>\n      <button class=\"btn\" type=\"button\" class=\"logo-btn remove-btn\" (click)=\"removeLogo()\">Remove</button>\n    </div>\n  </div>\n  <div class=\"logo-container\">\n    <div class=\"logo-title\">\n      Alignment\n    </div>\n    <div class=\"align-grp\">\n      <label class=\"align-lbl\" [ngClass]=\"{'active': logoSettings.allignment == 'left'}\">\n        <input type=\"radio\" name=\"textAlign\" value=\"left\" [(ngModel)]=\"logoSettings.allignment\">\n        <span class=\"align-icon\" [ngClass]=\"(logoSettings.allignment == 'left' ? 'left-active' : 'left')\"></span>\n      </label>\n      <label class=\"align-lbl\" [ngClass]=\"{'active': logoSettings.allignment == 'center'}\">\n        <input type=\"radio\" name=\"textAlign\" value=\"center\" [(ngModel)]=\"logoSettings.allignment\">\n        <span class=\"align-icon\" [ngClass]=\"(logoSettings.allignment == 'center' ? 'center-active' : 'center')\"></span>\n      </label>\n      <label class=\"align-lbl\" [ngClass]=\"{'active': logoSettings.allignment == 'right'}\">\n        <input type=\"radio\" name=\"textAlign\" value=\"right\" [(ngModel)]=\"logoSettings.allignment\">\n        <span class=\"align-icon\" [ngClass]=\"(logoSettings.allignment == 'right' ? 'right-active' : 'right')\"></span>\n      </label>\n    </div>\n  </div>\n  <div class=\"logo-container\">\n    <div class=\"logo-title\">\n      Size\n    </div>\n    <div class=\"size-pos-grp\">\n      <input type=\"radio\" name=\"size\" value=\"actual\" id=\"actualLogo\" [(ngModel)]=\"logoSettings.size\" (change)=\"saveSize()\">\n      <label class=\"size-lbl\" for=\"actualLogo\">\n        Actual\n      </label>\n      <input type=\"radio\" name=\"size\" value=\"small\" id=\"smallLogo\" [(ngModel)]=\"logoSettings.size\" (change)=\"saveSize()\">\n      <label class=\"size-lbl\" for=\"smallLogo\">\n        Small\n      </label>\n      <input type=\"radio\" name=\"size\" value=\"medium\" id=\"mediumLogo\" [(ngModel)]=\"logoSettings.size\" (change)=\"saveSize()\">\n      <label class=\"size-lbl\" for=\"mediumLogo\">\n        Medium\n      </label>\n      <input type=\"radio\" name=\"size\" value=\"large\" id=\"largeLogo\" [(ngModel)]=\"logoSettings.size\" (change)=\"saveSize()\">\n      <label class=\"size-lbl\" for=\"largeLogo\">\n        Large\n      </label>\n    </div>\n  </div>\n  <div class=\"logo-container\">\n    <div class=\"logo-title\">\n      Position\n    </div>\n    <div class=\"size-pos-grp\">\n      <input type=\"radio\" name=\"pos\" value=\"above\" id=\"aboveLogo\" [(ngModel)]=\"logoSettings.position\">\n      <label class=\"pos-lbl\" for=\"aboveLogo\">\n        Above Title\n      </label>\n      <input type=\"radio\" name=\"pos\" value=\"below\" id=\"belowLogo\" [(ngModel)]=\"logoSettings.position\">\n      <label class=\"pos-lbl\" for=\"belowLogo\">\n        Below Title\n      </label>\n    </div>\n  </div>\n\n  <div class=\"logo-save-action\">\n    <button type=\"button\" class=\"btn logo-action-btn s2c_save_btn\" (click)=\"save()\">Save</button>\n    <button type=\"button\" class=\"btn logo-action-btn s2c_cancel_btn\" (click)=\"cancel()\">Cancel</button>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logo-settings/logo-settings.component.scss":
/***/ (function(module, exports) {

module.exports = ".logo-panel {\n  padding: 20px;\n  border: 1px solid #d6d6d6;\n  margin: 20px 20px 20px 24px; }\n\n.logo-heading {\n  font-family: 'Helvetica Neue Medium';\n  font-size: 16px;\n  margin-bottom: 16px; }\n\n.logo-thumbnil {\n  margin-bottom: 10px; }\n\n.logo-btn-div {\n  margin-top: 6px;\n  text-align: right; }\n\n.logo-btn {\n  border: 0;\n  color: white;\n  padding: 4px 8px;\n  font-size: 12px;\n  border-radius: 4px;\n  font-family: 'Helvetica Neue Medium'; }\n\n.remove-btn {\n  background-color: #ec5346; }\n\n.replace-btn {\n  background-color: #6e6e6e; }\n\n.logo-title {\n  margin-bottom: 6px;\n  font-size: 12px;\n  font-family: 'Helvetica Neue Medium'; }\n\n.logo-container {\n  margin-bottom: 26px; }\n\n.align-grp {\n  border: 1px solid #D8D8D8;\n  display: table;\n  font-size: 12px;\n  width: 100%;\n  table-layout: fixed;\n  border-radius: 4px; }\n\n.align-grp .align-lbl {\n    padding: 6px;\n    display: table-cell;\n    text-align: center;\n    cursor: pointer;\n    font-weight: 500; }\n\n.align-grp .align-lbl input[type=radio],\n    .align-grp .align-lbl input[type=checkbox] {\n      display: none; }\n\n.align-grp .align-lbl:not(:last-child) {\n      border-right: 1px solid #D8D8D8; }\n\n.align-grp .align-lbl.active {\n      color: white;\n      background-color: #2392ED; }\n\n.align-icon {\n  height: 12px;\n  width: 15px;\n  display: inline-block;\n  margin-top: 2px; }\n\n.align-icon.left {\n    background: url(\"/assets/images/editSurvey/themes/left-align.svg\");\n    background-repeat: no-repeat; }\n\n.align-icon.left-active {\n    background: url(\"/assets/images/editSurvey/themes/left-align-active.svg\");\n    background-repeat: no-repeat; }\n\n.align-icon.center {\n    background: url(\"/assets/images/editSurvey/themes/center-align.svg\");\n    background-repeat: no-repeat; }\n\n.align-icon.center-active {\n    background: url(\"/assets/images/editSurvey/themes/center-align-active.svg\");\n    background-repeat: no-repeat; }\n\n.align-icon.right {\n    background: url(\"/assets/images/editSurvey/themes/right-align.svg\");\n    background-repeat: no-repeat; }\n\n.align-icon.right-active {\n    background: url(\"/assets/images/editSurvey/themes/right-align-active.svg\");\n    background-repeat: no-repeat; }\n\n.size-pos-grp input[type=radio] {\n  display: none; }\n\n.size-pos-grp label {\n  border: 1px solid #D8D8D8;\n  font-weight: 500;\n  padding: 6px;\n  text-align: center;\n  cursor: pointer;\n  border-radius: 4px;\n  font-size: 12px; }\n\n.size-pos-grp label:not(:last-child) {\n  margin-right: 10px; }\n\n.size-pos-grp input[type=radio]:checked + label {\n  color: white;\n  background-color: #2392ED; }\n\n.size-pos-grp .size-lbl {\n  width: calc(100%/4 - 10.5px); }\n\n.size-pos-grp .pos-lbl {\n  width: calc(100%/2 - 7px); }\n\n.logo-save-action {\n  padding: 20px 0 10px 0;\n  text-align: right; }\n\n.logo-action-btn {\n  padding: 6px 12px; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/logo-settings/logo-settings.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LogoSettingsComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__survey_main_list_logo_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.main-list/logo.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var LogoSettingsComponent = (function () {
    function LogoSettingsComponent(logoService, services) {
        this.logoService = logoService;
        this.services = services;
        this.onCancel = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.onSuccess = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
    }
    LogoSettingsComponent.prototype.ngOnInit = function () {
        this.formObj = this.services.form.formObj;
        this.logoSettings = this.formObj.logo;
        this.copyLogoData = this.services.utils.cloneObject(this.logoSettings);
        this.logoDetails = this.logoService.logoDetails;
    };
    LogoSettingsComponent.prototype.editLogo = function () {
        this.onSuccess.emit('logo-replace');
        this.doneSettings();
    };
    LogoSettingsComponent.prototype.removeLogo = function () {
        this.logoService.removeLogo(this.logoInpData.sId, this.formObj);
        this.onSuccess.emit('logo-remove');
        this.doneSettings();
    };
    LogoSettingsComponent.prototype.saveSize = function () {
        var _this = this;
        var data = this.logoSettings;
        var res = {
            logo: data
        };
        this.services.resource.addLogo(this.logoInpData.sId, res).subscribe(function (data) {
            _this.logoService.setLogoOnLoad(_this.logoInpData.sId, _this.formObj);
        });
    };
    LogoSettingsComponent.prototype.save = function () {
        var _this = this;
        var data = this.logoSettings;
        var res = {
            logo: data
        };
        this.services.resource.addLogo(this.logoInpData.sId, res).subscribe(function (data) {
            _this.logoService.setLogoOnLoad(_this.logoInpData.sId, _this.formObj);
            _this.services.toastr.success('Logo settings has been updated successfully.', 'Success');
            _this.doneSettings();
        });
    };
    LogoSettingsComponent.prototype.cancel = function () {
        var _this = this;
        if (this.formObj.logo.size != this.copyLogoData.size) {
            var res = {
                logo: this.copyLogoData
            };
            this.services.resource.addLogo(this.logoInpData.sId, res).subscribe(function (data) {
                _this.logoService.setLogoOnLoad(_this.logoInpData.sId, _this.formObj);
            });
        }
        this.formObj.logo = this.services.utils.cloneObject(this.copyLogoData);
        this.doneSettings();
    };
    LogoSettingsComponent.prototype.doneSettings = function () {
        this.onCancel.emit();
    };
    return LogoSettingsComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], LogoSettingsComponent.prototype, "logoInpData", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], LogoSettingsComponent.prototype, "onCancel", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], LogoSettingsComponent.prototype, "onSuccess", void 0);
LogoSettingsComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-logo-settings',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logo-settings/logo-settings.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logo-settings/logo-settings.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_2__survey_main_list_logo_service__["a" /* LogoService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__survey_main_list_logo_service__["a" /* LogoService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object])
], LogoSettingsComponent);

var _a, _b;
//# sourceMappingURL=logo-settings.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/recode.value/recode.value.component.css":
/***/ (function(module, exports) {

module.exports = ".recode-body {\n    padding: 15px;\n}\n\n.recode_weights {\n\tborder: 1px solid #ccc;\n    margin-bottom: 10px;\n}\n\n.recode_weights > label {\n\tpadding: 5px 10px 2px 10px;\n    width: 100%;\n    cursor: pointer;\n}\n\n.opt-row {\n    height: 41px;\n    margin-bottom: 5px;\n    text-align: center;\n    border-bottom: 1px solid #cccc;\n}\n\n.action-btn {\n    margin-top: 15px\n}\n\n.save-button {\n    background-color: #0A73BA;\n    -webkit-box-shadow: -1px 6px 14px 0 rgba(10, 115, 186, 0.39);\n    box-shadow: -1px 6px 14px 0 rgba(10, 115, 186, 0.39);\n    color: white;\n}\n\n.cancel-button {\n    background-color: white;\n    border: solid 1px #0A73BA;\n    -webkit-box-shadow: -1px 6px 14px 0 rgba(10, 115, 186, 0.39);\n    box-shadow: -1px 6px 14px 0 rgba(10, 115, 186, 0.39);\n    color: #0A73BA;\n    margin-left: 10px;\n}"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/recode.value/recode.value.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"recode-body\">\n  <div class=\"recode_weights\">\n    <label class=\"custom_checkbox_grp\">\n      <input type=\"checkbox\" [(ngModel)]=\"weights\" value=\"1\" (change)=\"changeWeights($event)\">\n      <span class=\"custom_checkbox_txt\">Weights</span>\n    </label>\n  </div>\n\n  <ng-container *ngFor=\"let item of options; index as itemIdx; trackBy: services.utils.trackByIndex;\">\n  \t<div *ngFor=\"let option of item.options; index as optIdx; trackBy: services.utils.trackByIndex;\" class=\"row opt-row\">\n  \t\t<div class=\"col-lg-3\"><span [hidden]=\"!item.isCarry\">{{'>>'}}</span>  Q{{questionCountList[item.qId]}}.:{{optIdx+1}}</div>\n      \t<div class=\"col-lg-6\">{{option.text}}</div>\n        <div class=\"col-lg-3\" [hidden]=\"!weights\">\n          <input type=\"text\" class=\"form-control\" [(ngModel)]=\"recodeValues[option._id]\" [disabled]=\"item.carrObj.wtOrInd\">\n        </div>\n  \t</div>\n  </ng-container>\n  <div class=\"action-btn\">\n      <button type=\"button\" class=\"btn cancel-button pull-right\" (click)=\"cancel()\"> Cancel </button>\n      <button type=\"button\" class=\"btn save-button pull-right\" (click)=\"save()\"> Save </button>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/recode.value/recode.value.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RecodeValueComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__ = __webpack_require__("./src/app/shared/questionTemplates/question-types.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var RecodeValueComponent = (function () {
    function RecodeValueComponent(services, qTypesServ) {
        this.services = services;
        this.qTypesServ = qTypesServ;
        this.onCancel = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.options = [];
        this.recodeValues = {};
    }
    RecodeValueComponent.prototype.ngOnInit = function () {
        var _this = this;
        var question = this.services.form.formObj.getQuestionById(this.qId);
        this.weights = question.recodeLocked ? "1" : "";
        var carryOptions = this.services.form.formObj.getCarryOptionArrays(this.qId);
        carryOptions.topArray.forEach(function (opt) {
            opt.isCarry = true;
            _this.options.push(opt);
        });
        if (question.getQuestionFamily() === 'matrix') {
            this.options.push({ qId: this.qId, options: question.getColArray(), carrObj: {} });
        }
        else {
            this.options.push({ qId: this.qId, options: question.getRowArray(), carrObj: {} });
        }
        carryOptions.bottomArray.forEach(function (opt) {
            opt.isCarry = true;
            _this.options.push(opt);
        });
        this.options.forEach(function (item) {
            item.options.forEach(function (opt) {
                opt.text = _this.services.utils.getTextOutOfHtml(opt.text);
                if (question.recodeLocked) {
                    _this.recodeValues[opt._id] = item.isCarry ? (!item.carrObj.wtOrInd ? (item.carrObj.weightDoc ? item.carrObj.weightDoc[opt._id] : '') : opt.weight) : opt.weight;
                }
            });
        });
        this.questionCountList = this.services.form.getQuestionCountAndId()['data'];
        var fieldType = question.getFieldType();
        //if(fieldType.family == 'matrix') {}
    };
    RecodeValueComponent.prototype.changeWeights = function (event) {
        var _this = this;
        this.weights = event.target.checked ? "1" : "";
        if (event.target.checked) {
            var count_1 = 1;
            this.options.forEach(function (item) {
                item.options.forEach(function (opt) {
                    opt.text = _this.services.utils.getTextOutOfHtml(opt.text);
                    _this.recodeValues[opt._id] = item.carrObj.wtOrInd ? (opt.weight || '0') : count_1;
                    !item.carrObj.wtOrInd && count_1++;
                });
            });
        }
        else {
            this.recodeValues = {};
        }
    };
    RecodeValueComponent.prototype.save = function () {
        var _this = this;
        var data = {
            recodeLocked: !this.weights ? 0 : 1,
            _id: this.qId
        };
        var question = this.services.form.formObj.getQuestionById(this.qId);
        var optData = [];
        var frmCarryForward = [];
        if (data.recodeLocked) {
            this.options.forEach(function (item) {
                item.options.forEach(function (opt) {
                    if (!item.isCarry) {
                        opt.weight = _this.recodeValues[opt._id] || "";
                        optData.push(opt);
                    }
                    else if (item.isCarry && item.carrObj.wtOrInd == 0) {
                        !item.carrObj.weightDoc && (item.carrObj.weightDoc = {});
                        item.carrObj.weightDoc[opt._id] = _this.recodeValues[opt._id] || "";
                    }
                });
                if (item.isCarry) {
                    frmCarryForward.push(item.carrObj);
                }
            });
            data['fieldOptions'] = question.getFieldOptions();
            if (question.getQuestionFamily() === 'matrix') {
                data['fieldOptions']['col'] = optData;
                question.setColArray(optData);
            }
            else {
                data['fieldOptions']['row'] = optData;
                question.setRowArray(optData);
            }
            data['frmCarryForward'] = frmCarryForward;
        }
        this.services.resource.updateQuestionData(this.qId, data).subscribe(function (res) {
            question.setRecodeLocked(data.recodeLocked);
            _this.cancel();
            _this.services.toastr.success('Recode value updated', 'Question Updated');
        });
    };
    RecodeValueComponent.prototype.cancel = function () {
        this.onCancel.emit();
    };
    return RecodeValueComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", String)
], RecodeValueComponent.prototype, "qId", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], RecodeValueComponent.prototype, "onCancel", void 0);
RecodeValueComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-recode-value',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/recode.value/recode.value.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/recode.value/recode.value.component.css")]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */]) === "function" && _c || Object])
], RecodeValueComponent);

var _a, _b, _c;
//# sourceMappingURL=recode.value.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/survey-page-title-settings/survey-page-title-settings.component.css":
/***/ (function(module, exports) {

module.exports = ".setting-panel{\n  margin: 20px 20px 20px 24px;\n}\n\n.setting-heading{\n  font-family: 'Helvetica Neue Medium';\n  font-size: 16px;\n  margin-bottom: 16px;\n}\n\n.title-desc-action{\n  padding: 30px 0 20px 0;\n  text-align: right;\n}\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/survey-page-title-settings/survey-page-title-settings.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"setting-panel\">\n  <div class=\"setting-heading\">\n    {{settingsInpData.field | titlecase}} {{settingsInpData.subField == 'desc' ? 'Description' : 'Title'}}\n  </div>\n  <div>\n    <span class=\"tinymce-small\">\n      <textarea appTinymce [element]=\"{text: settings.model, className: 'tinyMceTitleDesc', others:{ minHeight:'100px', extraLabels: ['bold','italic'] }}\" (onEvent)=\"onEvent($event)\" [(ngModel)]=\"settings.model\"></textarea>\n    </span>\n  </div>\n\n  <div class=\"title-desc-action\">\n    <button type=\"button\" class=\"btn s2c_save_btn\" (click)=\"saveSettings()\">Save</button>\n    <button type=\"button\" class=\"btn s2c_cancel_btn\" (click)=\"cancelSettings()\">Cancel</button>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/left.panel/survey-page-title-settings/survey-page-title-settings.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPageTitleSettingsComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var SurveyPageTitleSettingsComponent = (function () {
    function SurveyPageTitleSettingsComponent(services) {
        this.services = services;
        this.onCancel = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.settings = {
            model: ''
        };
    }
    SurveyPageTitleSettingsComponent.prototype.ngOnInit = function () {
        this.formObj = this.services.form.formObj;
        this.allPagesAndQues = this.services.form.getAllPagesAndQuestions();
        this.setAction();
    };
    SurveyPageTitleSettingsComponent.prototype.setAction = function () {
        var inpData = this.settingsInpData;
        if (inpData.field == 'survey') {
            this.settings.model = this.formObj.title;
        }
        else if (inpData.field == 'page') {
            this.settings.model = this.allPagesAndQues['data'][inpData.id][inpData.subField];
        }
    };
    SurveyPageTitleSettingsComponent.prototype.onEvent = function (event) {
        if (event.type == 'keyup') {
            event.options.element = event.options.content;
            this.settings.model = event.options.content;
        }
    };
    SurveyPageTitleSettingsComponent.prototype.saveSettings = function () {
        var str = this.settings.model;
        if (this.settingsInpData.field == 'survey') {
            this.saveSurveyTitle(str);
        }
        else if (this.settingsInpData.field == 'page') {
            this.savePageDetails(str);
        }
    };
    SurveyPageTitleSettingsComponent.prototype.saveSurveyTitle = function (str) {
        var _this = this;
        if (this.services.utils.getTextOutOfHtml(str).trim() == '') {
            this.services.toastr.error('Survey Title can not be Empty');
            return false;
        }
        var surveyData = {
            title: str
        };
        this.services.resource.setSurveyTtile(this.settingsInpData.id, surveyData).subscribe(function (data) {
            _this.formObj.title = str;
            _this.services.toastr.success('Survey Title has been updated successfully', 'Updated');
            _this.cancelSettings();
        });
    };
    SurveyPageTitleSettingsComponent.prototype.savePageDetails = function (str) {
        var _this = this;
        var inpData = this.settingsInpData;
        this.allPagesAndQues.data[inpData.id][inpData.subField] = str;
        var pageData = {
            title: this.allPagesAndQues.data[inpData.id].title,
            desc: this.allPagesAndQues.data[inpData.id].desc
        };
        this.services.resource.setPageTitleAndDesc(inpData.id, pageData).subscribe(function (data) {
            if (inpData.subField == 'title') {
                _this.formObj.pageFields[inpData.idx].title = pageData.title;
                _this.allPagesAndQues.data[inpData.id].titleText = _this.services.utils.getTextOutOfHtml(pageData.title);
                _this.services.toastr.success('Page Title has been updated successfully', 'Updated');
            }
            else if (inpData.subField == 'desc') {
                _this.formObj.pageFields[inpData.idx].desc = pageData.desc;
                _this.services.toastr.success('Page Description has been updated successfully', 'Updated');
            }
            _this.cancelSettings();
        });
    };
    SurveyPageTitleSettingsComponent.prototype.cancelSettings = function () {
        this.onCancel.emit();
    };
    return SurveyPageTitleSettingsComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], SurveyPageTitleSettingsComponent.prototype, "settingsInpData", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SurveyPageTitleSettingsComponent.prototype, "onCancel", void 0);
SurveyPageTitleSettingsComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey-page-title-settings',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/survey-page-title-settings/survey-page-title-settings.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/survey-page-title-settings/survey-page-title-settings.component.css")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _a || Object])
], SurveyPageTitleSettingsComponent);

var _a;
//# sourceMappingURL=survey-page-title-settings.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/survey.design.component.html":
/***/ (function(module, exports) {

module.exports = "<div [ngClass]=\"(!surveyDesignData.displaySidebar ? 'inner-left-broad-container' : 'inner-left-container')\">\n  <design-left-panel [action]=\"surveyDesignData.presentAction\" [actionObject]=\"actionObject\" (onCancel)=\"hideOverlay()\" (onChange)=\"onChangeLeftPanel($event)\" (onSuccess)=\"onSuccessToActions($event)\"></design-left-panel>\n</div>\n<div class=\"right-container\">\n  <div *ngIf=\"isDataReady\">\n    <app-survey-main-list\n      [onSuccess]=\"onSuccessAction\"\n      (onChange)=\"onChangeMainList($event)\">\n    </app-survey-main-list>\n    <div [hidden]=\"(surveyDesignData.presentAction=='survey-flow')\" class=\"container-overlay\" (click)=\"hideOverlay();\"></div>\n  </div>\n  <div *ngIf=\"!isDataReady\" class=\"loader-msg\">\n    <div>Loading survey...</div>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/survey.design.component.scss":
/***/ (function(module, exports) {

module.exports = ".loader-msg {\n  height: calc(70vh - 140px);\n  text-align: center;\n  font-size: 22px;\n  font-family: \"Helvetica Neue Medium\";\n  margin-top: 30vh; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.design/survey.design.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyDesignComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var SurveyDesignComponent = (function () {
    function SurveyDesignComponent(editDataService, service) {
        this.editDataService = editDataService;
        this.service = service;
        this.onSuccessAction = {};
        this.isDataReady = false;
    }
    SurveyDesignComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.surveyDesignData = this.editDataService.surveyDesignData;
        this.subscription = this.editDataService.getSurveyData().subscribe(function (data) {
            if (!data)
                return;
            _this.isDataReady = false;
            _this.surveyDesignData.presentAction = _this.surveyDesignData.presentAction || 'survey-flow';
            setTimeout(function () {
                _this.isDataReady = true;
                if (_this.surveyDesignData.presentAction == 'survey-flow') {
                    _this.surveyDesignData.displaySidebar = true;
                }
                else {
                    _this.surveyDesignData.displaySidebar = false;
                }
            }, 1);
        });
    };
    SurveyDesignComponent.prototype.hideOverlay = function () {
        this.surveyDesignData.presentAction = 'survey-flow';
        this.surveyDesignData.displaySidebar = true;
    };
    SurveyDesignComponent.prototype.onChangeMainList = function (event) {
        this.actionObject = {};
        event && (this.actionObject = event);
        this.surveyDesignData.presentAction = this.actionObject.action;
        this.surveyDesignData.displaySidebar = false;
    };
    SurveyDesignComponent.prototype.onSuccessToActions = function (act) {
        this.onSuccessAction = {
            action: act
        };
    };
    SurveyDesignComponent.prototype.onChangeLeftPanel = function (event) {
        this.onChangeMainList(event);
    };
    SurveyDesignComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    return SurveyDesignComponent;
}());
SurveyDesignComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey.design.component',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.design/survey.design.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.design/survey.design.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__edit_data_service__["a" /* EditDataService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object])
], SurveyDesignComponent);

var _a, _b;
//# sourceMappingURL=survey.design.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.edit.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"left-container\">\n    <div class=\"side_bar_menu\" *ngIf=\"surveyDesignData.displaySidebar\">\n      <ul class=\"side_bar_ul\">\n        <li routerLinkActive=\"active\">\n          <a [routerLink]=\"['questions']\">\n            <span class=\"side_bar_ques side_bar_ul_icons\"></span>\n            <p>Questions</p>\n          </a>\n        </li>\n        <li routerLinkActive=\"active\">\n          <a [routerLink]=\"['themes']\">\n            <span class=\"side_bar_theme side_bar_ul_icons\"></span>\n            <p>Theme</p>\n          </a>\n        </li>\n        <li routerLinkActive=\"active\">\n          <a [routerLink]=\"['settings']\">\n            <span class=\"side_bar_settings side_bar_ul_icons\"></span>\n            <p>Settings</p>\n          </a>\n        </li>\n        <li routerLinkActive=\"active\">\n          <a [routerLink]=\"['advance']\">\n            <span class=\"side_bar_advance side_bar_ul_icons\"></span>\n            <p>Advance</p>\n          </a>\n        </li>\n      </ul>\n    </div>\n\n  <router-outlet></router-outlet>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.edit.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyEdit; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var SurveyEdit = (function () {
    function SurveyEdit(route, editDataService, services) {
        this.route = route;
        this.editDataService = editDataService;
        this.services = services;
    }
    SurveyEdit.prototype.ngOnInit = function () {
        this.editDataService.sId = this.route.params["value"].sid;
        this.surveyDesignData = this.editDataService.surveyDesignData;
    };
    return SurveyEdit;
}());
SurveyEdit = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'survey-edit',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.edit.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_router__["a" /* ActivatedRoute */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_router__["a" /* ActivatedRoute */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__edit_data_service__["a" /* EditDataService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */]) === "function" && _c || Object])
], SurveyEdit);

var _a, _b, _c;
//# sourceMappingURL=survey.edit.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.flow/survey.flow.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"survey_flow_heading dark_text\">\n  <span class=\"sur_flow_icon\"><img src=\"./assets/images/editSurvey/survey-flow.png\" height=\"20\"></span>\n  <span>Survey Flow</span>\n  <span class=\"pull-right\" (click)=\"collapseAllQuestions()\" title=\"{{collapseAllQues ? 'Collapse All Questions' : 'Open All Questions'}}\">\n    <img class=\"collapse_sur_flow\" src=\"{{collapseAllQues ? './assets/images/editSurvey/collapse-in.png' : './assets/images/editSurvey/collapse-out.png'}}\">\n  </span>\n  <span class=\"pull-right\" (click)=\"showPageRandomization()\" title=\"Survey Randomization\">\n    <img class=\"collapse_sur_flow_left\" src=\"./assets/images/editSurvey/randomization.png\">\n  </span>\n</div>\n<div class=\"survey_flow_content\">\n  <ul class=\"sur_flow_page_ul\">\n    <li class=\"sur_flow_page_li\" *ngFor=\"let pageObj of formObj?.pageFields; index as pageIdx\" (click)=\"goToQuestion($event, pageObj._id)\">\n      <span class=\"first_pg_span\" [ngClass]=\"(allPagesAndQues.data[pageObj._id]?.collapseQues ? 'open' : 'collapse')\" (click)=\"allPagesAndQues.data[pageObj._id].collapseQues = !allPagesAndQues.data[pageObj._id].collapseQues\">\n        <span>\n          <span class=\"page_num\">P<span>{{allPagesAndQues.data[pageObj._id]?.count}}</span></span>\n          <span class=\"page_title break_words\">\n            <span [hidden]=\"allPagesAndQues.data[pageObj._id]?.title == ''\">\n              <span title=\"{{allPagesAndQues.data[pageObj._id]?.titleText}}\">{{allPagesAndQues.data[pageObj._id]?.titleText}}</span>\n            </span>\n            <span [hidden]=\"allPagesAndQues.data[pageObj._id]?.title != ''\">\n              <span title=\"--Untitled--\">--Untitled--</span>\n            </span>\n          </span>\n        </span>\n        <span class=\"total_ques_count\">\n          <span [hidden]=\"allPagesAndQues.data[pageObj._id]?.qCount <= 0\"><span>{{allPagesAndQues.data[pageObj._id]?.qCount}}</span> Question(s)</span>\n          <span [hidden]=\"allPagesAndQues.data[pageObj._id]?.qCount > 0\">No Questions</span>\n        </span>\n      </span>\n      <ul class=\"sur_flow_ques_ul\" [hidden]=\"!allPagesAndQues.data[pageObj._id]?.collapseQues\">\n        <li class=\"sur_flow_ques_li break_words\" *ngFor=\"let question of allPagesAndQues.data[pageObj._id]?.ques; index as quesIdx\" (click)=\"goToQuestion($event, question['_id'], 'q')\">\n          <span class=\"first_ques_span\">\n            <span class=\"ques_icon\"><img [src]=\"quesJSON[question.type.type].icon\"></span>\n          <span [hidden]=\"(question.category == 's')\"><span>Q<span>{{question.count}}</span>.</span>\n          </span>\n          <span class=\"ques_title\" title=\"{{question.titleText | swapMongoIdAndQuesNum : true : question._id}}\">{{question.titleText | swapMongoIdAndQuesNum : true : question._id}}</span>\n          <span [hidden]=\"!(allQuestionsOfSurvey[question._id].logicArr.length)\"><span class=\"logics_btn\">L</span></span>\n          </span>\n        </li>\n      </ul>\n    </li>\n  </ul>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.flow/survey.flow.component.scss":
/***/ (function(module, exports) {

module.exports = ".sur_flow_icon {\n  margin-right: 6px; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.flow/survey.flow.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyFlowComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__ = __webpack_require__("./src/app/shared/questionTemplates/question-types.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var SurveyFlowComponent = (function () {
    function SurveyFlowComponent(service, quesTypesService, editService) {
        this.service = service;
        this.quesTypesService = quesTypesService;
        this.editService = editService;
        this.onRandomization = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.collapseAllQues = true;
    }
    SurveyFlowComponent.prototype.ngOnInit = function () {
        this.quesJSON = this.quesTypesService.questionTypesJSON;
        this.formObj = this.service.form.getFormData();
        this.allPagesAndQues = this.service.form.getAllPagesAndQuestions();
        this.allQuestionsOfSurvey = this.service.form.allQuestionsOfSurvey;
    };
    SurveyFlowComponent.prototype.collapseAllQuestions = function () {
        this.collapseAllQues = !this.collapseAllQues;
        for (var page in this.allPagesAndQues.data) {
            this.allPagesAndQues.data[page].collapseQues = this.collapseAllQues;
        }
    };
    SurveyFlowComponent.prototype.showPageRandomization = function () {
        var data = {
            action: 'randomization',
            ranInpData: { 'type': 'Page' }
        };
        this.onRandomization.emit(data);
    };
    SurveyFlowComponent.prototype.goToQuestion = function (event, id, type) {
        event.stopPropagation();
        var scrollOffset = (type == 'q') ? 150 : 110;
        this.service.utils.scrollPage(id, scrollOffset);
    };
    return SurveyFlowComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], SurveyFlowComponent.prototype, "onRandomization", void 0);
SurveyFlowComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey-flow',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.flow/survey.flow.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.flow/survey.flow.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_3__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__edit_data_service__["a" /* EditDataService */]) === "function" && _d || Object])
], SurveyFlowComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=survey.flow.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.intro/survey.intro.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"inner-left-broad-container\">\n  <div style=\"padding: 30px; color: #3A3A3A;\tfont-family: 'Helvetica';\" class=\"introPage\">\n    <span style=\"font-size: 20px;\tline-height: 19px; font-weight: bold;\">WELCOME PAGE</span>\n    <label class=\"switch\" style=\"float: right;\">\n      <input type=\"checkbox\" class=\"on_off_custom\" (change)=\"offOnIntro($event)\" [checked]=\"showStart\">\n      <span class=\"slider round\"></span>\n    </label>\n    <div [ngStyle]=\"{'opacity': opacity, 'pointer-events':pointeevts}\">\n    <div style=\"margin-top:16px;\">Title</div>\n    <div style=\"margin-top: 8px; padding: 10px; border: 1px solid #ccc\">\n      <!-- <input type=\"text\" placeholder=\"Enter Title Name\" style=\"font-size: 14px;\tline-height: 16px; width: 100%; border: 1px solid #D8D8D8; border-radius: 2px; height: 32px; padding: 2px;\" [(ngModel)]=\"title\"> -->\n      <div class=\"introTitle\">\n        <textarea appTinymce [element]=\"{text: title, className: 'tinyMceQuestion', others:{extraLabels: ['bold','italic','underline','fontsizeselect','forecolor','alignleft', 'aligncenter','alignright'] }}\" (onEvent)=\"onTitleEvent($event)\"  [(ngModel)]=\"title\"></textarea>\n      </div>\n      <div class=\"row\" style=\"margin-top: 12px;\">\n        <div class=\"col-lg-3 col-md-3 col-sm-3\">\n        Margin\n        </div>\n        <div class=\"col-lg-9 col-md-9 col-sm-9 introSlider\">\n          <span class=\"inputDimension\">Top</span>\n          <span class=\"inputDimension\">Right</span>\n          <span class=\"inputDimension\">Bottom</span>\n          <span class=\"inputDimension\">Left</span>\n        </div>\n      </div>\n      <div class=\"row\" style=\"margin-top: 2px;\">\n        <div class=\"col-lg-3 col-md-3 col-sm-3\">\n          in px\n        </div>\n        <div class=\"col-lg-9 col-md-9 col-sm-9 introSlider\">\n          <input (input)=\"setMargin('title','margin-top', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.title_m_t\">\n          <input (input)=\"setMargin('title','margin-right', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.title_m_r\">\n          <input (input)=\"setMargin('title','margin-bottom', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.title_m_b\">\n          <input (input)=\"setMargin('title','margin-left', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.title_m_l\">\n        </div>\n      </div>\n      <div style=\"text-align: left;  margin-top: 8px;\">\n        <div style=\"display: inline-block\">\n          <select class=\"form-control borderDropDownED\" [(ngModel)]=\"titleP.piping\">\n            <option value=\"e\">\n              Embedded Data\n            </option>\n            <option value=\"c\">\n              contacts\n            </option>\n          </select>\n        </div>\n        <div style=\"display: inline-block; margin-left: 12px\">\n          <div *ngIf=\"titleP.piping == 'c'\">\n            <select class=\"form-control borderDropDownED\" [(ngModel)]=\"titleP.contactPipe\" (change)=\"updateContact('c','title')\">\n              <option value=\"fName\">First Name</option>\n              <option value=\"lName\">Last Name</option>\n              <option value=\"email\">Email</option>\n              <option value=\"mobile\">Mobile</option>\n              <option value=\"extUniqueId\">Unique ID</option>\n            </select>\n          </div>\n          <div *ngIf=\"titleP.piping == 'e'\">\n            <input type=\"text\" placeholder=\"Enter field name\" (blur)=\"updateContact('e','title')\" [(ngModel)]=\"titleP.eDataPipe\" style=\"height: 32px;vertical-align: middle; width: 72%;\">\n          </div>\n        </div>\n      </div>\n      <!-- <textarea [(ngModel)]=\"title\" appTinymceFull placeholder=\"Enter Title Name\"></textarea> -->\n    </div>\n    <div style=\"margin-top:16px;\">Description</div>\n    <div style=\"margin-top: 8px; padding: 10px; border: 1px solid #ccc\" class=\"introDescription\">\n      <!-- <input type=\"text\" placeholder=\"Enter Description\" style=\"font-size: 14px;\tline-height: 16px; width: 100%; border: 1px solid #D8D8D8; border-radius: 2px; height: 32px; padding: 2px;\" [(ngModel)]=\"des\"> -->\n      <textarea appTinymce [element]=\"{text: des, className: 'tinyMceQuestion', others:{extraLabels: ['bold','italic','underline','fontsizeselect','forecolor','alignleft', 'aligncenter','alignright'] }}\" (onEvent)=\"onDesEvent($event)\"  [(ngModel)]=\"des\"></textarea>\n      <div class=\"row\" style=\"margin-top: 12px;\">\n        <div class=\"col-lg-3 col-md-3 col-sm-3\" style=\"text-align: left;\">\n        Margin\n        </div>\n        <div class=\"col-lg-9 col-md-9 col-sm-9 introSlider\" style='text-align:right'>\n          <span class=\"inputDimension\">Top</span>\n          <span class=\"inputDimension\">Right</span>\n          <span class=\"inputDimension\">Bottom</span>\n          <span class=\"inputDimension\">Left</span>\n        </div>\n      </div>\n      <div class=\"row\" style=\"margin-top: 2px;\">\n        <div class=\"col-lg-3 col-md-3 col-sm-3\" style=\"text-align: left;\">\n          in px\n        </div>\n        <div class=\"col-lg-9 col-md-9 col-sm-9 introSlider\" style='text-align:right'>\n          <input (input)=\"setMargin('des','margin-top', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.des_m_t\">\n          <input (input)=\"setMargin('des','margin-right', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.des_m_r\">\n          <input (input)=\"setMargin('des','margin-bottom', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.des_m_b\">\n          <input (input)=\"setMargin('des','margin-left', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.des_m_l\">\n        </div>\n      </div>\n      <div style=\"text-align: left; margin-top: 8px;\">\n        <div style=\"display: inline-block\">\n          <select class=\"form-control borderDropDownED\" [(ngModel)]=\"desP.piping\">\n            <option value=\"e\">\n              Embedded Data\n            </option>\n            <option value=\"c\">\n              contacts\n            </option>\n          </select>\n        </div>\n        <div style=\"display: inline-block; margin-left: 12px\">\n          <div *ngIf=\"desP.piping == 'c'\">\n            <select class=\"form-control borderDropDownED\" [(ngModel)]=\"desP.contactPipe\" (change)=\"updateContact('c','des')\">\n              <option value=\"fName\">First Name</option>\n              <option value=\"lName\">Last Name</option>\n              <option value=\"email\">Email</option>\n              <option value=\"mobile\">Mobile</option>\n              <option value=\"extUniqueId\">Unique ID</option>\n            </select>\n          </div>\n          <div *ngIf=\"desP.piping == 'e'\">\n            <input type=\"text\" placeholder=\"Enter field name\" (blur)=\"updateContact('e','des')\" [(ngModel)]=\"desP.eDataPipe\" style=\"height: 32px;vertical-align: middle; width: 72%;\">\n          </div>\n        </div>\n      </div>\n    </div>\n<!--\n    <div style=\"margin-top: 30px;\">\n      <span style=\"font-size: 17px;\tfont-weight: bold;\tline-height: 17px;\">SETTINGS</span>\n    </div> -->\n    <div style=\"margin-top:16px;\">Button</div>\n    <div style=\"margin-top: 8px; padding: 10px; border: 1px solid #ccc\">\n      <div class=\"row\">\n        <div class=\"col-lg-3\" style=\"margin-top: 6px; text-align: left;\">\n          Styling\n        </div>\n        <div class=\"col-lg-9\" style=\"text-align:right;\">\n          <div style=\"display: inline-block; margin-right: 4px; padding: 4px 8px 4px 4px; border: 1px solid #D8D8D8;\">\n            <input class=\"color_picker_input\" [(colorPicker)]=\"buttonBGColor\" [style.background]=\"buttonBGColor\" [cpOKButton]=\"true\" [cpSaveClickOutside]=\"true\" />\n          </div>\n          <div style=\"display: inline-block; margin-right: 4px; padding: 4px 8px 4px 4px; border: 1px solid #D8D8D8;\">\n            <input class=\"color_picker_input\" [(colorPicker)]=\"buttonTextColor\" [style.background]=\"buttonTextColor\" [cpOKButton]=\"true\" [cpSaveClickOutside]=\"true\"/>\n          </div>\n          <input type=\"text\"  style=\"padding: 6px 4px; border: 1px solid #D8D8D8; border-radius: 2px;width:58%\" placeholder=\"Max 60\" [(ngModel)]=\"buttonText\">\n        </div>\n      </div>\n      <div class=\"row\" style=\"margin-top: 6px;\">\n        <div class=\"col-lg-3 col-md-3 col-sm-3\" style=\"text-align: left;\">\n        Margin\n        </div>\n        <div class=\"col-lg-9 col-md-9 col-sm-9 introSlider\" style='text-align:right'>\n          <span class=\"inputDimension\">Top</span>\n          <span class=\"inputDimension\">Right</span>\n          <span class=\"inputDimension\">Bottom</span>\n          <span class=\"inputDimension\">Left</span>\n        </div>\n      </div>\n      <div class=\"row\" style=\"margin-top: 2px; margin-bottom:6px\">\n        <div class=\"col-lg-3 col-md-3 col-sm-3\" style=\"text-align: left;\">\n          in px\n        </div>\n        <div class=\"col-lg-9 col-md-9 col-sm-9 introSlider\" style='text-align:right'>\n          <input (input)=\"setMargin('btn','margin-top', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.btn_m_t\">\n          <input (input)=\"setMargin('btn','margin-right', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.btn_m_r\">\n          <input (input)=\"setMargin('btn','margin-bottom', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.btn_m_b\">\n          <input (input)=\"setMargin('btn','margin-left', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.btn_m_l\">\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-lg-3 col-md-3 col-sm-3\" style=\"margin-top: 6px; text-align: left;\">\n          Border\n        </div>\n        <div class=\"col-lg-9 col-md-9 col-sm-9\" style=\"text-align:right;\">\n            <div style=\"display: inline-block; margin-right: 4px; padding: 4px 8px 4px 4px; border: 1px solid #D8D8D8;\">\n              <input class=\"color_picker_input\" [(colorPicker)]=\"borderBtn.color\" [style.background]=\"borderBtn.color\" [cpOKButton]=\"true\" [cpSaveClickOutside]=\"true\" />\n            </div>\n            <div style=\"display: inline-block; margin-right: 4px; border: 1px solid #D8D8D8;\">\n              <input type=\"number\" style=\"height: 30px; max-width: 30px; width: 100%; -webkit-box-shadow: none; box-shadow: none; border: none; border-radius: 2px; padding: 0px;\" [(ngModel)]=\"borderBtn.width\">\n            </div>\n            <select class=\"form-control borderDropDown\" [(ngModel)]=\"borderBtn.type\">\n              <option>\n                solid\n              </option>\n              <option>\n                dotted\n              </option>\n              <option>\n                none\n              </option>\n            </select>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-lg-3 col-sm-3 col-md-3\" style=\"margin-top: 10px;\">\n          Alignment\n        </div>\n        <div class=\"col-lg-9 col-sm-9 col-md-9\" style=\"padding: 0px; border: 1px solid #2392ED; width: 196px;  margin-left: 28px; margin-top: 8px;\">\n          <label style=\"border-right:1px solid #2392ED; max-width: 32px; margin-bottom: 0px; height: 28px; padding: 0px 39px 0px 25px; cursor: pointer;\"\n            [ngStyle]=\"alignBtn == 'left' ? {backgroundColor: '#2392ed', color: '#ffffff'} : {color: '#2392ed', backgroundColor: '#ffffff'}\">\n            <input type=\"radio\" name=\"pageLayout\" value=\"left\" [(ngModel)]=\"alignBtn\">\n            <span class=\"layout-span\">\n              <!-- <span class=\"layout-icon center-top\"></span> -->\n              <span [ngClass]=\"{'layout-active': false}\">\n                <span [ngClass]=\"false ? 'layout-icon left-middle-active' : 'layout-icon left-middle'\"></span>\n              </span>\n              <!-- <span class=\"layout-icon center-bottom\"></span> -->\n            </span>\n          </label>\n          <label style=\"border-right:1px solid #2392ED; margin-bottom: 0px; height: 28px; max-width: 32px; padding: 0px 36px 0px 26px; cursor: pointer;\"\n            [ngStyle]=\"alignBtn == 'center' ? {backgroundColor: '#2392ed', color: '#ffffff'} : {color: '#2392ed', backgroundColor: '#ffffff'}\">\n            <input type=\"radio\" name=\"pageLayout\" value=\"center\" [(ngModel)]=\"alignBtn\">\n            <span class=\"layout-span\">\n              <!-- <span class=\"layout-icon center-top\"></span> -->\n              <span [ngClass]=\"{'layout-active': false}\">\n                <span [ngClass]=\"false ? 'layout-icon center-middle-active' : 'layout-icon center-middle'\"></span>\n              </span>\n              <!-- <span class=\"layout-icon center-bottom\"></span> -->\n            </span>\n          </label>\n          <label style=\"margin-bottom: 0px; height: 28px;  max-width: 32px; padding: 0px 25px 0px 22px; cursor: pointer;\"\n            [ngStyle]=\"alignBtn == 'right' ? {backgroundColor: '#2392ed', color: '#ffffff'} : {color: '#2392ed', backgroundColor: '#ffffff'}\">\n            <input type=\"radio\" name=\"pageLayout\" value=\"right\" [(ngModel)]=\"alignBtn\">\n            <span class=\"layout-span\">\n              <!-- <span class=\"layout-icon right-top\"></span> -->\n              <span [ngClass]=\"{'layout-active': false}\">\n                <span [ngClass]=\"false ? 'layout-icon right-middle-active' : 'layout-icon right-middle'\"></span>\n              </span>\n              <!-- <span class=\"layout-icon right-bottom\"></span> -->\n            </span>\n          </label>\n        </div>\n      </div>\n    </div>\n    <div style=\"margin-top:16px;\">Background</div>\n    <div class=\"row\" style=\"margin: 8px 0px 0px 0px; padding: 10px; border: 1px solid #ccc;\">\n      <div class=\"col-lg-9\" style='text-align:right; width: 88%;'>\n        <div style=\"display: inline-block; margin-right: 4px; padding: 0px 6px 2px 4px;; border: 1px solid #D8D8D8;\">\n          <input class=\"color_picker_input\" [(colorPicker)]=\"backgroundColor\" [style.background]=\"backgroundColor\" [cpOKButton]=\"true\" [cpSaveClickOutside]=\"true\" />\n        </div>\n        <div style=\"display: inline-block; border: 1px solid #D8D8D8; padding: 0px 14px 0px 14px;max-width:169px\">\n          <label class=\"add_bg_label\" style=\"margin-bottom:0px;\">\n            <div class=\"add_bg\">\n              <input type=\"file\" class=\"intro_bg\" (change)=\"saveBGImage($event)\">\n              <span><img src=\"./assets/images/editSurvey/logo-placeholder.svg\" width=\"20px;\" class=\"intro_bg_icon\"></span>\n              <span style=\"font-size:12px;\">Add Image</span>\n            </div>\n          </label>\n        </div>\n        <div style=\"display: inline-block; cursor: pointer;\" (click)=\"removeBG()\">\n          <span><img src=\"./assets/images/editSurvey/delete-row.svg\" width=\"20px\"></span>\n        </div>\n      </div>\n    </div>\n    <div style=\"margin-top:16px;\">Image</div>\n    <div class=\"row\" style=\"margin: 8px 0px 0px 0px; padding: 10px; border: 1px solid #ccc;\">\n      <div class=\"col-lg-11 col-md-11 col-sm-11\" style='text-align:right'>\n        <div style=\"display: inline-block; border: 1px solid #D8D8D8; border-radius:2px;\">\n          <label style=\"margin-bottom:0px;\">\n            <div class=\"add_bg\" style=\"text-align: center;max-width: 206px;\">\n              <input type=\"file\" class=\"intro_bg\" (change)=\"saveImage($event)\">\n              <span><img src=\"./assets/images/editSurvey/logo-placeholder.svg\" width=\"20px\"></span>\n              <span style=\"font-size:12px; padding:8px\">Add Image</span>\n            </div>\n          </label>\n        </div>\n        <div style=\"display: inline-block; cursor: pointer;\" (click)=\"removeImg()\">\n          <span><img src=\"./assets/images/editSurvey/delete-row.svg\" width=\"20px\"></span>\n        </div>\n      </div>\n\n      <div class=\"row\" style=\"margin: 8px 0px 0px 0px;\">\n        <div class=\"col-lg-3 col-md-3 col-sm-3\" style=\"text-align: left; margin-left: -15px; margin-top: 4px;\">\n        Margin\n        </div>\n        <div class=\"col-lg-9 col-md-9 col-sm-9 introSlider\" style='text-align:right; margin-left: 15px; margin-top: 8px;'>\n          <span class=\"inputDimension\">Top</span>\n          <span class=\"inputDimension\">Right</span>\n          <span class=\"inputDimension\" style=\"text-align: right;\">Bottom</span>\n          <span class=\"inputDimension\" style=\"text-align: right;\">Left</span>\n        </div>\n      </div>\n      <div class=\"row\" style=\"margin-top: 2px;margin-bottom:6px;\">\n        <div class=\"col-lg-3 col-md-3 col-sm-3\" style=\"text-align: left;\">\n          in px\n        </div>\n        <div class=\"col-lg-9 col-md-9 col-sm-9 introSlider\" style='text-align:right'>\n          <input (input)=\"setMargin('img','padding-top', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.img_m_t\">\n          <input (input)=\"setMargin('img','margin-right', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.img_m_r\">\n          <input (input)=\"setMargin('img','margin-bottom', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.img_m_b\">\n          <input (input)=\"setMargin('img','margin-left', $event)\" type=\"number\" class=\"form-control inputWidth\" [(ngModel)]=\"margins.img_m_l\">\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-lg-3 col-sm-3 col-md-3\" style=\"margin-top: 10px;\">\n          Alignment\n        </div>\n        <div class=\"col-lg-9 col-sm-9 col-md-9\" style=\"padding: 0px; border: 1px solid #2392ED; width: 196px;  margin-left: 28px; margin-top: 8px;\">\n          <label style=\"border-right:1px solid #2392ED; max-width: 32px; margin-bottom: 0px; height: 28px; padding: 0px 39px 0px 25px; cursor: pointer;\"\n            [ngStyle]=\"alignImg == 'left' ? {backgroundColor: '#2392ed', color: '#ffffff'} : {color: '#2392ed', backgroundColor: '#ffffff'}\">\n            <input type=\"radio\" name=\"pageLayout\" value=\"left\" [(ngModel)]=\"alignImg\">\n            <span class=\"layout-span\">\n              <!-- <span class=\"layout-icon center-top\"></span> -->\n              <span [ngClass]=\"{'layout-active': false}\">\n                <span [ngClass]=\"false ? 'layout-icon left-middle-active' : 'layout-icon left-middle'\"></span>\n              </span>\n              <!-- <span class=\"layout-icon center-bottom\"></span> -->\n            </span>\n          </label>\n          <label style=\"border-right:1px solid #2392ED; margin-bottom: 0px; height: 28px; max-width: 32px; padding: 0px 36px 0px 26px; cursor: pointer;\"\n            [ngStyle]=\"alignImg == 'center' ? {backgroundColor: '#2392ed', color: '#ffffff'} : {color: '#2392ed', backgroundColor: '#ffffff'}\">\n            <input type=\"radio\" name=\"pageLayout\" value=\"center\" [(ngModel)]=\"alignImg\">\n            <span class=\"layout-span\">\n              <!-- <span class=\"layout-icon center-top\"></span> -->\n              <span [ngClass]=\"{'layout-active': false}\">\n                <span [ngClass]=\"false ? 'layout-icon center-middle-active' : 'layout-icon center-middle'\"></span>\n              </span>\n              <!-- <span class=\"layout-icon center-bottom\"></span> -->\n            </span>\n          </label>\n          <label style=\"margin-bottom: 0px; height: 28px;  max-width: 32px; padding: 0px 25px 0px 22px; cursor: pointer;\"\n            [ngStyle]=\"alignImg == 'right' ? {backgroundColor: '#2392ed', color: '#ffffff'} : {color: '#2392ed', backgroundColor: '#ffffff'}\">\n            <input type=\"radio\" name=\"pageLayout\" value=\"right\" [(ngModel)]=\"alignImg\">\n            <span class=\"layout-span\">\n              <!-- <span class=\"layout-icon right-top\"></span> -->\n              <span [ngClass]=\"{'layout-active': false}\">\n                <span [ngClass]=\"false ? 'layout-icon right-middle-active' : 'layout-icon right-middle'\"></span>\n              </span>\n              <!-- <span class=\"layout-icon right-bottom\"></span> -->\n            </span>\n          </label>\n        </div>\n      </div>\n\n    </div>\n  </div>\n  </div>\n  <div class=\"left_sidebar_footer text-center\" style=\"border-right: 1px solid #c1bdbe;\">\n    <button class=\"btn s2c_save_btn\" type=\"button\" (click)=\"save()\">Save</button>\n    <button class=\"btn left_ques_cancel_btn\" type=\"button\" (click)=\"cancel()\">Cancel</button>\n</div>\n</div>\n\n<div *ngIf=\"!loaded\" class=\"right-container\" style=\"text-align: center; padding-top: 240px;\">\n  <span style=\"font-size: 24px; font-weight: 900;\">Loading...</span>\n</div>\n\n<div *ngIf=\"loaded\" class=\"right-container\" [ngStyle]=\"{'background-size':'cover','background-color': backgroundColor, 'background-image': 'url('+imageBGSrc+')', 'height': '100vh'}\">\n  <div [ngStyle]=\"{'text-align':alignImg}\">\n    <div [ngStyle]=\"marginImg\">\n      <img [src]=\"imageSrc\">\n    </div>\n  </div>\n  <div style=\"padding: 30px; color: #3A3A3A;\tfont-family: 'Helvetica';\">\n    <div style=\"text-align:center;\">\n      <div *ngIf=\"title\" [ngStyle]=\"marginTitle\">\n        <span [innerHTML]=\"title | safeHtml\"></span>\n      </div>\n      <div *ngIf=\"!title\" [ngStyle]=\"marginTitle\">\n        <span>Title Text</span>\n      </div>\n      <div *ngIf=\"des\" [ngStyle]=\"marginDes\">\n        <span [innerHTML]=\"des | safeHtml\"></span>\n      </div>\n      <div *ngIf=\"!des\" [ngStyle]=\"marginDes\">\n        <span>Description</span>\n      </div>\n      <div [ngStyle]=\"{'text-align': alignBtn}\">\n        <div [ngStyle]=\"marginBtn\">\n          <button type=\"button\" class=\"btn btn_primary\" [ngStyle]=\"{'color':buttonTextColor, 'background-color':buttonBGColor, 'border': borderBtn.width+'px '+borderBtn.type+' '+borderBtn.color}\">{{buttonText}}</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.intro/survey.intro.component.scss":
/***/ (function(module, exports) {

module.exports = ".color_picker_input {\n  background: #2889e9;\n  height: 13px;\n  width: 13px;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  border: none;\n  border-radius: 2px;\n  margin-top: 5px;\n  margin-left: 4px;\n  cursor: pointer; }\n\n.inputDimension {\n  width: 22%;\n  display: inline-block;\n  text-align: center; }\n\n.inputWidth {\n  width: 22%;\n  display: inline-block;\n  height: 26px;\n  border-radius: 2px; }\n\n.layout-span {\n  display: inline-block; }\n\n.layout-icon {\n  height: 17px;\n  width: 15px;\n  display: block;\n  margin-top: 6px; }\n\n.layout-icon.left-middle {\n    background: url(\"/assets/images/editSurvey/themes/left-align.svg\");\n    background-repeat: no-repeat; }\n\n.layout-icon.left-middle-active {\n    background: url(\"/assets/images/editSurvey/themes/left-align-active.svg\");\n    background-repeat: no-repeat; }\n\n.layout-icon.center-middle {\n    background: url(\"/assets/images/editSurvey/themes/center-align.svg\");\n    background-repeat: no-repeat; }\n\n.layout-icon.center-middle-active {\n    background: url(\"/assets/images/editSurvey/themes/center-align-active.svg\");\n    background-repeat: no-repeat; }\n\n.layout-icon.right-middle {\n    background: url(\"/assets/images/editSurvey/themes/right-align.svg\");\n    background-repeat: no-repeat; }\n\n.layout-icon.right-middle-active {\n    background: url(\"/assets/images/editSurvey/themes/right-align-active.svg\");\n    background-repeat: no-repeat; }\n\ninput[type='radio'] {\n  display: none; }\n\nselect.borderDropDown {\n  width: 56%;\n  display: inline-block;\n  border-radius: 2px; }\n\nselect.borderDropDownED {\n  width: 100%;\n  border-radius: 2px; }\n\n.logoImage {\n  display: inline-block;\n  border: 1px solid #D8D8D8;\n  width: calc(100% - 38px);\n  height: 30px;\n  padding: 5px;\n  background-color: white;\n  font-size: 12px;\n  border-radius: 2px;\n  vertical-align: top; }\n\n.mce-flow-layout-item.mce-last {\n  overflow-y: auto; }\n\n.add_bg {\n  padding: 0px 10px; }\n\n.introPage {\n  overflow-y: auto;\n  height: calc(100% - 76px); }\n\n::ng-deep .introTitle .mce-listbox button {\n  width: 48px; }\n\n::ng-deep .introDescription .mce-listbox button {\n  width: 48px; }\n\n.file_input {\n  padding: 94px 30px 50px 30px;\n  border: 1px dashed #90bcdf;\n  margin: 20px 0px;\n  background-color: #f9f9f9;\n  width: 100%;\n  max-width: 300px; }\n\n.add_bg {\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 22px;\n  cursor: pointer; }\n\n.add_bg_label {\n  width: 100%; }\n\n.intro_bg {\n  display: none; }\n\n.intro_bg_icon {\n  height: 19px;\n  margin-right: 6px; }\n\n.file_input:before {\n  position: absolute;\n  left: 35%;\n  margin-top: -30px;\n  content: \"Drag and drop files.\"; }\n\n.file_input_types {\n  position: absolute;\n  width: 326px;\n  text-align: center;\n  font-size: 11px;\n  color: #777;\n  bottom: 17px; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.intro/survey.intro.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyIntroComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_http__ = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular2_jwt__ = __webpack_require__("./node_modules/angular2-jwt/angular2-jwt.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular2_jwt___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_angular2_jwt__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shared_services_constants_service__ = __webpack_require__("./src/app/shared/services/constants.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var SurveyIntroComponent = (function () {
    function SurveyIntroComponent(router, service, http, constants, _http, editDataService) {
        this.router = router;
        this.service = service;
        this.http = http;
        this.constants = constants;
        this._http = _http;
        this.editDataService = editDataService;
        this.onSuccessAction = {};
        this.isDataReady = false;
        this.title = "Welcome! Let’s get  started";
        this.des = "The activity shouldn’t take longer than 10-15 minutes to complete";
        this.buttonText = "Start";
        this.buttonTextColor = "#ffffff";
        this.buttonBGColor = "#000000";
        this.backgroundColor = "#ffffff";
        this.imageSrc = "";
        this.imageBGSrc = "";
        this.loaded = false;
        this.margins = {
            title_m_l: 0,
            title_m_r: 0,
            title_m_t: 0,
            title_m_b: 0,
            des_m_l: 0,
            des_m_r: 0,
            des_m_t: 0,
            des_m_b: 0,
            btn_m_l: 0,
            btn_m_r: 0,
            btn_m_t: 0,
            btn_m_b: 0,
            img_m_l: 0,
            img_m_r: 0,
            img_m_t: 0,
            img_m_b: 0,
        };
        this.marginTitle = {
            'margin-left': '0px',
            'margin-right': '0px',
            'margin-top': '0px',
            'margin-bottom': '0px'
        };
        this.marginDes = {
            'margin-left': '0px',
            'margin-right': '0px',
            'margin-top': '0px',
            'margin-bottom': '0px'
        };
        this.marginBtn = {
            'margin-left': '0px',
            'margin-right': '0px',
            'margin-top': '0px',
            'margin-bottom': '0px'
        };
        this.marginImg = {
            'margin-left': '0px',
            'margin-right': '0px',
            'padding-top': '0px',
            'margin-bottom': '0px'
        };
        this.borderBtn = {
            color: '#ffffff',
            width: 0,
            type: 'solid'
        };
        this.alignBtn = 'center';
        this.alignImg = 'center';
        this.titleP = {
            piping: 'e',
            contactPipe: '',
            eDataPipe: ''
        };
        this.desP = {
            piping: 'e',
            contactPipe: '',
            eDataPipe: ''
        };
        this.showStart = false;
        this.pointeevts = 'none';
        this.opacity = 0.3;
    }
    SurveyIntroComponent.prototype.ngOnInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.editDataService.surveyDesignData.displaySidebar = false;
        }, 0);
        this.surveyDesignData = this.editDataService.surveyDesignData;
        console.log("editDataService", this.editDataService);
        this.editDataService.getSurveyData().subscribe(function (data) {
            if (!data)
                return;
            _this.loaded = true;
            console.log("this.editDataService", data);
            (data.startPage.title) ? _this.title = data.startPage.title : '';
            (data.startPage.des) ? _this.des = data.startPage.des : '';
            (data.startPage.buttonText) ? _this.buttonText = data.startPage.buttonText : '';
            (data.startPage.buttonTextColor) ? _this.buttonTextColor = data.startPage.buttonTextColor : '';
            (data.startPage.buttonBGColor) ? _this.buttonBGColor = data.startPage.buttonBGColor : '';
            (data.startPage.backgroundColor) ? _this.backgroundColor = data.startPage.backgroundColor : '';
            (data.startPage.imageSrc) ? _this.imageSrc = data.startPage.imageSrc : '';
            (data.startPage.imageBGSrc) ? _this.imageBGSrc = data.startPage.imageBGSrc : '';
            (data.startPage.marginTitle) ? _this.marginTitle = data.startPage.marginTitle : '';
            (data.startPage.marginDes) ? _this.marginDes = data.startPage.marginDes : '';
            (data.startPage.marginBtn) ? _this.marginBtn = data.startPage.marginBtn : '';
            (data.startPage.marginImg) ? _this.marginImg = data.startPage.marginImg : '';
            (data.startPage.borderBtn) ? _this.borderBtn = data.startPage.borderBtn : '';
            (data.startPage.alignBtn) ? _this.alignBtn = data.startPage.alignBtn : '';
            (data.startPage.alignImg) ? _this.alignImg = data.startPage.alignImg : '';
            (data.startPage.showStart) ? _this.showStart = data.startPage.showStart : '';
            if (_this.showStart) {
                _this.pointeevts = "auto";
                _this.opacity = 1;
            }
            else {
                _this.pointeevts = "none";
                _this.opacity = 0.3;
            }
            _this.margins.title_m_l = _this.marginTitle['margin-left'].substring(0, _this.marginTitle['margin-left'].length - 2);
            _this.margins.title_m_r = _this.marginTitle['margin-right'].substring(0, _this.marginTitle['margin-right'].length - 2);
            _this.margins.title_m_t = _this.marginTitle['margin-top'].substring(0, _this.marginTitle['margin-top'].length - 2);
            _this.margins.title_m_b = _this.marginTitle['margin-bottom'].substring(0, _this.marginTitle['margin-bottom'].length - 2);
            _this.margins.des_m_l = _this.marginDes['margin-left'].substring(0, _this.marginDes['margin-left'].length - 2);
            _this.margins.des_m_r = _this.marginDes['margin-right'].substring(0, _this.marginDes['margin-right'].length - 2);
            _this.margins.des_m_t = _this.marginDes['margin-top'].substring(0, _this.marginDes['margin-top'].length - 2),
                _this.margins.des_m_b = _this.marginDes['margin-bottom'].substring(0, _this.marginDes['margin-bottom'].length - 2),
                _this.margins.btn_m_l = _this.marginBtn['margin-left'].substring(0, _this.marginBtn['margin-left'].length - 2);
            _this.margins.btn_m_r = _this.marginBtn['margin-right'].substring(0, _this.marginBtn['margin-right'].length - 2);
            _this.margins.btn_m_t = _this.marginBtn['margin-top'].substring(0, _this.marginBtn['margin-top'].length - 2);
            _this.margins.btn_m_b = _this.marginBtn['margin-bottom'].substring(0, _this.marginBtn['margin-bottom'].length - 2);
            _this.margins.img_m_l = _this.marginImg['margin-left'].substring(0, _this.marginImg['margin-left'].length - 2);
            _this.margins.img_m_r = _this.marginImg['margin-right'].substring(0, _this.marginImg['margin-right'].length - 2);
            _this.margins.img_m_t = _this.marginImg['padding-top'].substring(0, _this.marginImg['padding-top'].length - 2);
            _this.margins.img_m_b = _this.marginImg['margin-bottom'].substring(0, _this.marginImg['margin-bottom'].length - 2);
        });
    };
    SurveyIntroComponent.prototype.onSuccessToActions = function (act) {
        this.onSuccessAction = {
            action: act
        };
    };
    SurveyIntroComponent.prototype.updateContact = function (type, where) {
        var expression = '';
        if (type == 'c' && where == "des" && this.desP.contactPipe)
            expression = "{{" + type + "://" + this.desP.contactPipe + "}}";
        else if (type == 'e' && where == "des" && this.desP.eDataPipe)
            expression = "{{" + type + "://" + this.desP.eDataPipe + "}}";
        else if (type == 'c' && where == "title" && this.titleP.contactPipe)
            expression = "{{" + type + "://" + this.titleP.contactPipe + "}}";
        else if (type == 'e' && where == "title" && this.titleP.eDataPipe)
            expression = "{{" + type + "://" + this.titleP.eDataPipe + "}}";
        expression && tinymce.activeEditor.execCommand('mceInsertContent', true, expression);
    };
    SurveyIntroComponent.prototype.setMargin = function (type, pos, event) {
        this.marginTitle['margin-left'] = this.margins.title_m_l + 'px';
        this.marginTitle['margin-right'] = this.margins.title_m_r + 'px';
        this.marginTitle['margin-top'] = this.margins.title_m_t + 'px';
        this.marginTitle['margin-bottom'] = this.margins.title_m_b + 'px';
        this.marginDes['margin-left'] = this.margins.des_m_l + 'px';
        this.marginDes['margin-right'] = this.margins.des_m_r + 'px';
        this.marginDes['margin-top'] = this.margins.des_m_t + 'px';
        this.marginDes['margin-bottom'] = this.margins.des_m_b + 'px';
        this.marginBtn['margin-left'] = this.margins.btn_m_l + 'px';
        this.marginBtn['margin-right'] = this.margins.btn_m_r + 'px';
        this.marginBtn['margin-top'] = this.margins.btn_m_t + 'px';
        this.marginBtn['margin-bottom'] = this.margins.btn_m_b + 'px';
        this.marginImg['margin-left'] = this.margins.img_m_l + 'px';
        this.marginImg['margin-right'] = this.margins.img_m_r + 'px';
        this.marginImg['padding-top'] = this.margins.img_m_t + 'px';
        this.marginImg['margin-bottom'] = this.margins.img_m_b + 'px';
    };
    SurveyIntroComponent.prototype.removeImg = function () {
        this.imageSrc = '';
    };
    SurveyIntroComponent.prototype.removeBG = function () {
        this.imageBGSrc = '';
    };
    SurveyIntroComponent.prototype.saveImage = function (event) {
        var that = this;
        var uploadId = "";
        var fileList = event.target.files;
        var file = fileList[0];
        if (file) {
            var that_1 = this;
            var reader = new FileReader();
            reader.onload = function (e) {
                that_1.imageSrc = e.target['result'];
            };
            reader.readAsDataURL(file);
        }
        else {
            that.imageSrc = '';
        }
        var fileData = { id: uploadId, file: file };
        console.log('fileData', fileData);
        // file && (this.ansData = [{imgSrc: file.name, uploadId: uploadId}]);
    };
    SurveyIntroComponent.prototype.saveBGImage = function (event) {
        var that = this;
        var uploadId = "";
        var fileList = event.target.files;
        var file = fileList[0];
        if (file) {
            var that_2 = this;
            var reader = new FileReader();
            reader.onload = function (e) {
                that_2.imageBGSrc = e.target['result'];
            };
            reader.readAsDataURL(file);
        }
        else {
            that.imageBGSrc = '';
        }
        var fileData = { id: uploadId, file: file };
        console.log('fileData', fileData);
        // file && (this.ansData = [{bgImgSrc: file.name, uploadId: uploadId}]);
    };
    SurveyIntroComponent.prototype.cancel = function () {
        // this.ngOnDestroy()
        this.router.navigate(['/survey', 'design', this.editDataService.sId]);
    };
    SurveyIntroComponent.prototype.offOnIntro = function (event) {
        this.showStart = !this.showStart;
        if (this.showStart) {
            this.pointeevts = 'auto';
            this.opacity = 1;
        }
        else {
            this.pointeevts = 'none';
            this.opacity = 0.3;
        }
        // console.log("eve",event);
        // console.log("this.showStart",this.showStart);
        this.save();
    };
    SurveyIntroComponent.prototype.save = function () {
        var data = {
            title: this.title,
            des: this.des,
            buttonText: this.buttonText,
            buttonTextColor: this.buttonTextColor,
            buttonBGColor: this.buttonBGColor,
            backgroundColor: this.backgroundColor,
            imageSrc: this.imageSrc,
            imageBGSrc: this.imageBGSrc,
            showStart: this.showStart,
            marginTitle: this.marginTitle,
            marginDes: this.marginDes,
            marginBtn: this.marginBtn,
            marginImg: this.marginImg,
            borderBtn: this.borderBtn,
            alignBtn: this.alignBtn,
            alignImg: this.alignImg
        };
        var sp = { startPage: data };
        this.service.resource.updateSurveyData(this.editDataService.sId, sp).subscribe(function (dat) {
            console.log("dat", dat);
        });
        this.service.toastr.success('Intro Page has been saved!', 'Saved Successfully');
    };
    SurveyIntroComponent.prototype.onTitleEvent = function (event) {
        // console.log("event",event)
        this.title = event.options.content;
    };
    SurveyIntroComponent.prototype.onDesEvent = function (event) {
        // console.log("event",event)
        this.des = event.options.content;
    };
    SurveyIntroComponent.prototype.ngOnDestroy = function () {
        if (this.subscription)
            this.subscription.unsubscribe();
    };
    return SurveyIntroComponent;
}());
SurveyIntroComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey-intro',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.intro/survey.intro.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.intro/survey.intro.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_4__angular_router__["e" /* Router */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__angular_router__["e" /* Router */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_6__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2_angular2_jwt__["AuthHttp"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2_angular2_jwt__["AuthHttp"]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_5__shared_services_constants_service__["a" /* ConstantsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__shared_services_constants_service__["a" /* ConstantsService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_1__angular_http__["Http"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_http__["Http"]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_3__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__edit_data_service__["a" /* EditDataService */]) === "function" && _f || Object])
], SurveyIntroComponent);

var _a, _b, _c, _d, _e, _f;
//# sourceMappingURL=survey.intro.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.main-list/page.operations.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PageOperationsService; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var PageOperationsService = (function () {
    function PageOperationsService(services) {
        this.services = services;
    }
    PageOperationsService.prototype.isQuestionInvolvedInLogic = function (delQId) {
        //function to see if question is involved in any logic
        var allQuestionsOfSurvey = this.services.form.allQuestionsOfSurvey;
        var tempObj = {};
        for (var quesId in allQuestionsOfSurvey) {
            var quesAffected = [];
            for (var _i = 0, _a = allQuestionsOfSurvey[quesId].logicArr; _i < _a.length; _i++) {
                var logicItem = _a[_i];
                if (logicItem.destQId == delQId) {
                    if (quesAffected.indexOf(logicItem.logic) == -1) {
                        quesAffected.push(logicItem.logic);
                    }
                }
            }
            if (quesAffected.length > 0) {
                tempObj[quesId] = quesAffected;
            }
        }
        return tempObj;
    };
    PageOperationsService.prototype.logicLeftOnAffQues = function (qId, logicName) {
        var allQuestionsOfSurvey = this.services.form.allQuestionsOfSurvey;
        allQuestionsOfSurvey[qId].logicArr = allQuestionsOfSurvey[qId].logicArr.filter(function (logic) {
            return (logic.logic != logicName);
        });
    };
    return PageOperationsService;
}());
PageOperationsService = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _a || Object])
], PageOperationsService);

var _a;
//# sourceMappingURL=page.operations.service.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.main-list/survey.main-list.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"survey_div\" [ngStyle]=\"themeData?.survey?.body\" *ngIf=\"surveyDesignData && formObj\">\n  <div [ngStyle]=\"themeData?.survey?.header\">\n    <div class=\"sur-max-width survey_header\">\n      <div [hidden]=\"formObj.logo.hasLogo == 1\">\n        <label class=\"add_logo_label\">\n          <div class=\"add_logo\">\n            <input type=\"file\" class=\"survey_logo\" #surveyLogo (change)=\"logoUploadChange()\">\n            <span><img src=\"./assets/images/editSurvey/logo-placeholder.svg\" class=\"survey_logo_icon\"></span>\n            <span>Add Logo</span>\n          </div>\n        </label>\n      </div>\n      <div *ngIf=\"formObj.logo.hasLogo == 1 && formObj.logo.position == 'above'\" (click)=\"editSurveyLogo()\" title=\"Edit Logo Settings\" class=\"logo_div\" [style.text-align]=\"formObj.logo.allignment\">\n        <img class=\"display-inline img-responsive\" [src]=\"logoDetails?.src\">\n      </div>\n      <div [hidden]=\"!formObj.showTitle\" class=\"survey_title break_words\" [ngStyle]=\"themeData?.survey?.title\" (click)=\"editSurveyTitle()\" title=\"Edit Survey Title\">\n        <span class=\"inline-block\" [innerHTML]=\"formObj.title\"></span>\n      </div>\n      <div *ngIf=\"formObj.logo.hasLogo == 1 && formObj.logo.position == 'below'\" (click)=\"editSurveyLogo()\" title=\"Edit Logo Settings\" class=\"logo_div\" [style.text-align]=\"formObj.logo.allignment\">\n        <img class=\"display-inline img-responsive\" [src]=\"logoDetails?.src\">\n      </div>\n    </div>\n  </div>\n  <div style=\"text-align:center; margin-top: 8px;\">\n      <button class=\"btn btn_primary\" (click)=\"editIntroPage()\" title=\"Intro Page\">Intro Page</button>\n  </div>\n  <div class=\"sur-max-width create_survey_div page_div\" [ngStyle]=\"themeDetails?.pageTheme[pageObj._id].body\" *ngFor=\"let pageObj of formObj.pageFields; index as page_idx; trackBy trackByFn\">\n    <div class=\"page_body\" id=\"{{pageObj._id}}\">\n      <div class=\"page_options_div hide_small_sc\">\n        <span class=\"page_options_span\" (click)=\"actionFunction('', 'question-randomize', pageObj._id)\" title=\"Page Randomizations\">Page Randomizations</span>\n        <span (click)=\"deletePage(pageObj._id, page_idx)\" title=\"Delete Page\" class=\"page_options_span\"><img src=\"./assets/images/editSurvey/delete.svg\" class=\"page_delete_icon\"></span>\n      </div>\n      <div class=\"page_options_div hide_large_sc\">\n        <div class=\"btn-group page_options_div_icon\" dropdown>\n          <div dropdownToggle class=\"page_options_icon dropdown-toggle\" style=\"cursor: pointer;\" title=\"Page Options\">\n            <img src=\"./assets/images/editSurvey/more.svg\">\n          </div>\n          <ul *dropdownMenu class=\"dropdown-menu\" role=\"menu\">\n            <li (click)=\"actionFunction('', 'question-randomize', pageObj._id)\" role=\"menuitem\">\n              <a class=\"dropdown-item\">\n                <span><img src=\"./assets/images/editSurvey/randomization.png\" style=\"max-height: 18px;\"></span>\n                <span>Page Randomizations</span>\n              </a>\n            </li>\n            <li role=\"menuitem\" (click)=\"deletePage(pageObj._id, page_idx)\">\n              <a class=\"dropdown-item\">\n                <span><img src=\"./assets/images/editSurvey/delete.svg\"></span>\n                <span>Delete Page</span>\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div class=\"page_header\" [ngStyle]=\"themeDetails?.pageTheme[pageObj._id]?.header\">\n        <div class=\"page_num_div\" [hidden]=\"!formObj.showPageNumber\">\n          <span>\n            Page\n            {{allPagesAndQues.data[pageObj._id].count}}\n          </span>\n        </div>\n        <div [hidden]=\"!formObj.showPTitle\">\n          <div class=\"page_title break_words\" [ngStyle]=\"themeDetails?.pageTheme[pageObj._id]?.title\" (click)=\"editPageTitleDesc(pageObj._id, page_idx, 'title')\" title=\"Edit Page Title\">\n            <span class=\"inline-block\" [innerHTML]=\"allPagesAndQues.data[pageObj._id].title == '' ? 'Add Page Title' : allPagesAndQues.data[pageObj._id].title\"></span>\n          </div>\n          <div class=\"page_description break_words\" [ngStyle]=\"themeDetails?.pageTheme[pageObj._id]?.desc\" (click)=\"editPageTitleDesc(pageObj._id, page_idx, 'desc')\" title=\"Edit Page Description\">\n            <span class=\"inline-block\" [innerHTML]=\"allPagesAndQues.data[pageObj._id].desc == '' ? 'Add Page Description' : allPagesAndQues.data[pageObj._id].desc\"></span>\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"(formObj.showProg.hasProg && !formObj.showProg.position)\">\n        <div class=\"progress-bar-div\" [ngStyle]=\"themeData?.survey?.progressBar\" *ngIf=\"reBuildProgBar\">\n  \t\t\t\t<app-progress-bar\n            [inpData]=\"{count: allPagesAndQues.data[pageObj._id].count, totalPages: formObj.pageFields.length, 'format': formObj.showProg.format}\"\n            [color]=\"themeData?.survey?.progressBar?.color\">\n          </app-progress-bar>\n        </div>\n      </div>\n      <div class=\"questions_body\">\n        <div class=\"question_footer text-center\">\n          <div class=\"inner_footer\">\n            <div class=\"footer_hr\"></div>\n            <div class=\"question_footer_btns\">\n              <button class=\"btn add_ques_on_page\" (click)=\"addNewQuestion(pageObj._id, page_idx, null, 0)\" title=\"Add Question\"></button>\n              <button class=\"btn page_break_btn\" (click)=\"addPageBreak(pageObj._id,null,page_idx)\" title=\"Page Break\"></button>\n            </div>\n          </div>\n        </div>\n        <div *ngFor=\"let question of allPagesAndQues.data[pageObj._id].ques; index as question_idx; trackBy trackByFn\">\n          <div class=\"questions_div\" id=\"{{question['_id']}}\">\n\n            <!-- <div class=\"logic_and_carry\">\n              <div class=\"logics_applied\" *ngIf=\"allQuestionsOfSurvey[question._id].logicArr.length\">\n                <div class=\"logics_applied_icon\">\n                  <img src=\"./assets/images/editSurvey/logic.svg\" title=\"Logics applied\">\n                </div>\n              </div>\n              <div class=\"carry_applied\" *ngIf=\"allQuestionsOfSurvey[question._id].frmCarryForward.length\" (click)=\"question.displayCarry = !question.displayCarry\">\n                <div class=\"carry_applied_icon\">\n                  <img src=\"./assets/images/editSurvey/carry-forward.svg\" title=\"Carry Forward applied\">\n                </div>\n              </div>\n            </div> -->\n\n            <div [ngStyle]=\"themeDetails?.quesTheme[question._id]?.body\" class=\"inner_question_div\" [ngClass]=\"{hidden_inner_ques_div: question.isHidden}\">\n              <div [hidden]=\"!question.isHidden\" [ngClass]=\"(question.isHidden ? 'hidden_ques' : '')\"></div>\n              <div class=\"logic-container text-right\">\n                <ng-container *ngFor=\"let item of question.logicNamesArr; index as logic_idx; trackBy: trackByFn\">\n                  <span [hidden]=\"!(item == 'skip')\" (click)=\"editLogic(pageObj._id, question._id, question.type, 'skip')\" title=\"Skip Logic\"><img src=\"./assets/images/editSurvey/logics/skip-logic.svg\"></span>\n                  <span [hidden]=\"!(item == 'compound')\" (click)=\"editLogic(pageObj._id, question._id, question.type, 'compound')\" title=\"Delayed Branching\"><img src=\"./assets/images/editSurvey/logics/delayed-branching.svg\"></span>\n                  <span [hidden]=\"!(item == 'display')\" (click)=\"editLogic(pageObj._id, question._id, question.type, 'display')\" title=\"Display Logic\"><img src=\"./assets/images/editSurvey/logics/display-logic.svg\"></span>\n                  <span [hidden]=\"!(item == 'promoter')\" (click)=\"editLogic(pageObj._id, question._id, question.type, 'promoter')\" title=\"Promoter Amplification\"><img src=\"./assets/images/editSurvey/logics/promoter-amplification.svg\"></span>\n                  <span [hidden]=\"!(item == 'protractor')\" (click)=\"editLogic(pageObj._id, question._id, question.type, 'protractor')\" title=\"Ticket Generation\"><img src=\"./assets/images/editSurvey/logics/ticket-generation.svg\"></span>\n                  <span [hidden]=\"!(item == 'embed')\" (click)=\"editLogic(pageObj._id, question._id, question.type, 'embed')\" title=\"Embedded Data Logic\"><img src=\"./assets/images/editSurvey/logics/embedded-data.svg\"></span>\n                </ng-container>\n                <span [hidden]=\"!(allQuestionsOfSurvey[question._id].frmCarryForward.length)\" (click)=\"question.displayCarry = !question.displayCarry\"><img src=\"./assets/images/editSurvey/logics/carry-forward.svg\"></span>\n              </div>\n\n              <div *ngIf=\"question.displayCarry\" [ngClass]=\"{'transition':question.displayCarry}\" [@myAnimation] class=\"logics_animation\">\n                <div class=\"applied_carry_forward\">\n                  <div class=\"carry_actions pull-right\">\n                  <span title=\"Remove Carry Forward\" (click)=\"question.displayCarry = !question.displayCarry;removeCarryForward(question._id)\"> <img src=\"./assets/images/editSurvey/delete.svg\"> </span></div>\n                  <div class=\"carry_title\">Applied Carry forward</div>\n                  <div class=\"carry\" *ngFor=\"let item of allQuestionsOfSurvey[question._id].frmCarryForward; index as carry_idx; trackBy: trackByFn\">\n                    <span class=\"carry-question-list-individual\" [innerHTML]=\"'Q'+ questionCountAndId.data[item.quesId] +'. '+ allQuestionsOfSurvey[item.quesId].title  + ' - '+ (allQuestionsOfSurvey[item.quesId].fieldType.family == 'matrix'? carryMatrixJSON[item.type - 1].text : carryJSON[item.type - 1].text )+''\"></span>\n                  </div>\n                  <div>\n                </div>\n               </div>\n              </div>\n\n              <app-question-template\n                  [questionData]=\"{'count':question.count, 'form': allQuestionsInFormGroup[question._id],'changesInChild': changesToChildComp}\"\n                  [rateVisible]=\"true\"\n                  [themeInp]=\"{'surTheme': themeData?.survey, 'quesTheme': themeDetails?.quesTheme[question._id], 'optTheme': themeDetails?.optionTheme[question._id]}\">\n              </app-question-template>\n\n            </div>\n\n            <div class=\"question_actions\">\n              <div>\n                <div class=\"ques_actions_icon\" title=\"Edit\" (click)=\"editQuestion(pageObj._id, page_idx, question._id, question_idx)\">\n                  <img src=\"./assets/images/editSurvey/edit-design.svg\">\n                </div>\n                <div class=\"ques_actions_icon\" title=\"Logics\" (click)=\"setLogicObj(pageObj._id, question._id, 'logic', question.type)\">\n                  <img src=\"./assets/images/editSurvey/logic.svg\">\n                </div>\n                <div class=\"ques_actions_icon\" title=\"Copy\" (click)=\"opencopyOrMoveQuestionDropDown(pageObj._id, question._id, question_idx)\">\n                  <img src=\"./assets/images/editSurvey/duplicate.svg\">\n                </div>\n                <div class=\"ques_actions_icon\" title=\"Delete\" (click)=\"delQuestion(pageObj._id, question._id, page_idx, question_idx)\">\n                  <img src=\"./assets/images/editSurvey/delete.svg\">\n                </div>\n                <!-- <div class=\"ques_actions_icon\" title=\"Preview\">\n                  <img src=\"./assets/images/editSurvey/question-preview.svg\">\n                </div> -->\n                <div class=\"btn-group\" dropdown>\n                  <div dropdownToggle class=\"ques_actions_icon dropdown-toggle\" title=\"More\">\n                    <img src=\"./assets/images/editSurvey/more.svg\">\n                  </div>\n                  <ul *dropdownMenu class=\"dropdown-menu\" role=\"menu\">\n                    <li role=\"menuitem\" (click)=\"hideQuestion(question._id, question.isHidden, pageObj._id, page_idx, question_idx)\">\n                      <a class=\"dropdown-item\">\n                        <span>{{(question.isHidden?'Show':'Hide')}}</span>\n                      </a>\n                    </li>\n                    <li role=\"menuitem\" *ngFor=\"let action of questionTypesJSON[allQuestionsInFormGroup[question._id].type.type].actions;trackBy: trackByFn;\" (click)=\"actionFunction(question._id, action.value, pageObj._id)\" [hidden]=\"!action.displayInList\">\n                      <a class=\"dropdown-item\">\n                        <span>{{action.text}}</span>\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"question_footer text-center\">\n            <div class=\"inner_footer\">\n              <div class=\"footer_hr\"></div>\n              <div class=\"question_footer_btns\">\n                <button class=\"btn add_ques_on_page\" (click)=\"addNewQuestion(pageObj._id, page_idx, question._id, (question_idx + 1))\" title=\"Add Question\"></button>\n                <button class=\"btn page_break_btn\" (click)=\"addPageBreak(pageObj._id,question._id,page_idx)\" title=\"Page Break\"></button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"(formObj.showProg.hasProg && formObj.showProg.position)\">\n        <div class=\"progress-bar-div\" [ngStyle]=\"themeData?.survey?.progressBar\" *ngIf=\"reBuildProgBar\">\n  \t\t\t\t<app-progress-bar\n            [inpData]=\"{count: allPagesAndQues.data[pageObj._id].count, totalPages: formObj.pageFields.length, 'format': formObj.showProg.format}\"\n            [color]=\"themeData?.survey?.progressBar?.color\">\n          </app-progress-bar>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<app-ques-del-notification\n  *ngIf=\"showDelNotification\"\n  [delNotification]=\"delNotification\"\n  [titlesOfDelQues]=\"titlesOfDelQues\"\n  (onClose)=\"closeDelNotification()\">\n</app-ques-del-notification>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.main-list/survey.main-list.component.scss":
/***/ (function(module, exports) {

module.exports = "@media (max-width: 990px) {\n  .hide_small_sc {\n    display: none; } }\n\n@media (min-width: 991px) {\n  .hide_large_sc {\n    display: none; } }\n\n.page_options_icon {\n  border: 1px solid #bbb9bb;\n  border-radius: 4px;\n  padding: 0 4px 2px 4px;\n  background-color: white; }\n\n.page_options_div_icon .dropdown-menu {\n  left: auto;\n  right: 0; }\n\n.page_options_div_icon .dropdown-menu li {\n    cursor: pointer; }\n\n.add_logo {\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 22px;\n  cursor: pointer; }\n\n.add_logo_label {\n  width: 100%; }\n\n.survey_logo {\n  display: none; }\n\n.survey_logo_icon {\n  height: 19px;\n  margin-right: 6px; }\n\n::ng-deep .applied_carry_forward .carry-question-list-individual p {\n  display: inline-block;\n  font-weight: bolder; }\n\n.logo_div {\n  cursor: pointer;\n  overflow: auto; }\n\n.survey_div {\n  min-height: calc(100vh - 60px); }\n\n.survey_header {\n  padding: 10px; }\n\n.sur-max-width {\n  max-width: 896px;\n  margin: auto; }\n\n.create_survey_div {\n  padding: 14px;\n  background-color: white;\n  border-radius: 4px; }\n\n.survey_title {\n  cursor: pointer; }\n\n.page_div {\n  -webkit-box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.07);\n          box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.07);\n  padding: 30px 15px;\n  margin: 25px auto 0 auto;\n  position: relative; }\n\n.page_div .page_title {\n  cursor: pointer; }\n\n.page_num_div {\n  text-align: center;\n  margin-bottom: 10px; }\n\n.page_div .page_description {\n  min-height: 20px;\n  cursor: pointer; }\n\n.page_div .page_options_div {\n  position: absolute;\n  right: 15px; }\n\n.page_div .page_options_span {\n  text-align: center;\n  color: #505b63;\n  border: 1px solid #f7f7f7;\n  background-color: white;\n  padding: 5px 8px;\n  display: inline-block;\n  border-radius: 4px;\n  -webkit-box-shadow: 0px 2px 3px 0 rgba(0, 0, 0, 0.2);\n          box-shadow: 0px 2px 3px 0 rgba(0, 0, 0, 0.2);\n  font-size: 12px;\n  margin-left: 6px;\n  cursor: pointer; }\n\n.page_div .questions_div {\n  background-color: transparent;\n  -webkit-box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.05);\n          box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.05);\n  padding: 1px 0 1px 1px;\n  border-radius: 4px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  width: 100%; }\n\n.page_div .inner_question_div {\n  background-color: transparent;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n  padding: 25px 15px 25px 25px;\n  width: calc(100% - 35px);\n  display: inline-block;\n  position: relative; }\n\n.page_div .inner_question_div.hidden_inner_ques_div {\n  opacity: 0.35; }\n\n.page_div .hidden_ques {\n  background-color: rgba(252, 248, 227, 0);\n  margin-left: -15px;\n  margin-top: -25px;\n  position: absolute;\n  font-size: 3em;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  z-index: 80;\n  padding: 5%;\n  background-size: cover;\n  color: black;\n  font-family: 'Helvetica Neue Medium'; }\n\n.applied_carry_forward {\n  background-color: #fafafa;\n  width: 100%;\n  padding: 15px;\n  border: 1px solid #dedede;\n  margin-bottom: 30px;\n  border-radius: 4px;\n  font-size: 12px; }\n\n.applied_carry_forward .carry_title {\n    color: #7ec0ec;\n    font-family: 'Helvetica Neue Medium';\n    margin-bottom: 8px; }\n\n.red_text {\n  color: red; }\n\n.questions_div .ques_text_div {\n  padding: 10px 0;\n  margin-bottom: 20px; }\n\n.questions_div .question_number_span {\n  font-family: 'Helvetica Neue Bold';\n  color: #494949;\n  font-size: 18px;\n  vertical-align: middle;\n  padding-left: 10px;\n  padding-right: 4px; }\n\n.questions_div .ques_icon_img {\n  border-right: 1px solid #0A73BA;\n  padding-right: 12px; }\n\n.questions_div .ques_icon_img > img {\n  height: 20px; }\n\n.questions_div .question_text {\n  font-family: 'Helvetica Neue Medium';\n  font-size: 18px;\n  line-height: 24px;\n  vertical-align: middle; }\n\n.questions_div .question_actions {\n  width: 35px;\n  text-align: center;\n  vertical-align: top;\n  display: inline-block; }\n\n.questions_div .question_actions .ques_actions_icon {\n  margin-bottom: 15px;\n  margin-top: 15px;\n  cursor: pointer; }\n\n.questions_div .question_actions .btn-group {\n  display: block; }\n\n.questions_div .question_actions .dropdown-menu {\n  right: 40px;\n  left: auto;\n  top: auto;\n  bottom: -14px;\n  border: 0;\n  -webkit-box-shadow: 0 1px 12px rgba(0, 0, 0, 0.375);\n          box-shadow: 0 1px 12px rgba(0, 0, 0, 0.375);\n  cursor: pointer; }\n\n.questions_div .question_actions .dropdown-menu:before {\n  content: '';\n  height: 12px;\n  width: 12px;\n  border-top: 7px solid transparent;\n  border-left: 10px solid white;\n  border-bottom: 7px solid transparent;\n  position: absolute;\n  right: -12px;\n  bottom: 15px; }\n\n.questions_div .btn-group.open .dropdown-toggle {\n  -webkit-box-shadow: none;\n          box-shadow: none; }\n\n.page_div .question_footer {\n  padding-top: 40px;\n  height: 80px; }\n\n.page_div .question_footer_btns {\n  margin-top: -42px;\n  padding: 20px 0; }\n\n.page_div .question_footer_btns .btn {\n  height: 46px;\n  width: 46px; }\n\n.page_div .question_footer_btns .btn:focus {\n  outline: none; }\n\n.page_div .question_footer_btns .btn:active {\n  -webkit-box-shadow: none;\n          box-shadow: none; }\n\n.page_div .add_ques_on_page {\n  background: url(/assets/images/editSurvey/add-question.svg);\n  cursor: pointer;\n  display: inline-block;\n  background-repeat: no-repeat; }\n\n.page_div .page_break_btn {\n  background: url(/assets/images/editSurvey/page-break.svg);\n  cursor: pointer;\n  display: inline-block;\n  background-repeat: no-repeat; }\n\n.page_div .footer_hr {\n  border: 1px solid #E8E8E8; }\n\n.exit_link_div {\n  text-align: right;\n  margin-top: 10px;\n  margin-bottom: 10px; }\n\n.exit_btn {\n  background-color: #f3f3f3;\n  font-size: 12px;\n  font-family: 'Helvetica Neue Medium'; }\n\n.inline-block {\n  display: inline-block; }\n\n.progress-bar-div {\n  margin: auto; }\n\n.logic-container img {\n  cursor: pointer; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.main-list/survey.main-list.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyMainListComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_animations__ = __webpack_require__("./node_modules/@angular/animations/@angular/animations.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_questionTemplates_question_types_service__ = __webpack_require__("./src/app/shared/questionTemplates/question-types.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__edit_constants_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.constants.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_ngx_bootstrap_modal__ = __webpack_require__("./node_modules/ngx-bootstrap/modal/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__survey_design_left_panel_carry_forward_carry_forward_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/carry.forward/carry.forward.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__logo_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.main-list/logo.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__page_operations_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.main-list/page.operations.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__theme_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.main-list/theme.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__survey_randomization_randomization_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.randomization/randomization.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};













var SurveyMainListComponent = (function () {
    function SurveyMainListComponent(router, editDataService, editConstants, questionTypesService, modalService, services, elementRef, carryService, logoService, pageOpService, themeService, randServices) {
        this.router = router;
        this.editDataService = editDataService;
        this.editConstants = editConstants;
        this.questionTypesService = questionTypesService;
        this.modalService = modalService;
        this.services = services;
        this.elementRef = elementRef;
        this.carryService = carryService;
        this.logoService = logoService;
        this.pageOpService = pageOpService;
        this.themeService = themeService;
        this.randServices = randServices;
        this.onChange = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.allQuestionsInFormGroup = {};
        this.allQuestionsOfSurvey = {};
        this.allPagesAndQues = {};
        this.questionCountAndId = {};
        this.changesToChildComp = {};
        this.delNotification = {};
        this.showDelNotification = false;
        this.titlesOfDelQues = {};
        this.themeDetails = {
            pageTheme: '',
            quesTheme: '',
            optionTheme: ''
        };
        this.reBuildProgBar = true;
    }
    SurveyMainListComponent.prototype.openModal = function (template, modalClass) {
        this.modalRef = this.modalService.show(template, { class: modalClass || 'modal-md' });
    };
    SurveyMainListComponent.prototype.hideModal = function () {
        this.modalRef.hide();
    };
    SurveyMainListComponent.prototype.ngOnInit = function () {
        this.carryJSON = this.carryService.getCarryJSON();
        this.carryMatrixJSON = this.carryService.getCarryMatrixJSON();
        this.carryMatrixJSON = this.carryMatrixJSON.concat([
            {
                val: 12, text: 'Selected Rows', scale: 0
            },
            {
                val: 13, text: 'Unselected Rows', scale: 0
            },
            {
                val: 14, text: 'Selected Columns', scale: 0
            }
        ]);
        this.sId = this.editDataService.sId;
        var ques = this.services.form.formObj.getAllQuestions();
        if (this.editDataService.getTipsEnable() && !(ques && ques.length)) {
            this.editDataService.setTipsEnable(false);
            this.router.navigate(['/survey', 'design', this.sId, 'tips']);
            return;
        }
        else {
            this.editDataService.setTipsEnable(true);
        }
        this.surveyDesignData = this.editDataService.surveyDesignData;
        this.formObj = this.services.form.formObj;
        this.allQuestionsInFormGroup = this.services.form.allQuestionsInFormGroup;
        this.allQuestionsOfSurvey = this.services.form.allQuestionsOfSurvey;
        this.addQuestionRelatedData = this.editDataService.addQuestionRelatedData;
        this.questionTypesJSON = this.questionTypesService.questionTypesJSON;
        this.allPagesAndQues = this.services.form.getAllPagesAndQuestions();
        this.questionCountAndId = this.services.form.getQuestionCountAndId();
        this.logoDetails = this.logoService.logoDetails;
        this.logoService.setLogoOnLoad(this.sId, this.formObj);
        this.themeData = this.formObj.theme;
        this.themeDetails.pageTheme = this.themeService.getPageTheme(this.formObj);
        this.themeDetails.quesTheme = this.themeService.getQuesTheme(this.formObj);
        this.themeDetails.optionTheme = this.themeService.getOptionTheme(this.formObj);
    };
    SurveyMainListComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        var act = changes.onSuccess.currentValue.action;
        if (act == 'page-delete' || act == 'copy-question' || act == 'restore-del-ques') {
            setTimeout(function () {
                _this.reBuildData();
            }, 1);
        }
        else if (act == 'logo-replace') {
            this.replaceLogo();
        }
        else if (act == 'logo-remove') {
            this.removeLogo();
        }
    };
    SurveyMainListComponent.prototype.onEvent = function (event) {
        if (event.type == 'keyup') {
            this.onEditorKeyup(event.options);
        }
    };
    SurveyMainListComponent.prototype.onEditorKeyup = function (options) {
        options.element = options.content;
    };
    SurveyMainListComponent.prototype.logicChange = function (data) {
        this.editDataService.getSurveyData();
    };
    SurveyMainListComponent.prototype.makeAllPagesAndQuesObj = function () {
        this.services.form.setAllPagesAndQuestions();
    };
    SurveyMainListComponent.prototype.getQuesType = function (family, subtype) {
        return this.questionTypesService.getQuestionType(family, subtype);
    };
    SurveyMainListComponent.prototype.addNewQuestion = function (pageId, pageIndex, quesRefId, quesRefIndex) {
        this.surveyDesignData.presentAction = 'add-question';
        this.surveyDesignData.quesNav = 'new';
        this.surveyDesignData.displaySidebar = false;
        this.addQuestionRelatedData.surId = this.sId;
        this.addQuestionRelatedData.pageId = pageId;
        this.addQuestionRelatedData.pageIndex = pageIndex;
        this.addQuestionRelatedData.addQuesRefId = quesRefId;
        this.addQuestionRelatedData.addQuesRefIndex = quesRefIndex;
    };
    SurveyMainListComponent.prototype.reBuildData = function () {
        this.services.form.setAllPagesAndQuestions();
        this.reflectChangesToQuesTemps();
        this.themeDetails.pageTheme = this.themeService.getPageTheme(this.formObj);
        this.themeDetails.quesTheme = this.themeService.getQuesTheme(this.formObj);
        this.reBuildProgressBar();
    };
    SurveyMainListComponent.prototype.reflectChangesToQuesTemps = function () {
        this.changesToChildComp = {
            from: 'main-list'
        };
    };
    SurveyMainListComponent.prototype.addPageBreak = function (pageId, relatQuesId, page_idx) {
        var _this = this;
        this.services.resource.addPageBreak(pageId, this.sId, relatQuesId).subscribe(function (data) {
            _this.formObj.pageFields.splice(page_idx, 1, new Page(data.pageOne), new Page(data.pageTwo));
            _this.reBuildData();
        });
    };
    SurveyMainListComponent.prototype.reBuildProgressBar = function () {
        var _this = this;
        this.reBuildProgBar = false;
        setTimeout(function () {
            _this.reBuildProgBar = true;
        }, 1);
    };
    SurveyMainListComponent.prototype.editIntroPage = function () {
        this.router.navigate(['/survey', 'design', this.editDataService.sId, 'intro']);
    };
    SurveyMainListComponent.prototype.editSurveyTitle = function () {
        var data = {
            action: 'survey-page-title-desc',
            titleDescInpData: {
                id: this.sId,
                field: 'survey',
                subField: 'title'
            }
        };
        this.onChange.emit(data);
    };
    SurveyMainListComponent.prototype.editPageTitleDesc = function (pId, pIdx, subField) {
        var data = {
            action: 'survey-page-title-desc',
            titleDescInpData: {
                id: pId,
                idx: pIdx,
                field: 'page',
                subField: subField
            }
        };
        this.onChange.emit(data);
    };
    SurveyMainListComponent.prototype.editSurveyLogo = function () {
        var data = {
            action: 'survey-logo',
            logoInpData: {
                sId: this.sId
            }
        };
        this.onChange.emit(data);
    };
    SurveyMainListComponent.prototype.logoUploadChange = function () {
        if (this.surveyLogo.nativeElement.files.length > 0) {
            this.logoService.logoUploadChange(this.sId, this.surveyLogo.nativeElement.files[0], this.formObj);
        }
    };
    SurveyMainListComponent.prototype.removeLogo = function () {
        this.surveyLogo.nativeElement.value = '';
    };
    SurveyMainListComponent.prototype.replaceLogo = function () {
        this.surveyLogo.nativeElement.click();
    };
    SurveyMainListComponent.prototype.deletePage = function (pageId, page_idx) {
        var _this = this;
        var deleteOrder = 0;
        var res = {
            tittleArr: [],
            piping: {
                pipedQuestions: [],
                piperQuestions: []
            }
        };
        if (this.formObj.pageFields[page_idx].formFields.length == 0) {
            if (this.formObj.getPageFields().length == 1) {
                this.services.toastr.error('Atleast one page is required.', 'Cannot be Deleted.');
            }
            else {
                this.services.resource.deletePage(pageId, this.sId, deleteOrder, res).subscribe(function (data) {
                    _this.formObj.pageFields.splice(page_idx, 1);
                    _this.reBuildData();
                    _this.services.toastr.success('Page has been deleted successfully.', 'Deleted');
                });
            }
        }
        else {
            var data = {
                action: 'page-delete',
                delPageInpData: {
                    pageId: pageId,
                    pageIdx: page_idx,
                    surId: this.sId
                }
            };
            this.onChange.emit(data);
        }
    };
    SurveyMainListComponent.prototype.opencopyOrMoveQuestionDropDown = function (fromPId, quesId, quesIdx) {
        var data = {
            action: 'copy-question',
            copyInputData: {
                fromPId: fromPId,
                quesId: quesId,
                quesIdx: quesIdx
            }
        };
        this.onChange.emit(data);
    };
    SurveyMainListComponent.prototype.delQuestion = function (pId, qId, pIdx, qIdx) {
        var _this = this;
        var delQuesObj = {
            piping: {
                piperQuestions: [],
                pipedQuestions: []
            }
        };
        var piped = this.services.form.getPipingObject();
        var isPiped = this.services.form.getIsPipingObject();
        if (isPiped[qId]) {
            isPiped[qId].forEach(function (quesId) {
                var piperObj = {};
                piperObj['id'] = quesId;
                var newTitle = _this.allQuestionsOfSurvey[quesId].title;
                var strToBeReplaced = '{{p://' + qId + '}}';
                newTitle = newTitle.replace(new RegExp(strToBeReplaced, 'g'), '');
                piperObj['title'] = newTitle; //title to be set at the backend for the questions contained this question as pipe
                if (piped[quesId].length == 1) {
                    piperObj['hasPiping'] = 0;
                }
                else {
                    piperObj['hasPiping'] = 1;
                }
                delQuesObj.piping.piperQuestions.push(piperObj);
            });
        }
        if (piped[qId]) {
            piped[qId].forEach(function (quesId) {
                var pipedObj = {};
                pipedObj['id'] = quesId;
                if (isPiped[quesId].length == 1) {
                    pipedObj['isPiped'] = 0;
                }
                else {
                    pipedObj['isPiped'] = 1;
                }
                delQuesObj.piping.pipedQuestions.push(pipedObj);
            });
        }
        if (!isPiped[qId] && !piped[qId]) {
            delQuesObj = {};
        }
        this.services.alert({
            title: '<p class="sweetalert_title">Are you sure you want to delete this question?</p>',
            text: "",
            type: 'warning',
            showCancelButton: true,
            buttonsStyling: false,
            confirmButtonClass: 'sweetalert_apply_btn',
            cancelButtonClass: 'sweetalert_cancel_btn',
            confirmButtonText: 'Yes, delete it!'
        }).then(function (result) {
            if (result.value) {
                _this.titlesOfDelQues = {};
                _this.delNotification[qId] = {};
                _this.titlesOfDelQues[qId] = {};
                _this.titlesOfDelQues[qId] = _this.allQuestionsOfSurvey[qId].title;
                _this.services.resource.deleteQuestion(pId, qId, delQuesObj).subscribe(function (data) {
                    _this.formObj.pageFields[pIdx].formFields.splice(qIdx, 1);
                    _this.formObj.criteria = data.updatedCriteria;
                    if (delQuesObj.piping && delQuesObj.piping.piperQuestions.length > 0) {
                        if (!_this.delNotification[qId]['piping']) {
                            _this.delNotification[qId]['piping'] = [];
                        }
                        delQuesObj.piping.piperQuestions.forEach(function (ques) {
                            _this.allQuestionsOfSurvey[ques.id].title = ques.title;
                            _this.allQuestionsInFormGroup[ques.id].data.data.get('title').patchValue(ques.title);
                            _this.delNotification[qId]['piping'].push(ques.id);
                        });
                    }
                    if (data.isQuotaChanged == 1) {
                        _this.delNotification[qId]['quota'] = {
                            name: _this.formObj.quota.name
                        };
                        if (data.quota.quota.hasOwnProperty('cQuota'))
                            _this.formObj.quota.cQuota = data.quota.quota.cQuota;
                        if (data.quota.quota.hasOwnProperty('sQuota'))
                            _this.formObj.quota.sQuota = data.quota.quota.sQuota;
                        _this.formObj.quota.name = data.quota.quota.name;
                        _this.formObj.quota.type = data.quota.quota.type;
                        _this.formObj.quota.respType = data.quota.quota.respType;
                        _this.formObj.quota.isQuota = data.quota.quota.isQuota;
                    }
                    var toCarryData = [];
                    if (_this.allQuestionsOfSurvey[qId].toCarryForward) {
                        toCarryData = _this.allQuestionsOfSurvey[qId].toCarryForward;
                        if (toCarryData.length) {
                            _this.delNotification[qId]['carryfrwd'] = [];
                            toCarryData.forEach(function (cQuesId) {
                                var quesToUpdate = _this.allQuestionsOfSurvey[cQuesId];
                                if (quesToUpdate.frmCarryForward) {
                                    quesToUpdate.frmCarryForward = quesToUpdate.frmCarryForward.filter(function (item) {
                                        return (item.quesId != qId);
                                    });
                                    _this.delNotification[qId]['carryfrwd'].push(cQuesId);
                                }
                            });
                        }
                    }
                    var frmCarryData = [];
                    if (_this.allQuestionsOfSurvey[qId].frmCarryForward) {
                        frmCarryData = _this.allQuestionsOfSurvey[qId].frmCarryForward;
                        frmCarryData.forEach(function (frmCarryItem) {
                            var quesToUpdate = _this.allQuestionsOfSurvey[frmCarryItem.quesId];
                            if (quesToUpdate.toCarryForward) {
                                quesToUpdate.toCarryForward = quesToUpdate.toCarryForward.filter(function (cQId) {
                                    return (cQId != qId);
                                });
                            }
                        });
                    }
                    var criteriaFlag = false;
                    var corruptedCriteria = [];
                    _this.formObj.criteria.forEach(function (criteria) {
                        if (criteria.isCorrupt == 1) {
                            criteria.quesProp.forEach(function (ques) {
                                if (ques.quesId == qId) {
                                    corruptedCriteria.push(criteria.name);
                                    criteriaFlag = true;
                                }
                            });
                        }
                    });
                    if (criteriaFlag) {
                        _this.delNotification[qId]['criteria'] = corruptedCriteria;
                    }
                    var logicAffected = _this.pageOpService.isQuestionInvolvedInLogic(qId);
                    if (Object.keys(logicAffected).length != 0) {
                        var _loop_1 = function (qid) {
                            logicAffected[qid].forEach(function (logicName, logicIdx) {
                                // this.pageOpService.logicLeftOnAffQues(qid, logicName); //to remove logics
                                logicAffected[qid][logicIdx] = _this.editDataService.getLogicType(logicName);
                            });
                        };
                        for (var qid in logicAffected) {
                            _loop_1(qid);
                        }
                        _this.delNotification[qId]['logics'] = logicAffected;
                    }
                    if (Object.keys(_this.delNotification[qId]).length) {
                        _this.showDelNotification = true;
                    }
                    _this.reBuildData();
                    delete _this.allQuestionsOfSurvey[qId];
                    delete _this.allQuestionsInFormGroup[qId];
                    _this.services.toastr.success('Question has been deleted successfully.', 'Deleted');
                    _this.services.form.setPipingObject();
                });
            }
        });
    };
    SurveyMainListComponent.prototype.closeDelNotification = function () {
        this.showDelNotification = false;
        this.delNotification = {};
    };
    SurveyMainListComponent.prototype.hideQuestion = function (qId, hidden, pId, pIdx, qIdx) {
        var _this = this;
        var quesData = {
            isHidden: (hidden ? 0 : 1),
            _id: qId
        };
        this.services.resource.hideQuestion(qId, quesData).subscribe(function (data) {
            _this.formObj.pageFields[pIdx].formFields[qIdx].isHidden = quesData.isHidden;
            _this.allPagesAndQues.data[pId].ques[qIdx].isHidden = quesData.isHidden;
            _this.services.toastr.success('Question has been updated successfully.', 'Updated');
        });
    };
    SurveyMainListComponent.prototype.editQuestion = function (pageId, pageIndex, quesId, quesIndex) {
        this.addQuestionRelatedData.pageId = pageId;
        this.addQuestionRelatedData.pageIndex = pageIndex;
        this.addQuestionRelatedData.updateQuesIndex = quesIndex;
        this.router.navigate(['/survey', 'design', this.editDataService.sId, 'question', quesId]);
    };
    SurveyMainListComponent.prototype.editLogic = function (pId, qId, qType, logicType) {
        this.setLogicObj(pId, qId, 'logic', qType, logicType);
    };
    SurveyMainListComponent.prototype.setLogicObj = function (pId, qId, type, qType, subType) {
        var data = {
            action: type
        };
        data["pId"] = pId;
        data["qId"] = qId;
        data["qType"] = qType;
        data["editLogicType"] = subType;
        this.onChange.emit(data);
    };
    SurveyMainListComponent.prototype.actionFunction = function (qId, type, pageId, subType) {
        var data = {
            action: type
        };
        switch (type) {
            // case 'logic':
            //   data["qId"] = qId;
            //   data["qType"] = pageId;
            //   data["editLogicType"] = subType;
            //   this.onChange.emit(data);
            //   break;
            case 'recode':
                data["qId"] = qId;
                this.onChange.emit(data);
                break;
            case 'question-randomize':
                var dataRanQ = {
                    action: 'randomization',
                    ranInpData: { 'type': 'Question', 'pid': pageId }
                };
                this.onChange.emit(dataRanQ);
                break;
            case 'option-randomize':
                var dataRanO = {
                    action: 'randomization',
                    ranInpData: { 'type': 'Options', 'qid': qId }
                };
                this.onChange.emit(dataRanO);
                break;
        }
    };
    SurveyMainListComponent.prototype.removeCarryForward = function (qId) {
        var _this = this;
        this.services.alert({
            title: '<p class="sweetalert_title">Are you sure you want to delete?</p>',
            text: "",
            type: 'warning',
            showCancelButton: true,
            buttonsStyling: false,
            confirmButtonClass: 'sweetalert_apply_btn',
            cancelButtonClass: 'sweetalert_cancel_btn',
            confirmButtonText: 'Yes, delete it!'
        }).then(function (result) {
            if (result.value) {
                var carryForward_1 = _this.services.utils.cloneObject(_this.allQuestionsOfSurvey[qId].frmCarryForward);
                _this.services.resource.updateQuestionData(qId, { frmCarryForward: [] }).subscribe(function (data) {
                    _this.services.form.formObj.getQuestionById(qId).setFrmCarryForward(data.resBody.frmCarryForward);
                    /*  Removing Present Question ID from toCarryForward of carried QUestions */
                    for (var i = 0; i < carryForward_1.length; i++) {
                        var cQId = carryForward_1[i].quesId;
                        if (_this.allQuestionsOfSurvey[cQId].toCarryForward && _this.allQuestionsOfSurvey[cQId].toCarryForward.length) {
                            var idx = _this.allQuestionsOfSurvey[cQId].toCarryForward.indexOf(qId);
                            _this.allQuestionsOfSurvey[cQId].toCarryForward.splice(idx, 1);
                        }
                    }
                    /*  Removing Present Question ID from toCarryForward of carried QUestions */
                    _this.services.toastr.success('Question has been updated successfully.', 'Updated');
                });
            }
        });
    };
    SurveyMainListComponent.prototype.trackByFn = function (index, item) {
        return index;
    };
    return SurveyMainListComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], SurveyMainListComponent.prototype, "onSuccess", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], SurveyMainListComponent.prototype, "onChange", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('surveyLogo'),
    __metadata("design:type", Object)
], SurveyMainListComponent.prototype, "surveyLogo", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('carryForwardModal'),
    __metadata("design:type", Object)
], SurveyMainListComponent.prototype, "carryForwardModal", void 0);
SurveyMainListComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey-main-list',
        animations: [
            Object(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["j" /* trigger */])('myAnimation', [
                // state('enter', style({
                //   backgroundColor: '#eee',
                //   //   transform: 'scale(1)',
                //   transform: 'translateX(-100%)',
                //   opacity: 0
                // })),
                // state('leave', style({
                //   backgroundColor: '#cfd8dc',
                //   //   transform: 'scale(1.1)',
                //   transform: 'translateX(0)',
                //   'opacity': 1
                // })),
                // transition('leave => enter', animate('2000ms ease-in')),
                // transition('active => inactive', animate('2000ms ease-out'))
                Object(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["i" /* transition */])(':enter', [
                    Object(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["h" /* style */])({ opacity: 0 }),
                    Object(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["e" /* animate */])('500ms', Object(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["h" /* style */])({ 'opacity': 1 }))
                ]),
                Object(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["i" /* transition */])(':leave', [
                    Object(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["h" /* style */])({ 'opacity': 1 }),
                    // animate('500ms', style({ transform: 'translateX(-100%)', 'opacity': 0 }))
                    Object(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["e" /* animate */])('500ms', Object(__WEBPACK_IMPORTED_MODULE_2__angular_animations__["h" /* style */])({ 'opacity': 0 }))
                ])
            ])
        ],
        template: __webpack_require__("./src/app/routes/survey/edit/survey.main-list/survey.main-list.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.main-list/survey.main-list.component.scss")],
        providers: [__WEBPACK_IMPORTED_MODULE_8__survey_design_left_panel_carry_forward_carry_forward_service__["a" /* CarryForwardService */]]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__angular_router__["e" /* Router */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_router__["e" /* Router */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_4__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__edit_data_service__["a" /* EditDataService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_5__edit_constants_service__["a" /* EditConstantsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5__edit_constants_service__["a" /* EditConstantsService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_3__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_6_ngx_bootstrap_modal__["a" /* BsModalService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6_ngx_bootstrap_modal__["a" /* BsModalService */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_services_module__["a" /* SharedServices */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_8__survey_design_left_panel_carry_forward_carry_forward_service__["a" /* CarryForwardService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__survey_design_left_panel_carry_forward_carry_forward_service__["a" /* CarryForwardService */]) === "function" && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_9__logo_service__["a" /* LogoService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__logo_service__["a" /* LogoService */]) === "function" && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_10__page_operations_service__["a" /* PageOperationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10__page_operations_service__["a" /* PageOperationsService */]) === "function" && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_11__theme_service__["a" /* ThemeService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__theme_service__["a" /* ThemeService */]) === "function" && _m || Object, typeof (_o = typeof __WEBPACK_IMPORTED_MODULE_12__survey_randomization_randomization_service__["a" /* RandomizationService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_12__survey_randomization_randomization_service__["a" /* RandomizationService */]) === "function" && _o || Object])
], SurveyMainListComponent);

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
//# sourceMappingURL=survey.main-list.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.main-list/theme.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ThemeService; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var ThemeService = (function () {
    function ThemeService(services) {
        this.services = services;
    }
    ThemeService.prototype.getPageTheme = function (formObj) {
        try {
            var pageTheme_1 = {};
            var themeData_1 = formObj.theme;
            var pageArray = formObj.getPageFields();
            if (pageArray) {
                pageArray.forEach(function (pageObj) {
                    var pId = pageObj._id;
                    pageTheme_1[pId] = pageObj.getCssObj(themeData_1);
                });
            }
            return pageTheme_1;
        }
        catch (err) {
            throw err;
        }
    };
    ThemeService.prototype.getQuesTheme = function (formObj) {
        try {
            var quesTheme_1 = {};
            var themeData_2 = formObj.theme;
            var quesArray = formObj.getAllQuestions();
            if (quesArray) {
                quesArray.forEach(function (quesObj) {
                    var qId = quesObj._id;
                    quesTheme_1[qId] = quesObj.getCssObj(themeData_2);
                });
            }
            return quesTheme_1;
        }
        catch (err) {
            throw err;
        }
    };
    ThemeService.prototype.getOptionTheme = function (formObj) {
        var _this = this;
        try {
            var optionTheme_1 = {};
            var themeData_3 = formObj.theme;
            var quesArray = formObj.getAllQuestions();
            var optTheme_1 = themeData_3.getOptSettingCss();
            if (quesArray) {
                quesArray.forEach(function (quesObj) {
                    var qId = quesObj._id;
                    optionTheme_1[qId] = _this.services.utils.cloneObject(optTheme_1);
                    var pageSetId = formObj.getPageByQuestionId(qId)['themeSetId'];
                    var color = quesObj.getOptionColor(themeData_3, pageSetId);
                    optionTheme_1[qId]['color'] = color;
                });
            }
            return optionTheme_1;
        }
        catch (err) {
            throw err;
        }
    };
    return ThemeService;
}());
ThemeService = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _a || Object])
], ThemeService);

var _a;
//# sourceMappingURL=theme.service.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.page.delete/survey.page.delete.component.css":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.page.delete/survey.page.delete.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"logic-panel\">\n  <div class=\"logic-header\"><h4 class=\"logicSideTitle\">Delete Page</h4></div>\n  <div class=\"logicBodyContainer\">\n    <div>\n      <label><input type=\"radio\" name=\"delPage\" [value]=\"0\" [(ngModel)]=\"delPage.delOrder\"><span>Delete questions too</span></label>\n    </div>\n    <div [hidden]=\"(delPage.pageIdx == 0)\">\n      <label><input type=\"radio\" name=\"delPage\" [value]=\"1\" [(ngModel)]=\"delPage.delOrder\"><span>Move questions up</span></label>\n    </div>\n    <div [hidden]=\"(delPage.pageIdx == formObj.pageFields.length - 1)\">\n      <label><input type=\"radio\" name=\"delPage\" [value]=\"2\" [(ngModel)]=\"delPage.delOrder\"><span>Move questions down</span></label>\n    </div>\n  </div>\n  <div class=\"logic-footer\">\n    <button type=\"button\" class=\"btn save_logic\" (click)=\"confirmDelPage()\">Submit</button>\n    <button type=\"button\" class=\"btn cancel_save_logic\" (click)=\"cancelDelPage()\">Cancel</button>\n  </div>\n</div>\n\n<app-ques-del-notification\n  *ngIf=\"showDelNotification\"\n  [delNotification]=\"delNotification\"\n  [titlesOfDelQues]=\"titlesOfthisPageQues\"\n  (onClose)=\"onCloseDelNot()\">\n</app-ques-del-notification>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.page.delete/survey.page.delete.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPageDeleteComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__survey_main_list_page_operations_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.main-list/page.operations.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var SurveyPageDeleteComponent = (function () {
    function SurveyPageDeleteComponent(services, pageOpService, editService) {
        this.services = services;
        this.pageOpService = pageOpService;
        this.editService = editService;
        this.onCancel = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.onSuccess = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.delPage = {
            delOrder: 0,
            pageId: '',
            pageIdx: '',
            data: {}
        };
        this.titlesOfthisPageQues = {};
        this.showDelNotification = false;
        this.delNotification = {};
    }
    SurveyPageDeleteComponent.prototype.ngOnInit = function () {
        this.delPage.pageIdx = this.delPageInpData.pageIdx;
        this.delPage.pageId = this.delPageInpData.pageId;
        this.formObj = this.services.form.formObj;
        this.allQuestionsOfSurvey = this.services.form.allQuestionsOfSurvey;
        this.questionCountAndId = this.services.form.getQuestionCountAndId();
        this.thisPageQuesIdArr = this.formObj.getAllQuesIdByPageId(this.delPage.pageId);
    };
    SurveyPageDeleteComponent.prototype.confirmDelPage = function () {
        var _this = this;
        var pageData = this.delPage;
        var allPageIdArr = this.services.form.getAllPageIdsArr();
        if (pageData.delOrder == 1) {
            var prevPageId = allPageIdArr[this.delPage.pageIdx - 1];
            var prevPageQuesIdArray_1 = this.formObj.getAllQuesIdByPageId(prevPageId);
            this.thisPageQuesIdArr.forEach(function (qId) {
                var frmCarryOfEach = _this.allQuestionsOfSurvey[qId].frmCarryForward;
                frmCarryOfEach.forEach(function (fQItem) {
                    if (prevPageQuesIdArray_1.indexOf(fQItem.quesId) >= 0) {
                        _this.services.alert({
                            title: "Alert",
                            text: "Questions cannot be moved up as there are some questions which contains carry forwarded choices",
                            showConfirmButton: true
                        });
                        return;
                    }
                });
            });
        }
        else if (pageData.delOrder == 2) {
            var nextPageId = allPageIdArr[this.delPage.pageIdx + 1];
            var nextPageQuesIdArray_1 = this.formObj.getAllQuesIdByPageId(nextPageId);
            this.thisPageQuesIdArr.forEach(function (qId) {
                var toCarryOfEach = _this.allQuestionsOfSurvey[qId].toCarryForward;
                toCarryOfEach.forEach(function (tQId) {
                    if (nextPageQuesIdArray_1.indexOf(tQId) >= 0) {
                        _this.services.alert({
                            title: "Alert",
                            text: "Questions cannot be moved down as there are some questions whose options are being carry forwarded",
                            showConfirmButton: true
                        });
                        return;
                    }
                });
            });
        }
        this.deleteSelectedPage(allPageIdArr);
    };
    SurveyPageDeleteComponent.prototype.deleteSelectedPage = function (allPageIdArr) {
        var _this = this;
        var piped = this.services.form.getPipingObject();
        var isPiped = this.services.form.getIsPipingObject();
        if (this.delPage.delOrder == 1) {
            this.thisPageQuesIdArr.forEach(function (quesId) {
                var numOfPagesBeforeNewCurrentPos = (_this.delPage.pageIdx - 1); //num of pages before prevpage
                if (piped[quesId]) {
                    piped[quesId].forEach(function (pipeQId) {
                        var pageOfPipeQues = _this.formObj.getPageByQuestionId(pipeQId);
                        var numberOfPagesBeforePipeQId = allPageIdArr.indexOf(pageOfPipeQues._id);
                        if (numOfPagesBeforeNewCurrentPos <= numberOfPagesBeforePipeQId) {
                            _this.services.alert({
                                title: "Alert",
                                text: "Piped question can not be on the same or later page",
                                showConfirmButton: true
                            });
                        }
                    });
                }
            });
        }
        else if (this.delPage.delOrder == 2) {
            this.thisPageQuesIdArr.forEach(function (quesId) {
                var numOfPagesBeforeNewCurrentPos = (_this.delPage.pageIdx + 1); //num of pages before next page
                if (isPiped[quesId]) {
                    isPiped[quesId].forEach(function (isPipeQId) {
                        var pageOfIsPipeQues = _this.formObj.getPageByQuestionId(isPipeQId);
                        var numberOfPagesBeforeIsPipeQId = allPageIdArr.indexOf(pageOfIsPipeQues._id);
                        if (numOfPagesBeforeNewCurrentPos >= numberOfPagesBeforeIsPipeQId) {
                            _this.services.alert({
                                title: "Alert",
                                text: "Piped question can not be on the same or later page",
                                showConfirmButton: true
                            });
                        }
                    });
                }
            });
        }
        else if (this.delPage.delOrder == 0) {
            var deletePageAjax_1 = {
                titleArr: [],
                piping: {
                    piperQuestions: [],
                    pipedQuestions: []
                }
            };
            this.thisPageQuesIdArr.forEach(function (quesIdOnCurrPage) {
                if (isPiped[quesIdOnCurrPage]) {
                    if (!_this.delNotification[quesIdOnCurrPage]) {
                        _this.delNotification[quesIdOnCurrPage] = {
                            'piping': []
                        };
                    }
                    else {
                        _this.delNotification[quesIdOnCurrPage]['piping'] = [];
                    }
                    isPiped[quesIdOnCurrPage].forEach(function (isPipeQId) {
                        var titleObj = {};
                        var strToBeReplaced = '{{p://' + quesIdOnCurrPage + '}}';
                        titleObj['id'] = isPipeQId;
                        titleObj['title'] = _this.allQuestionsOfSurvey[isPipeQId].title.replace(new RegExp(strToBeReplaced, 'g'), '');
                        deletePageAjax_1.titleArr.push(titleObj);
                        _this.delNotification[quesIdOnCurrPage]['piping'].push(isPipeQId);
                    });
                }
            });
            this.thisPageQuesIdArr.forEach(function (quesIdOnCurrPage) {
                if (piped[quesIdOnCurrPage]) {
                    piped[quesIdOnCurrPage].forEach(function (pipeQId) {
                        var validPipeElseWhere = 0;
                        isPiped[pipeQId].forEach(function (quesId) {
                            var pageIdOfPipeQues = _this.formObj.getPageByQuestionId(quesId)._id;
                            if (pageIdOfPipeQues != _this.delPage.pageId) {
                                validPipeElseWhere = 1;
                            }
                        });
                        if (validPipeElseWhere == 0) {
                            var ifPresentIdx = _this.services.utils.findIndex(deletePageAjax_1.piping.pipedQuestions, 'id', pipeQId);
                            if (ifPresentIdx == -1) {
                                var pipedObj = {};
                                pipedObj['id'] = pipeQId;
                                pipedObj['isPiped'] = 0;
                                deletePageAjax_1.piping.pipedQuestions.push(pipedObj);
                            }
                        }
                    });
                }
            });
            this.delPage.data = deletePageAjax_1;
        }
        this.makeCallTodeletePage();
    };
    SurveyPageDeleteComponent.prototype.makeCallTodeletePage = function () {
        var _this = this;
        var pageData = this.delPage;
        if (pageData.delOrder == 0) {
            if (this.formObj.getPageFields().length == 1) {
                this.services.toastr.warning('There must be atleast one page.', 'Cannot be Deleted.');
                this.cancelDelPage();
                this.onSuccess.emit('page-delete');
            }
            else {
                this.services.resource.deletePage(pageData.pageId, this.delPageInpData.surId, pageData.delOrder, pageData.data).subscribe(function (data) {
                    _this.getTitlesOfthisPageQues();
                    _this.questionAffectedByDeletingPage();
                    _this.carryForwardAffectedQues();
                    _this.checkForQuota();
                    _this.checkForCorruptedCriteria();
                    _this.formObj.pageFields.splice(pageData.pageIdx, 1);
                    if (Object.keys(_this.delNotification).length) {
                        _this.showDelNotification = true;
                    }
                    else {
                        _this.cancelDelPage();
                    }
                    _this.services.toastr.success('Page has been deleted successfully', 'Success');
                    _this.onSuccess.emit('page-delete');
                });
            }
        }
        else {
            this.services.resource.deletePage(pageData.pageId, this.delPageInpData.surId, pageData.delOrder, {}).subscribe(function (data) {
                if (pageData.delOrder == 1) {
                    _this.formObj.pageFields.splice(pageData.pageIdx - 1, 2, new Page(data.page));
                }
                else if (pageData.delOrder == 2) {
                    _this.formObj.pageFields.splice(pageData.pageIdx, 2, new Page(data.page));
                }
                _this.services.toastr.success('Page has been deleted successfully', 'Success');
                _this.onSuccess.emit('page-delete');
                _this.cancelDelPage();
            });
        }
    };
    SurveyPageDeleteComponent.prototype.getTitlesOfthisPageQues = function () {
        var _this = this;
        this.thisPageQuesIdArr.forEach(function (qId) {
            _this.titlesOfthisPageQues[qId] = _this.allQuestionsOfSurvey[qId].getTitle();
        });
    };
    SurveyPageDeleteComponent.prototype.questionAffectedByDeletingPage = function () {
        var _this = this;
        var logicAffected;
        this.thisPageQuesIdArr.forEach(function (quesIdOnCurrPage) {
            var quesTitle = _this.services.utils.getTextOutOfHtml(_this.allQuestionsOfSurvey[quesIdOnCurrPage].title);
            logicAffected = _this.pageOpService.isQuestionInvolvedInLogic(quesIdOnCurrPage);
            if (Object.keys(logicAffected).length != 0) {
                if (!_this.delNotification[quesIdOnCurrPage]) {
                    _this.delNotification[quesIdOnCurrPage] = {
                        'logics': []
                    };
                }
                else {
                    _this.delNotification[quesIdOnCurrPage]['logics'] = [];
                }
                var _loop_1 = function (qid) {
                    logicAffected[qid].forEach(function (logicName, logicIdx) {
                        // this.pageOpService.logicLeftOnAffQues(qid, logicName); //to remove logic
                        logicAffected[qid][logicIdx] = _this.editService.getLogicType(logicName);
                        _this.delNotification[quesIdOnCurrPage]['logics'] = logicAffected;
                    });
                };
                for (var qid in logicAffected) {
                    _loop_1(qid);
                }
            }
        });
    };
    SurveyPageDeleteComponent.prototype.carryForwardAffectedQues = function () {
        var _this = this;
        this.thisPageQuesIdArr.forEach(function (quesIdOnCurrPage) {
            var toCarryData = [];
            if (_this.allQuestionsOfSurvey[quesIdOnCurrPage].toCarryForward && _this.allQuestionsOfSurvey[quesIdOnCurrPage].toCarryForward.length) {
                if (!_this.delNotification[quesIdOnCurrPage]) {
                    _this.delNotification[quesIdOnCurrPage] = {
                        'carryfrwd': []
                    };
                }
                else {
                    _this.delNotification[quesIdOnCurrPage]['carryfrwd'] = [];
                }
                toCarryData = _this.allQuestionsOfSurvey[quesIdOnCurrPage].toCarryForward;
                if (toCarryData.length) {
                    toCarryData.forEach(function (cQuesId) {
                        var quesToUpdate = _this.allQuestionsOfSurvey[cQuesId];
                        if (quesToUpdate.frmCarryForward) {
                            quesToUpdate.frmCarryForward = quesToUpdate.frmCarryForward.filter(function (item) {
                                return (item.quesId != quesIdOnCurrPage);
                            });
                            _this.delNotification[quesIdOnCurrPage]['carryfrwd'].push(cQuesId);
                        }
                    });
                }
            }
            var frmCarryData = [];
            if (_this.allQuestionsOfSurvey[quesIdOnCurrPage].frmCarryForward) {
                frmCarryData = _this.allQuestionsOfSurvey[quesIdOnCurrPage].frmCarryForward;
                frmCarryData.forEach(function (frmCarryItem) {
                    var quesToUpdate = _this.allQuestionsOfSurvey[frmCarryItem.quesId];
                    if (quesToUpdate.toCarryForward) {
                        quesToUpdate.toCarryForward = quesToUpdate.toCarryForward.filter(function (cQId) {
                            return (cQId != quesIdOnCurrPage);
                        });
                    }
                });
            }
        });
    };
    SurveyPageDeleteComponent.prototype.checkForQuota = function () {
        var _this = this;
        if (this.formObj.quota && this.formObj.quota.sQuota) {
            if (this.thisPageQuesIdArr.indexOf(this.formObj.quota.sQuota.quesId) > -1) {
                if (!this.delNotification[this.formObj.quota.sQuota.quesId]) {
                    this.delNotification[this.formObj.quota.sQuota.quesId] = {};
                }
                this.delNotification[this.formObj.quota.sQuota.quesId]['quota'] = {
                    'name': this.formObj.quota.name
                };
            }
        }
        if (this.formObj.quota && this.formObj.quota.cQuota && this.formObj.quota.cQuota.quesInQuota) {
            this.thisPageQuesIdArr.forEach(function (qId) {
                if (_this.services.utils.findIndex(_this.formObj.quota.cQuota.quesInQuota, 'quesId', qId) > -1) {
                    if (!_this.delNotification[qId]) {
                        _this.delNotification[qId] = {};
                    }
                    _this.delNotification[qId]['quota'] = {
                        'name': _this.formObj.quota.name
                    };
                }
            });
        }
    };
    SurveyPageDeleteComponent.prototype.checkForCorruptedCriteria = function () {
        var _this = this;
        this.thisPageQuesIdArr.forEach(function (qId) {
            _this.formObj.criteria.forEach(function (criteria, cIdx) {
                var idx = _this.services.utils.findIndex(criteria.quesProp, 'quesId', qId);
                if (idx > -1) {
                    !_this.delNotification[qId] && (_this.delNotification[qId] = {});
                    !_this.delNotification[qId]['criteria'] && (_this.delNotification[qId]['criteria'] = []);
                    _this.delNotification[qId]['criteria'].push(criteria.name);
                    _this.formObj.criteria[cIdx]['isCorrupt'] = 1;
                }
            });
        });
    };
    SurveyPageDeleteComponent.prototype.cancelDelPage = function () {
        this.delPage.delOrder = 0;
        this.delPage.pageId = '';
        this.delPage.pageIdx = '';
        this.onCancel.emit();
    };
    SurveyPageDeleteComponent.prototype.onCloseDelNot = function () {
        this.showDelNotification = false;
        this.cancelDelPage();
    };
    return SurveyPageDeleteComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], SurveyPageDeleteComponent.prototype, "delPageInpData", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SurveyPageDeleteComponent.prototype, "onCancel", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], SurveyPageDeleteComponent.prototype, "onSuccess", void 0);
SurveyPageDeleteComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey-page-delete',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.page.delete/survey.page.delete.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.page.delete/survey.page.delete.component.css"), __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__survey_main_list_page_operations_service__["a" /* PageOperationsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__survey_main_list_page_operations_service__["a" /* PageOperationsService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__edit_data_service__["a" /* EditDataService */]) === "function" && _c || Object])
], SurveyPageDeleteComponent);

var _a, _b, _c;
//# sourceMappingURL=survey.page.delete.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/question.piping/question.piping.component.css":
/***/ (function(module, exports) {

module.exports = ".piping_upper_div{\n\tmargin-bottom: 20px;\n}\n\n.piping_lower_div{\n\tmargin-bottom: 40px;\n}\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/question.piping/question.piping.component.html":
/***/ (function(module, exports) {

module.exports = "<div>\n  <div>\n    <div class=\"piping_upper_div\">\n      <span class=\"custom_select_div\">\n        <select class=\"custom_select\" [(ngModel)]=\"pipingJSON.field\" (change)=\"setPipingValue()\">\n          <option value=''>Select an option</option>\n          <option *ngFor=\"let item of pipingDataJSON\" [value]=\"item.value\">{{item.text}}</option>\n        </select>\n      </span>\n    </div>\n    <div class=\"piping_lower_div\">\n      <span [hidden]=\"!(pipingJSON.field == 'p')\">\n        <span class=\"custom_select_div\">\n          <select class=\"custom_select\" [(ngModel)]=\"pipingJSON.value\">\n            <option value=''>Select a Question</option>\n            <option *ngFor=\"let ques of pipingJSON.qArrBeforeCurrPage | quesInPiping\" [value]=\"(ques.count + ':' + ques._id)\"\n              [innerHTML]=\"((ques.count != '' ? ques.count + '. ' : '') + (ques.title  | swapMongoIdAndQuesNum : true : ques._id))\"></option>\n          </select>\n        </span>\n      </span>\n      <span [hidden]=\"!(pipingJSON.field == 'e')\">\n        <input type=\"text\" class=\"custom_textbox\" placeholder=\"Enter name of field\" [(ngModel)]=\"pipingJSON.value\">\n      </span>\n      <span [hidden]=\"!(pipingJSON.field == 'c')\">\n        <span class=\"custom_select_div\">\n          <select class=\"custom_select\" [(ngModel)]=\"pipingJSON.value\">\n            <option value=''>Select a Field</option>\n            <option *ngFor=\"let contact of contactsPipingJSON\" [value]=\"contact.value\">{{contact.text}}</option>\n          </select>\n        </span>\n      </span>\n    </div>\n  </div>\n  <div class=\"modal_btns\">\n    <button type=\"button\" class=\"btn modal_cancel_btn\" (click)=\"closeModal()\">Cancel</button>\n    <button type=\"button\" class=\"btn modal_add_btn\" (click)=\"insertPiping()\">Insert</button>\n  </div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/question.piping/question.piping.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QuestionPipingComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__question_piping_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/question.piping/question.piping.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var QuestionPipingComponent = (function () {
    function QuestionPipingComponent(pipingService, services) {
        this.pipingService = pipingService;
        this.services = services;
        this.onPipingDone = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.cancelPiping = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
    }
    QuestionPipingComponent.prototype.ngOnInit = function () {
        this.pipingJSON = this.pipingService.pipingJSON;
        if (this.pipingJSON.from == 'ques') {
            this.pipingDataJSON = this.services.constants.typeOfPipingDataQues;
        }
        else if (this.pipingJSON.from == 'opt') {
            this.pipingDataJSON = this.services.constants.typeOfPipingDataOpt;
        }
        this.contactsPipingJSON = this.services.constants.contactFields;
    };
    QuestionPipingComponent.prototype.insertPiping = function () {
        if (this.pipingJSON.field == '' || this.pipingJSON.value.trim() == '') {
            this.services.toastr.error('Please fill all the fields', 'Empty Fields');
            return false;
        }
        if (this.pipingJSON.field == 'p') {
            var quesDetails = this.pipingJSON.value.split(':');
            this.pipingJSON.showRes = this.services.eData.getEdataString(this.pipingJSON.field, ('Q' + quesDetails[0]));
            this.pipingJSON.result = this.services.eData.getEdataString(this.pipingJSON.field, quesDetails[1]);
            if (this.pipingJSON.pipedQuesArr.indexOf(quesDetails[1]) == -1) {
                this.pipingJSON.pipedQuesArr.push(quesDetails[1]);
            }
            this.pipingJSON.pipedQuesObj[this.pipingJSON.showRes] = this.pipingJSON.result;
        }
        else {
            this.pipingJSON.showRes = this.services.eData.getEdataString(this.pipingJSON.field, this.pipingJSON.value);
        }
        this.pipingJSON.showRes = "<span>" + this.pipingJSON.showRes + "</span>";
        this.onPipingDone.emit();
    };
    QuestionPipingComponent.prototype.setPipingValue = function () {
        this.pipingJSON.value = '';
    };
    QuestionPipingComponent.prototype.closeModal = function () {
        this.cancelPiping.emit();
    };
    return QuestionPipingComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], QuestionPipingComponent.prototype, "onPipingDone", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", Object)
], QuestionPipingComponent.prototype, "cancelPiping", void 0);
QuestionPipingComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-question-piping',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/question.piping/question.piping.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/question.piping/question.piping.component.css")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__question_piping_service__["a" /* QuestionPipingService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__question_piping_service__["a" /* QuestionPipingService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object])
], QuestionPipingComponent);

var _a, _b;
//# sourceMappingURL=question.piping.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/question.piping/question.piping.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QuestionPipingService; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var QuestionPipingService = (function () {
    function QuestionPipingService(editDataService, services) {
        this.editDataService = editDataService;
        this.services = services;
        this.pipingJSON = {
            currPageId: '',
            qArrBeforeCurrPage: '',
            field: '',
            value: '',
            showRes: '',
            result: '',
            pipedQuesObj: {},
            pipedQuesArr: [],
            from: '' //<'ques','opt'> from will decide if tinymce is there or not
        };
    }
    QuestionPipingService.prototype.initializePipingObj = function () {
        this.pipingJSON.currPageId = this.editDataService.addQuestionRelatedData.pageId;
        this.pipingJSON.qArrBeforeCurrPage = this.services.form.getQuestionsBeforeCurrPage(this.pipingJSON.currPageId);
        this.pipingJSON.field = '';
        this.pipingJSON.value = '';
    };
    QuestionPipingService.prototype.setFromPiping = function (fromStr) {
        this.pipingJSON.from = fromStr;
    };
    QuestionPipingService.prototype.getResult = function () {
        return this.pipingJSON.showRes;
    };
    return QuestionPipingService;
}());
QuestionPipingService = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__edit_data_service__["a" /* EditDataService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object])
], QuestionPipingService);

var _a, _b;
//# sourceMappingURL=question.piping.service.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/question.validation/question.validation.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"modal-body\">\n  <tabset type=\"pills\" class=\"modal_inner_body\">\n    <tab heading=\"Input Type\" *ngIf = \"inputTextPresent\" (select)=\"toggleTabs('iT')\">\n      <div class=\"additional_text_val_div\">\n        <div class=\"row bottom_marg_12\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4 right_align\">\n            <label class=\"add_ques_label\">Validation</label>\n          </div>\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n            <span class=\"\">\n              <span class=\"add_text_radio\">\n                <label [ngClass]=\"(inputText.type=='number')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"showAdvanceNumOptions()\">\n                  <input type=\"radio\" name=\"type\" value=\"number\">Number</label>\n                <label [ngClass]=\"(inputText.type=='text')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"showAdvanceTextOptions()\">\n                  <input type=\"radio\" name=\"type\" value=\"text\">Text</label>\n                <label [ngClass]=\"(inputText.type=='date')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"showAdvanceDateOptions()\">\n                  <input type=\"radio\" name=\"type\" value=\"date\">Date</label>\n              </span>\n            </span>\n          </div>\n          <label class=\"pull-right\">\n            <img src=\"/assets/images/editSurvey/delete.svg\" class=\"transpose_img\" alt=\"Remove Validation\" (click)=\"removeValidation()\">\n          </label>\n        </div>\n        <div [ngClass]=\"(inputText.type=='text')?'row bottom_marg_12':'hidden'\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4 right_align\">\n            <label class=\"add_ques_label\">Text Validation</label>\n          </div>\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n            <span class=\"\">\n              <span class=\"add_text_radio\">\n                <label [ngClass]=\"(inputText.type =='text' && inputText.subType == 'normalText')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('nT');\" >\n                  <input type=\"radio\" name=\"type\" value=\"number\">Normal Text</label>\n                <label [ngClass]=\"(inputText.type =='text' && inputText.subType == 'email')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('eM')\">\n                  <input type=\"radio\" name=\"type\" value=\"text\">Email</label>\n              </span>\n            </span>\n            <a class=\"additional_text_vald\" name=\"advanceText\" style=\"cursor:pointer; margin-right: -140px;\" (click) = \"openAdvanceText()\">Advance</a>\n          </div>\n        </div>\n        <div [ngClass]=\"(inputText.ifDisplay.advanceTextOpen)?'center_align':'hidden'\">\n          <div class=\"addtn_txt_ib\">\n            <label class=\"add_ques_label\">Maximum Length</label>\n            <input type=\"number\" placeholder=\"Enter Maximum Value\" class=\"ques_ans_settings_input\" [(ngModel)]=\"inputText.maxTextLength\" >\n          </div>\n          <div class=\"addtn_txt_ib\">\n            <label class=\"add_ques_label\">Minimum Length</label>\n            <input type=\"number\" placeholder=\"Enter Minimum Value\" class=\"ques_ans_settings_input\" [(ngModel)]=\"inputText.minTextLength\">\n          </div>\n        </div>\n        <div [ngClass]=\"(inputText.type=='number')?'row bottom_marg_12':'hidden'\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4 right_align\">\n            <label class=\"add_ques_label\">Number Validation</label>\n          </div>\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n            <span class=\"\">\n              <span class=\"add_text_radio\">\n                <label [ngClass]=\"(inputText.type == 'number' && inputText.subType == 'decimalNumber')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('dN')\">\n                  <input type=\"radio\" name=\"type\" value=\"number\">Decimal No.</label>\n                <label [ngClass]=\"(inputText.type == 'number' && inputText.subType == 'wholeNumber')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('wN')\">\n                  <input type=\"radio\" name=\"type\" value=\"text\">Whole No.</label>\n                <label [ngClass]=\"(inputText.type == 'number' && inputText.subType == 'naturalNumber')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('nN')\">\n                  <input type=\"radio\" name=\"type\" value=\"text\">Natural No.</label>\n                <label [ngClass]=\"(inputText.type == 'number' && inputText.subType == 'Integer')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('iN')\">\n                  <input type=\"radio\" name=\"type\" value=\"text\">Integer</label>\n              </span>\n            </span>\n            <a class=\"additional_text_vald\" name=\"advanceNum\" style=\"cursor:pointer; margin-right: -140px;\" (click) = \"openAdvanceNumber()\">Advance</a>\n          </div>\n        </div>\n        <div [ngClass]=\"(inputText.ifDisplay.advanceNumOpen)?'center_align':'hidden'\">\n          <div class=\"addtn_txt_ib\">\n            <label class=\"add_ques_label\">Maximum</label>\n            <input type=\"number\" placeholder=\"Enter Maximum Value\" class=\"ques_ans_settings_input\" [(ngModel)]=\"inputText.maxValue\" >\n          </div>\n          <div class=\"addtn_txt_ib\">\n            <label class=\"add_ques_label\">Minimum</label>\n            <input type=\"number\" placeholder=\"Enter Minimum Value\" class=\"ques_ans_settings_input\" [(ngModel)]=\"inputText.minValue\">\n          </div>\n        </div>\n        <div [ngClass]=\"(inputText.type=='date')?'row bottom_marg_12':'hidden'\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4 right_align\">\n            <label class=\"add_ques_label\">Date Validation</label>\n          </div>\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n            <span class=\"\">\n              <span class=\"add_text_radio\">\n                <label [ngClass]=\"(inputText.type == 'date' && inputText.subType == 'withTime')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('iT')\">\n                  <input type=\"radio\" name=\"type\" value=\"number\">Include Time</label>\n                <label [ngClass]=\"(inputText.type == 'date' && inputText.subType == 'withoutTime')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('eT')\">\n                  <input type=\"radio\" name=\"type\" value=\"text\">Exclude Time</label>\n              </span>\n            </span>\n          </div>\n        </div>\n        <span class=\"apply_all_checkbox_grp\">\n          <label class=\"add_ques_label\">\n            <input type=\"checkbox\" [ngStyle]=\"{'vertical-align': 'text-bottom'}\" [checked]=\"inputText.ifDisplay.applyValdEverywhere\" (change)=\"applyValidationOnAllInputTexts()\">\n            <span class=\"custom_checkbox_txt\">Apply these changes to all other input fields</span>\n          </label>\n        </span>\n      </div>\n    </tab>\n    <tab heading=\"Additional Text\" *ngIf=\"additionalTextPresent\" (select)=\"toggleTabs('aT')\">\n      <div class=\"additional_text_val_div\">\n        <div class=\"row bottom_marg_12\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4 right_align\">\n            <label class=\"add_ques_label\">Text Label</label>\n          </div>\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n            <input type=\"text\" placeholder=\"Enter text label\" class=\"ques_ans_settings_input\" [(ngModel)]=\"addtnText.textLabel\">\n          </div>\n          <label class=\"pull-right\">\n            <img src=\"/assets/images/editSurvey/delete.svg\" class=\"transpose_img\" alt=\"Remove Validation\" (click)=\"removeValidation()\">\n          </label>\n        </div>\n        <div class=\"row bottom_marg_12\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4 right_align\">\n            <label class=\"add_ques_label\">Validation</label>\n          </div>\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n            <span class=\"\">\n              <span class=\"add_text_radio\">\n                <label [ngClass]=\"(addtnText.type=='number')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"showAdvanceNumOptions()\">\n                  <input type=\"radio\" name=\"type\" value=\"number\" >Number</label>\n                <label [ngClass]=\"(addtnText.type=='text')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"showAdvanceTextOptions()\">\n                  <input type=\"radio\" name=\"type\" value=\"text\">Text</label>\n                <label [ngClass]=\"(addtnText.type=='date')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"showAdvanceDateOptions()\">\n                  <input type=\"radio\" name=\"type\" value=\"date\">Date</label>\n              </span>\n            </span>\n          </div>\n        </div>\n        <div [ngClass]=\"(addtnText.type=='text')?'row bottom_marg_12':'hidden'\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4 right_align\">\n            <label class=\"add_ques_label\">Text Validation</label>\n          </div>\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n            <span class=\"\">\n              <span class=\"add_text_radio\">\n                <label [ngClass]=\"(addtnText.type =='text' && addtnText.subType == 'normalText')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('nT');\" >\n                  <input type=\"radio\" name=\"type\" value=\"number\">Normal Text</label>\n                <label [ngClass]=\"(addtnText.type =='text' && addtnText.subType == 'email')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('eM')\">\n                  <input type=\"radio\" name=\"type\" value=\"text\">Email</label>\n              </span>\n            </span>\n            <a class=\"additional_text_vald\" name=\"advanceText\" style=\"cursor:pointer; margin-right: -140px;\" (click) = \"openAdvanceText()\">Advance</a>\n          </div>\n        </div>\n        <div [ngClass]=\"(addtnText.ifDisplay.advanceTextOpen)?'center_align':'hidden'\">\n          <div class=\"addtn_txt_ib\">\n            <label class=\"add_ques_label\">Maximum Length</label>\n            <input type=\"number\" placeholder=\"Enter Maximum Value\" class=\"ques_ans_settings_input\" [(ngModel)]=\"addtnText.maxTextLength\" >\n          </div>\n          <div class=\"addtn_txt_ib\">\n            <label class=\"add_ques_label\">Minimum Length</label>\n            <input type=\"number\" placeholder=\"Enter Minimum Value\" class=\"ques_ans_settings_input\" [(ngModel)]=\"addtnText.minTextLength\">\n          </div>\n        </div>\n        <div [ngClass]=\"(addtnText.type=='number')?'row bottom_marg_12':'hidden'\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4 right_align\">\n            <label class=\"add_ques_label\">Number Validation</label>\n          </div>\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n            <span class=\"\">\n              <span class=\"add_text_radio\">\n                <label [ngClass]=\"(addtnText.type == 'number' && addtnText.subType == 'decimalNumber')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('dN')\">\n                  <input type=\"radio\" name=\"type\" value=\"number\">Decimal No.</label>\n                <label [ngClass]=\"(addtnText.type == 'number' && addtnText.subType == 'wholeNumber')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('wN')\">\n                  <input type=\"radio\" name=\"type\" value=\"text\">Whole No.</label>\n                <label [ngClass]=\"(addtnText.type == 'number' && addtnText.subType == 'naturalNumber')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('nN')\">\n                  <input type=\"radio\" name=\"type\" value=\"text\">Natural No.</label>\n                <label [ngClass]=\"(addtnText.type == 'number' && addtnText.subType == 'Integer')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('iN')\">\n                  <input type=\"radio\" name=\"type\" value=\"text\">Integer</label>\n              </span>\n            </span>\n            <a class=\"additional_text_vald\" name=\"advanceNum\" style=\"cursor:pointer; margin-right: -140px;\" (click) = \"openAdvanceNumber()\">Advance</a>\n          </div>\n        </div>\n        <div [ngClass]=\"(addtnText.ifDisplay.advanceNumOpen)?'center_align':'hidden'\">\n          <div class=\"addtn_txt_ib\">\n            <label class=\"add_ques_label\">Maximum</label>\n            <input type=\"number\" placeholder=\"Enter Maximum Value\" class=\"ques_ans_settings_input\" [(ngModel)]=\"addtnText.maxValue\" >\n          </div>\n          <div class=\"addtn_txt_ib\">\n            <label class=\"add_ques_label\">Minimum</label>\n            <input type=\"number\" placeholder=\"Enter Minimum Value\" class=\"ques_ans_settings_input\" [(ngModel)]=\"addtnText.minValue\">\n          </div>\n        </div>\n        <div [ngClass]=\"(addtnText.type=='date')?'row bottom_marg_12':'hidden'\">\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4 right_align\">\n            <label class=\"add_ques_label\">Date Validation</label>\n          </div>\n          <div class=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\n            <span class=\"\">\n              <span class=\"add_text_radio\">\n                <label [ngClass]=\"(addtnText.type == 'date' && addtnText.subType == 'withTime')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('iT')\">\n                  <input type=\"radio\" name=\"type\" value=\"number\">Include Time</label>\n                <label [ngClass]=\"(addtnText.type == 'date' && addtnText.subType == 'withoutTime')? 'inner_add_text_radio active':'inner_add_text_radio'\" (click)=\"validate('eT')\">\n                  <input type=\"radio\" name=\"type\" value=\"text\">Exclude Time</label>\n              </span>\n            </span>\n          </div>\n        </div>\n        <span class=\"apply_all_checkbox_grp\">\n          <label class=\"add_ques_label\">\n            <input type=\"checkbox\" [ngStyle]=\"{'vertical-align': 'text-bottom'}\" [checked]=\"addtnText.ifDisplay.applyValdEverywhere\" (change)=\"applyValidationOnAllInputTexts()\">\n            <span class=\"custom_checkbox_txt\">Apply these changes to all other additional text fields</span>\n          </label>\n        </span>\n      </div>\n    </tab>\n  </tabset>\n</div>\n<div class=\"modal-footer\">\n  <button class=\"btn btn-primary\" type=\"button\" (click)=\"saveValidations()\">Save</button>\n  <button class=\"btn btn-default\" type=\"button\" (click)=\"cancelValidations()\">Cancel</button>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/question.validation/question.validation.component.scss":
/***/ (function(module, exports) {

module.exports = ".hidden {\n  display: none; }\n\n.bottom_marg_12 {\n  margin-bottom: 12px; }\n\n.verticalAlignTextBottom {\n  vertical-align: text-bottom; }\n\n.right_align {\n  margin-top: 4px;\n  text-align: right; }\n\n.center_align {\n  text-align: center;\n  margin-top: 14px; }\n\n.right_leftly_align {\n  text-align: right;\n  padding-top: 8px; }\n\n.addtn_txt_ib {\n  display: inline-block;\n  margin-top: 12px;\n  margin-right: 12px; }\n\n.addtn_txt_ib_cb {\n  float: right;\n  vertical-align: top; }\n\n.apply_all_checkbox_grp {\n  margin-top: 48px;\n  display: inline-block; }\n\n::ng-deep .nav-pills {\n  border-bottom: 2px solid #e2e2e2;\n  font-family: 'Helvetica Neue Medium'; }\n\n::ng-deep .nav-pills > li > a.active, .nav-pills > li > a.hover, .nav-pills > li > a.focus, .nav-pills > li.active > a, .nav-pills > li.active > a:hover, .nav-pills > li.active > a:focus {\n  background-color: white !important;\n  color: black !important;\n  border-bottom: 2px solid #439fea !important;\n  border-radius: 0 !important;\n  margin-bottom: -2px !important; }\n\n::ng-deep .nav-pills > li > a, .nav-pills > li > a.hover, .nav-pills > li > a:focus {\n  color: #a9a6a6; }\n\n.ques_ans_settings_input {\n  width: 100%;\n  border: 1px solid #CECECE;\n  height: 33px;\n  padding-left: 5px;\n  padding-right: 5px; }\n\n.additional_text_val_div {\n  padding: 20px 15px;\n  font-size: 12px;\n  display: table;\n  width: 100%; }\n\n.additional_text_val_div .additional_text_vald {\n    color: #4393E6;\n    font-family: 'Helvetica Neue Medium';\n    float: right;\n    margin-top: 8px; }\n\n.additional_text_val_div .addtn_txt_row {\n    display: table-row; }\n\n.additional_text_val_div .addtn_txt_col1 {\n    display: table-cell;\n    text-align: right;\n    padding: 5px; }\n\n.additional_text_val_div .addtn_txt_col2 {\n    display: table-cell;\n    padding: 5px; }\n\n.additional_text_val_div .addtn_vald_type {\n    display: inline-block;\n    vertical-align: middle; }\n\n.additional_text_val_div .add_text_radio {\n    border: 1px solid #2392ED;\n    display: table;\n    background-color: white; }\n\n.additional_text_val_div .add_text_radio > .inner_add_text_radio {\n    padding: 6px 8px;\n    display: table-cell;\n    cursor: pointer;\n    font-family: 'Helvetica Neue Medium';\n    font-weight: 500; }\n\n.additional_text_val_div .add_text_radio > .inner_add_text_radio input[type=radio] {\n    display: none; }\n\n.additional_text_val_div .add_text_radio > .inner_add_text_radio:not(:last-child) {\n    border-right: 1px solid #2392ED; }\n\n.additional_text_val_div .add_text_radio > .inner_add_text_radio.active {\n    color: white;\n    background-color: #2392ED; }\n\ninput[type=checkbox] {\n  display: none; }\n\n.custom_checkbox_txt {\n  cursor: pointer;\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n  font-weight: 500;\n  vertical-align: text-bottom; }\n\ninput[type=checkbox] + .custom_checkbox_txt:before {\n  content: '';\n  background: url(/assets/images/editSurvey/uncheck.svg);\n  background-repeat: no-repeat;\n  height: 16px;\n  width: 16px;\n  position: absolute;\n  margin-left: -20px;\n  background-size: 90%; }\n\ninput[type=checkbox]:checked + .custom_checkbox_txt:before {\n  content: '';\n  background: url(/assets/images/editSurvey/check.svg);\n  background-repeat: no-repeat;\n  height: 16px;\n  width: 16px;\n  position: absolute;\n  margin-left: -20px;\n  background-size: 90%; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/question.validation/question.validation.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return QuestionValidationComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var QuestionValidationComponent = (function () {
    function QuestionValidationComponent(services) {
        this.services = services;
        this.onApplyValdn = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.additionalTextPresent = false;
        this.additionalTextShow = false;
        this.inputTextPresent = false;
        this.inputText = {
            ifDisplay: {
                advanceNumOpen: false,
                advanceTextOpen: false,
                applyValdEverywhere: false
            },
            minValue: "",
            maxValue: "",
            maxTextLength: "",
            minTextLength: "",
            type: "",
            subType: ""
        };
        this.addtnText = {
            ifDisplay: {
                advanceNumOpen: false,
                advanceTextOpen: false,
                applyValdEverywhere: false
            },
            textLabel: "",
            minValue: "",
            maxValue: "",
            maxTextLength: "",
            minTextLength: "",
            type: "",
            subType: ""
        };
    }
    QuestionValidationComponent.prototype.ngOnInit = function () {
        var locVald = null;
        var locAddtnTextVald = null;
        this.inputTextPresent = this.data.inputTextPresent;
        //console.log(this.data)
        if (this.data.obj.rowOrCol == 'row') {
            var d = this.data.ques.get('fieldOptions.row').at(this.data.obj.index);
            if (d.get('validation')) {
                locVald = d.get('validation').value;
            }
            this.additionalTextPresent = (d.get('hasText').value == 1 || d.get('isComment').value == 1) ? true : false;
            if (this.additionalTextPresent && d.get('addnTextvalidation')) {
                locAddtnTextVald = d.get('addnTextvalidation').value;
            }
        }
        else if (this.data.obj.rowOrCol == 'col') {
            var d = this.data.ques.get('fieldOptions.col').at(this.data.obj.index);
            if (d.get('validation')) {
                locVald = d.get('validation').value;
            }
            this.additionalTextPresent = (d.get('hasText').value == 1 || d.get('isComment').value == 1) ? true : false;
            if (this.additionalTextPresent && d.get('addnTextvalidation')) {
                locAddtnTextVald = d.get('addnTextvalidation').value;
            }
        }
        if (this.additionalTextPresent && locAddtnTextVald != null) {
            this.addtnText.type = locAddtnTextVald.type;
            this.addtnText.subType = locAddtnTextVald.subType;
            this.addtnText.textLabel = locAddtnTextVald.text;
            this.addtnText.ifDisplay.applyValdEverywhere = (locAddtnTextVald.family == "all");
            if (locAddtnTextVald.min != "" && this.addtnText.type == 'number') {
                this.addtnText.minValue = locAddtnTextVald.min;
                this.addtnText.ifDisplay.advanceNumOpen = true;
            }
            if (locAddtnTextVald.min != "" && this.addtnText.type == 'text') {
                this.addtnText.minTextLength = locAddtnTextVald.min;
                this.addtnText.ifDisplay.advanceTextOpen = true;
            }
            if (locAddtnTextVald.max != "" && this.addtnText.type == 'number') {
                this.addtnText.maxValue = locAddtnTextVald.max;
                this.addtnText.ifDisplay.advanceNumOpen = true;
            }
            if (locAddtnTextVald.max != "" && this.addtnText.type == 'text') {
                this.addtnText.maxTextLength = locAddtnTextVald.max;
                this.addtnText.ifDisplay.advanceTextOpen = true;
            }
        }
        if (locVald != null) {
            this.inputText.type = locVald.type;
            this.inputText.subType = locVald.subType;
            this.inputText.ifDisplay.applyValdEverywhere = (locVald.family == "all");
            if (locVald.min != "" && this.inputText.type == 'number') {
                this.inputText.minValue = locVald.min;
                this.inputText.ifDisplay.advanceNumOpen = true;
            }
            if (locVald.min != "" && this.inputText.type == 'text') {
                this.inputText.minTextLength = locVald.min;
                this.inputText.ifDisplay.advanceTextOpen = true;
            }
            if (locVald.max != "" && this.inputText.type == 'number') {
                this.inputText.maxValue = locVald.max;
                this.inputText.ifDisplay.advanceNumOpen = true;
            }
            if (locVald.max != "" && this.inputText.type == 'text') {
                this.inputText.maxTextLength = locVald.max;
                this.inputText.ifDisplay.advanceTextOpen = true;
            }
        }
        if (this.inputText.type == "" || this.inputText.type == null) {
            this.inputText.type = "text";
            this.inputText.subType = "normalText";
        }
        if (this.additionalTextPresent && (this.addtnText.type == "" || this.addtnText.type == null)) {
            this.addtnText.type = "text";
            this.addtnText.subType = "normalText";
        }
        if (!this.inputTextPresent && this.additionalTextPresent) {
            this.additionalTextShow = true;
        }
        //console.log("input vald",this.inputText)
        //console.log("locAddtnTextVald vald",this.addtnText)
    };
    QuestionValidationComponent.prototype.showAdvanceTextOptions = function () {
        if (!this.additionalTextShow) {
            this.inputText.ifDisplay.advanceTextOpen = false;
            this.inputText.ifDisplay.advanceNumOpen = false;
            this.inputText.type = "text";
            if (this.inputText.subType == "naturalNumber" || this.inputText.subType == "decimalNumber"
                || this.inputText.subType == "wholeNumber" || this.inputText.subType == "Integer"
                || this.inputText.subType == "withoutTime" || this.inputText.subType == "withTime") {
                this.inputText.subType = "normalText";
            }
        }
        else {
            this.addtnText.ifDisplay.advanceTextOpen = false;
            this.addtnText.ifDisplay.advanceNumOpen = false;
            this.addtnText.type = "text";
            if (this.addtnText.subType == "naturalNumber" || this.addtnText.subType == "decimalNumber"
                || this.addtnText.subType == "wholeNumber" || this.addtnText.subType == "Integer"
                || this.addtnText.subType == "withoutTime" || this.addtnText.subType == "withTime") {
                this.addtnText.subType = "normalText";
            }
        }
    };
    QuestionValidationComponent.prototype.showAdvanceDateOptions = function () {
        if (!this.additionalTextShow) {
            this.inputText.ifDisplay.advanceTextOpen = false;
            this.inputText.ifDisplay.advanceNumOpen = false;
            this.inputText.type = "date";
            if (this.inputText.subType == "naturalNumber" || this.inputText.subType == "decimalNumber"
                || this.inputText.subType == "wholeNumber" || this.inputText.subType == "Integer"
                || this.inputText.subType == "normalText" || this.inputText.subType == "email") {
                this.inputText.subType = "withTime";
            }
        }
        else {
            this.addtnText.ifDisplay.advanceTextOpen = false;
            this.addtnText.ifDisplay.advanceNumOpen = false;
            this.addtnText.type = "date";
            if (this.addtnText.subType == "naturalNumber" || this.addtnText.subType == "decimalNumber"
                || this.addtnText.subType == "wholeNumber" || this.addtnText.subType == "Integer"
                || this.addtnText.subType == "normalText" || this.addtnText.subType == "email") {
                this.addtnText.subType = "withTime";
            }
        }
    };
    QuestionValidationComponent.prototype.showAdvanceNumOptions = function () {
        // //console.log(this)
        if (!this.additionalTextShow) {
            this.inputText.ifDisplay.advanceTextOpen = false;
            this.inputText.ifDisplay.advanceNumOpen = false;
            this.inputText.type = "number";
            if (this.inputText.subType == "withTime" || this.inputText.subType == "withoutTime"
                || this.inputText.subType == "normalText" || this.inputText.subType == "email") {
                this.inputText.subType = "wholeNumber";
            }
        }
        else {
            this.addtnText.ifDisplay.advanceTextOpen = false;
            this.addtnText.ifDisplay.advanceNumOpen = false;
            this.addtnText.type = "number";
            if (this.addtnText.subType == "withTime" || this.addtnText.subType == "withoutTime"
                || this.addtnText.subType == "normalText" || this.addtnText.subType == "email") {
                this.addtnText.subType = "wholeNumber";
            }
        }
    };
    QuestionValidationComponent.prototype.openAdvanceNumber = function () {
        if (!this.additionalTextShow) {
            if (this.inputText.ifDisplay.advanceNumOpen) {
                this.inputText.ifDisplay.advanceNumOpen = false;
            }
            else {
                this.inputText.ifDisplay.advanceNumOpen = true;
            }
        }
        else {
            if (this.addtnText.ifDisplay.advanceNumOpen) {
                this.addtnText.ifDisplay.advanceNumOpen = false;
            }
            else {
                this.addtnText.ifDisplay.advanceNumOpen = true;
            }
        }
    };
    QuestionValidationComponent.prototype.openAdvanceText = function () {
        if (!this.additionalTextShow) {
            if (this.inputText.ifDisplay.advanceTextOpen) {
                this.inputText.ifDisplay.advanceTextOpen = false;
            }
            else {
                this.inputText.ifDisplay.advanceTextOpen = true;
            }
        }
        else {
            if (this.addtnText.ifDisplay.advanceTextOpen) {
                this.addtnText.ifDisplay.advanceTextOpen = false;
            }
            else {
                this.addtnText.ifDisplay.advanceTextOpen = true;
            }
        }
    };
    QuestionValidationComponent.prototype.applyValidationOnAllInputTexts = function () {
        if (!this.additionalTextShow) {
            if (this.inputText.ifDisplay.applyValdEverywhere) {
                this.inputText.ifDisplay.applyValdEverywhere = false;
            }
            else {
                this.inputText.ifDisplay.applyValdEverywhere = true;
            }
        }
        else {
            if (this.addtnText.ifDisplay.applyValdEverywhere) {
                this.addtnText.ifDisplay.applyValdEverywhere = false;
            }
            else {
                this.addtnText.ifDisplay.applyValdEverywhere = true;
            }
        }
    };
    QuestionValidationComponent.prototype.validate = function (that) {
        if (!this.additionalTextShow) {
            switch (that) {
                case "iT":
                    this.inputText.type = "date";
                    this.inputText.subType = "withTime";
                    break;
                case "eT":
                    this.inputText.type = "date";
                    this.inputText.subType = "withoutTime";
                    break;
                case "nT":
                    this.inputText.type = "text";
                    this.inputText.subType = "normalText";
                    break;
                case "eM":
                    this.inputText.type = "text";
                    this.inputText.subType = "email";
                    break;
                case "iN":
                    this.inputText.type = "number";
                    this.inputText.subType = "Integer";
                    break;
                case "wN":
                    this.inputText.type = "number";
                    this.inputText.subType = "wholeNumber";
                    break;
                case "nN":
                    this.inputText.type = "number";
                    this.inputText.subType = "naturalNumber";
                    break;
                case "dN":
                    this.inputText.type = "number";
                    this.inputText.subType = "decimalNumber";
                    break;
                default:
                    break;
            }
        }
        else {
            switch (that) {
                case "iT":
                    this.addtnText.type = "date";
                    this.addtnText.subType = "withTime";
                    break;
                case "eT":
                    this.addtnText.type = "date";
                    this.addtnText.subType = "withoutTime";
                    break;
                case "nT":
                    this.addtnText.type = "text";
                    this.addtnText.subType = "normalText";
                    break;
                case "eM":
                    this.addtnText.type = "text";
                    this.addtnText.subType = "email";
                    break;
                case "iN":
                    this.addtnText.type = "number";
                    this.addtnText.subType = "Integer";
                    break;
                case "wN":
                    this.addtnText.type = "number";
                    this.addtnText.subType = "wholeNumber";
                    break;
                case "nN":
                    this.addtnText.type = "number";
                    this.addtnText.subType = "naturalNumber";
                    break;
                case "dN":
                    this.addtnText.type = "number";
                    this.addtnText.subType = "decimalNumber";
                    break;
                default:
                    break;
            }
        }
    };
    QuestionValidationComponent.prototype.checkIfValidMaxMin = function (type, subType, max, min) {
        var ret = false;
        switch (type) {
            case 'number':
                switch (subType) {
                    case 'Integer':
                        if (((min && !isNaN(min) && (min % 1 == 0)) || !min) &&
                            ((max && !isNaN(max) && (max % 1 == 0)) || !max) &&
                            ((max && !isNaN(max) && (max % 1 == 0) && min && !isNaN(min) && (min % 1 == 0) && max >= min) ||
                                (max && !isNaN(max) && (max % 1 == 0) && !min) ||
                                (min && !isNaN(min) && (min % 1 == 0) && !max) ||
                                (!max && !min))) {
                            ret = true;
                        }
                        break;
                    case 'wholeNumber':
                        if (((min && !isNaN(min) && (min % 1 == 0) && min >= 0) || !min) &&
                            ((max && !isNaN(max) && (max % 1 == 0) && max >= 0) || !max) &&
                            ((max && !isNaN(max) && (max % 1 == 0) && max >= 0 && min && !isNaN(min) && (min % 1 == 0) && min >= 0 && max >= min) ||
                                (max && !isNaN(max) && (max % 1 == 0) && max >= 0 && !min) ||
                                (min && !isNaN(min) && (min % 1 == 0) && min >= 0 && !max) ||
                                (!max && !min))) {
                            ret = true;
                        }
                        break;
                    case 'naturalNumber':
                        if (((min && !isNaN(min) && (min % 1 == 0) && min >= 1) || !min) &&
                            ((max && !isNaN(max) && (max % 1 == 0) && max >= 1) || !max) &&
                            ((max && !isNaN(max) && (max % 1 == 0) && max >= 1 && min && !isNaN(min) && (min % 1 == 0) && min >= 1 && max >= min) ||
                                (max && !isNaN(max) && (max % 1 == 0) && max >= 1 && !min) ||
                                (min && !isNaN(min) && (min % 1 == 0) && min >= 1 && !max) ||
                                (!max && !min))) {
                            ret = true;
                        }
                        break;
                    case 'decimalNumber':
                        if (((min && !isNaN(min)) || !min) &&
                            ((max && !isNaN(max)) || !max) &&
                            ((max && !isNaN(max) && min && !isNaN(min) && max >= min) ||
                                (max && !isNaN(max) && !min) ||
                                (min && !isNaN(min) && !max) ||
                                (!max && !min))) {
                            ret = true;
                        }
                        break;
                    default:
                        break;
                }
                break;
            case 'text':
                if (((min && !isNaN(min) && (min % 1 == 0) && min >= 1) || !min) &&
                    ((max && !isNaN(max) && (max % 1 == 0) && max >= 1) || !max) &&
                    ((max && !isNaN(max) && (max % 1 == 0) && max >= 1 && min && !isNaN(min) && (min % 1 == 0) && min >= 1 && max >= min) ||
                        (max && !isNaN(max) && (max % 1 == 0) && max >= 1 && !min) ||
                        (min && !isNaN(min) && (min % 1 == 0) && min >= 1 && !max) ||
                        (!max && !min))) {
                    ret = true;
                }
                break;
            case 'date':
                ret = true;
                break;
            default:
                break;
        }
        return ret;
    };
    QuestionValidationComponent.prototype.removeValidation = function () {
        if (!this.additionalTextShow) {
            if (this.inputTextPresent) {
                var locVald_1 = {
                    type: "",
                    subType: "",
                    family: "",
                    max: "",
                    min: "",
                    valdType: ""
                };
                var rw = this.data.ques.get('fieldOptions.row');
                var cl = this.data.ques.get('fieldOptions.col');
                if (this.inputText.ifDisplay.applyValdEverywhere) {
                    if (rw && typeof rw != "undefined") {
                        rw.controls.forEach(function (item) {
                            item.patchValue({ "validation": locVald_1 });
                        });
                    }
                    if (cl && typeof cl != "undefined") {
                        cl.controls.forEach(function (item) {
                            item.patchValue({ "validation": locVald_1 });
                        });
                    }
                }
                else {
                    if (this.data.obj.rowOrCol == 'row')
                        rw.at(this.data.obj.index).patchValue({ "validation": locVald_1 });
                    else if (this.data.obj.rowOrCol == 'col')
                        cl.at(this.data.obj.index).patchValue({ "validation": locVald_1 });
                }
            }
        }
        else {
            if (this.additionalTextPresent) {
                var locVald_2 = {
                    type: "",
                    subType: "",
                    family: "",
                    text: "",
                    max: "",
                    min: "",
                    valdType: ""
                };
                var rw = this.data.ques.get('fieldOptions.row');
                var cl = this.data.ques.get('fieldOptions.col');
                if (this.addtnText.ifDisplay.applyValdEverywhere) {
                    if (rw && typeof rw != "undefined") {
                        rw.controls.forEach(function (item) {
                            //console.log("rwidvPrev",item)
                            //console.log("locVald",locVald);
                            // if(item.get("addnTextvalidation"))
                            //   item.get("addnTextvalidation").patchValue(locVald);
                            // else
                            item.patchValue({ "addnTextvalidation": locVald_2 });
                            //console.log("rwidvLater",item)
                        });
                    }
                    if (cl && typeof cl != "undefined") {
                        cl.controls.forEach(function (item) {
                            //console.log("colidvPrev",item);
                            //console.log("locVald",locVald);
                            // if(item.get("addnTextvalidation"))
                            //   item.get("addnTextvalidation").patchValue(locVald);
                            // else
                            item.patchValue({ "addnTextvalidation": locVald_2 });
                            //console.log("colidvLater",item)
                        });
                    }
                }
                else {
                    //console.log("locVald HERE",locVald);
                    if (this.data.obj.rowOrCol == 'row') {
                        rw.at(this.data.obj.index).patchValue({ "addnTextvalidation": locVald_2 });
                    }
                    else if (this.data.obj.rowOrCol == 'col') {
                        cl.at(this.data.obj.index).patchValue({ "addnTextvalidation": locVald_2 });
                    }
                }
            }
        }
        this.onApplyValdn.emit();
    };
    QuestionValidationComponent.prototype.saveValidations = function (act) {
        if (act === void 0) { act = ""; }
        if (!this.additionalTextShow) {
            if (this.inputTextPresent) {
                if (this.data.ques.get('validation') && this.data.ques.get('validation.valdType') && this.data.ques.get('validation.valdType').value == "percentageSum") {
                    if (this.inputText.type == "date" || this.inputText.type == "text") {
                        this.services.toastr.error("Validation on sum of Textboxes is applied. Please select number type only");
                        return;
                    }
                }
                var locVald_3 = {
                    type: this.inputText.type,
                    subType: this.inputText.subType,
                    family: ((this.inputText.ifDisplay.applyValdEverywhere) ? "all" : "individual"),
                    max: (this.inputText.type == 'number') ? this.inputText.maxValue : this.inputText.maxTextLength,
                    min: (this.inputText.type == 'number') ? this.inputText.minValue : this.inputText.minTextLength,
                    valdType: ""
                };
                if (this.inputText.type == "") {
                    this.services.toastr.error("Please select an input text type");
                    return;
                }
                if (this.inputText.subType == "") {
                    this.services.toastr.error("Please select an input text sub-type");
                    return;
                }
                if (!this.checkIfValidMaxMin(locVald_3.type, locVald_3.subType, locVald_3.max, locVald_3.min)) {
                    this.services.toastr.error("Please select a valid max/min parameter");
                    return;
                }
                var rw = this.data.ques.get('fieldOptions.row');
                var cl = this.data.ques.get('fieldOptions.col');
                if (this.inputText.ifDisplay.applyValdEverywhere) {
                    if (rw && typeof rw != "undefined") {
                        rw.controls.forEach(function (item) {
                            item.patchValue({ "validation": locVald_3 });
                        });
                    }
                    if (cl && typeof cl != "undefined") {
                        cl.controls.forEach(function (item) {
                            item.patchValue({ "validation": locVald_3 });
                        });
                    }
                }
                else {
                    if (this.data.obj.rowOrCol == 'row')
                        rw.at(this.data.obj.index).patchValue({ "validation": locVald_3 });
                    else if (this.data.obj.rowOrCol == 'col')
                        cl.at(this.data.obj.index).patchValue({ "validation": locVald_3 });
                }
            }
            // this.services.toastr.success("Input Text Validation Saved Succesfully!");
        }
        else {
            if (this.additionalTextPresent) {
                var locVald_4 = {
                    type: this.addtnText.type,
                    subType: this.addtnText.subType,
                    family: ((this.addtnText.ifDisplay.applyValdEverywhere) ? "all" : "individual"),
                    text: this.addtnText.textLabel,
                    max: (this.addtnText.type == 'number') ? this.addtnText.maxValue : this.addtnText.maxTextLength,
                    min: (this.addtnText.type == 'number') ? this.addtnText.minValue : this.addtnText.minTextLength,
                    valdType: ""
                };
                if (this.addtnText.type == "") {
                    this.services.toastr.error("Please select an additional text type");
                    return;
                }
                if (this.addtnText.textLabel == "") {
                    this.services.toastr.error("Please mention the additional text label");
                    return;
                }
                if (this.addtnText.subType == "") {
                    this.services.toastr.error("Please select an additional text sub-type");
                    return;
                }
                if (!this.checkIfValidMaxMin(locVald_4.type, locVald_4.subType, locVald_4.max, locVald_4.min)) {
                    this.services.toastr.error("Please select a valid max/min parameter");
                    return;
                }
                var rw = this.data.ques.get('fieldOptions.row');
                var cl = this.data.ques.get('fieldOptions.col');
                if (this.addtnText.ifDisplay.applyValdEverywhere) {
                    if (rw && typeof rw != "undefined") {
                        rw.controls.forEach(function (item) {
                            //console.log("rwidvPrev",item)
                            //console.log("locVald",locVald);
                            // if(item.get("addnTextvalidation"))
                            //   item.get("addnTextvalidation").patchValue(locVald);
                            // else
                            item.patchValue({ "addnTextvalidation": locVald_4 });
                            //console.log("rwidvLater",item)
                        });
                    }
                    if (cl && typeof cl != "undefined") {
                        cl.controls.forEach(function (item) {
                            //console.log("colidvPrev",item);
                            //console.log("locVald",locVald);
                            // if(item.get("addnTextvalidation"))
                            //   item.get("addnTextvalidation").patchValue(locVald);
                            // else
                            item.patchValue({ "addnTextvalidation": locVald_4 });
                            //console.log("colidvLater",item)
                        });
                    }
                }
                else {
                    //console.log("locVald HERE",locVald);
                    if (this.data.obj.rowOrCol == 'row') {
                        rw.at(this.data.obj.index).patchValue({ "addnTextvalidation": locVald_4 });
                    }
                    else if (this.data.obj.rowOrCol == 'col') {
                        cl.at(this.data.obj.index).patchValue({ "addnTextvalidation": locVald_4 });
                    }
                }
            }
            // this.services.toastr.success("Additional Text Validation Saved Succesfully!");
        }
        //console.log("OnSaveData",this.data);
        if (act != "dC")
            this.cancelValidations();
    };
    QuestionValidationComponent.prototype.cancelValidations = function () {
        this.onApplyValdn.emit();
    };
    QuestionValidationComponent.prototype.toggleTabs = function (texts) {
        if (texts == 'iT') {
            this.saveValidations("dC");
            this.additionalTextShow = false;
        }
        else {
            this.saveValidations("dC");
            this.additionalTextShow = true;
        }
    };
    return QuestionValidationComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], QuestionValidationComponent.prototype, "onApplyValdn", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], QuestionValidationComponent.prototype, "data", void 0);
QuestionValidationComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-question-validation',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/question.validation/question.validation.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.question.edit/question.validation/question.validation.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.component.scss")],
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object])
], QuestionValidationComponent);

var _a, _b;
//# sourceMappingURL=question.validation.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/row.col.options/row.col.options.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"more_options\">\n  <ul class=\"more_options_ul\" *ngIf=\"moreOptsInp.ans\">\n    <li [hidden]=\"(ifDisplay.hideColumns)\" (click)=\"onOptHide()\">\n      <span class=\"row_col_opt\" [ngClass]=\"moreOptsInp.ans.get('isHidden').value ? 'opt_show' : 'opt_hide'\"></span>\n      <span>{{moreOptsInp.ans.get('isHidden').value ? 'Show' : 'Hide'}}</span>\n    </li>\n    <li [hidden]=\"!(ifDisplay.dropdownchoices)\" (click)=\"addDropDownMenu()\">\n      <span class=\"row_col_opt opt_dd_choices\"></span>\n      <span>Add DropDown Choices</span>\n    </li>\n    <!-- <li (click)=\"optSelected()\">\n      <span class=\"row_col_opt opt_video\"></span>\n      <span>Add Video</span>\n    </li> -->\n    <li [hidden]=\"!(ifDisplay.imagePiping)\" (click)=\"addImage()\">\n      <span class=\"row_col_opt opt_img\"></span>\n      <span>Add Image</span>\n    </li>\n    <li (click)=\"addPiping()\">\n      <span class=\"row_col_opt opt_piping\"></span>\n      <span>Piping</span>\n    </li>\n    <li class=\"add_text_li\" [hidden]=\"(ifDisplay.addtnText || moreOptsInp.ans.get('isNa').value)\">\n      <div class=\"custom_checkbox_grp\">\n        <label class=\"add_text_label\">\n          <input type=\"checkbox\" [checked]=\"moreOptsInp.ans.get('hasText').value || moreOptsInp.ans.get('isComment').value\" (change)=\"applyAddtnText($event)\">\n          <span class=\"custom_checkbox_txt\">Additional Text</span>\n        </label>\n      </div>\n      <div class=\"add_text_opt\" [hidden]=\"!(ifDisplay.addtnTextChoiceRows && moreOptsInp.ans.get('hasText').value || moreOptsInp.ans.get('isComment').value)\">\n        <div class=\"custom_radio_in_checkbox_grp\">\n          <label class=\"add_ques_label\">\n            <input type=\"checkbox\" [(ngModel)]=\"moreOptsInp.ans.get('hasText').value\" (change)=\"applyTextOrComment($event,'hasText')\">\n            <span class=\"custom_radio_in_checkbox_txt\">Use in Header</span>\n          </label>\n        </div>\n        <div class=\"custom_radio_in_checkbox_grp\">\n          <label class=\"add_ques_label\">\n            <input type=\"checkbox\" [(ngModel)]=\"moreOptsInp.ans.get('isComment').value\" (change)=\"applyTextOrComment($event,'isComment')\">\n            <span class=\"custom_radio_in_checkbox_txt\">Include with choices</span>\n          </label>\n        </div>\n      </div>\n    </li>\n    <li [hidden]=\"!(ifDisplay.applyValidtn || moreOptsInp.ans.get('hasText').value  || moreOptsInp.ans.get('isComment').value)\" (click)=\"openValidationModal()\">\n      <span class=\"row_col_opt\" [ngClass]=\"(moreOptsInp.ans.get('addnTextvalidation.type').value || moreOptsInp.ans.get('validation.type').value) ? 'opt_vald_active' : 'opt_vald'\"></span>\n      <span>Validation</span>\n    </li>\n  </ul>\n</div>\n\n<ng-template #addDropDownItemsModal>\n  <div class=\"modal-header\">\n    <div class=\"modal-title pull-left\">\n      <h4>Add Drop down Items</h4>\n      <h6 class=\"modal_sub_title\">Enter answers on a separate line</h6>\n    </div>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"closeDropDownItemsModal()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <div class=\"modal-body\">\n    <div class=\"modal_inner_body\">\n      <div>\n        <textarea class=\"ques_textarea\" rows=\"8\" [(ngModel)]=\"dropDownItems.value\"></textarea>\n      </div>\n      <div class=\"modal_btns\">\n        <button type=\"button\" class=\"btn modal_cancel_btn\" (click)=\"closeDropDownItemsModal()\">Cancel</button>\n        <button type=\"button\" class=\"btn modal_add_btn\" (click)=\"addDropDownItems()\">Add</button>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #validationModal>\n  <div class=\"modal-header\">\n    <div class=\"modal-title pull-left\" style=\"padding: 12px 30px 0px 0px;\">\n      <h4>Validation</h4>\n    </div>\n    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n      <span aria-hidden=\"true\">&times;</span>\n    </button>\n  </div>\n  <app-question-validation [data]=\"{'obj': validationObject, 'ques': moreOptsInp.compQues.data, 'inputTextPresent': ifDisplay.applyValidtn}\" (onApplyValdn)=\"onValdnDone()\"></app-question-validation>\n</ng-template>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/row.col.options/row.col.options.component.scss":
/***/ (function(module, exports) {

module.exports = ".more_options {\n  background-color: white;\n  -webkit-box-shadow: 0 3px 7px 0 rgba(0, 0, 0, 0.2);\n          box-shadow: 0 3px 7px 0 rgba(0, 0, 0, 0.2); }\n\n.more_options::after {\n  content: '';\n  height: 12px;\n  width: 12px;\n  border-left: 7px solid transparent;\n  border-right: 7px solid transparent;\n  border-bottom: 10px solid white;\n  position: absolute;\n  right: 13px;\n  top: -9px; }\n\n.more_options_ul {\n  padding: 10px 20px;\n  list-style-type: none;\n  font-family: \"Helvetica\";\n  font-size: 12px; }\n\n.more_options_ul li {\n  padding: 5px 0;\n  cursor: pointer; }\n\n.row_col_opt {\n  height: 16px;\n  vertical-align: bottom;\n  display: inline-block;\n  width: 20px; }\n\n.row_col_opt.opt_hide {\n    background: url(/assets/images/editSurvey/hide.svg);\n    background-repeat: no-repeat; }\n\n.row_col_opt.opt_show {\n    height: 13px;\n    background: url(/assets/images/editSurvey/unhide.svg);\n    background-repeat: no-repeat; }\n\n.row_col_opt.opt_dd_choices {\n    background: url(/assets/images/editSurvey/drop-down-choice.svg);\n    background-repeat: no-repeat; }\n\n.row_col_opt.opt_vald {\n    background: url(/assets/images/editSurvey/validation.svg);\n    background-repeat: no-repeat; }\n\n.row_col_opt.opt_vald_active {\n    background: url(/assets/images/editSurvey/active-validation.svg);\n    background-repeat: no-repeat; }\n\n.row_col_opt.opt_video {\n    background: url(/assets/images/editSurvey/video.svg);\n    background-repeat: no-repeat; }\n\n.row_col_opt.opt_img {\n    background: url(/assets/images/editSurvey/image.svg);\n    background-repeat: no-repeat; }\n\n.row_col_opt.opt_piping {\n    background: url(/assets/images/editSurvey/piping.svg);\n    background-repeat: no-repeat; }\n\n.add_text_li {\n  border-top: 1px solid #bababa;\n  padding-top: 8px !important; }\n\n.add_text_label {\n  margin: 0; }\n\n.add_text_opt {\n  padding-top: 5px; }\n\n.add_text_opt .add_ques_label {\n    font-family: 'Helvetica'; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/row.col.options/row.col.options.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RowColOptionsComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_questionTemplates_question_types_service__ = __webpack_require__("./src/app/shared/questionTemplates/question-types.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ngx_bootstrap_modal__ = __webpack_require__("./node_modules/ngx-bootstrap/modal/index.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var RowColOptionsComponent = (function () {
    function RowColOptionsComponent(modalService, services, quesTypesService, elemRef) {
        this.modalService = modalService;
        this.services = services;
        this.quesTypesService = quesTypesService;
        this.elemRef = elemRef;
        this.onSelect = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.ifDisplay = {
            hideColumns: false,
            addtnText: false,
            addtnTextChoiceRows: false,
            dropdownchoices: false,
            imagePiping: false,
            applyValidtn: false
        };
        this.dropDownItems = {
            value: ''
        };
        this.validationObject = {
            index: '',
            rowOrCol: ''
        };
    }
    RowColOptionsComponent.prototype.onClick = function (e) {
        if (!this.elemRef.nativeElement.contains(e.target)) {
            this.onSelect.emit('done');
        }
    };
    RowColOptionsComponent.prototype.openModal = function (template, size) {
        this.modalRef = this.modalService.show(template, { class: size });
    };
    RowColOptionsComponent.prototype.hideModal = function () {
        this.modalRef.hide();
    };
    RowColOptionsComponent.prototype.ngOnInit = function () {
        var quesType = this.moreOptsInp.quesType;
        this.ifDisplay.hideColumns = (quesType == 'graph-rating' && this.moreOptsInp.rowOrCol == 'col');
        this.ifDisplay.addtnText = (quesType == 'dropdown' || quesType == 'single-text' || quesType == 'comment' || quesType == 'contacts');
        this.ifDisplay.addtnTextChoiceRows = (quesType == 'matrix-rating' || quesType == 'matrix-dropdown' || quesType == 'matrix-text' && this.moreOptsInp.rowOrCol == 'row' || quesType == 'graph-rating' && this.moreOptsInp.rowOrCol == 'row');
        this.ifDisplay.dropdownchoices = (quesType == 'matrix-dropdown' && this.moreOptsInp.rowOrCol == 'col');
        this.ifDisplay.imagePiping = !(quesType == 'dropdown' || quesType == 'single-text' || quesType == 'comment');
        this.ifDisplay.applyValidtn = (quesType == 'single-text' || quesType == 'mul-text' || quesType == 'matrix-text' || quesType == 'comment' || quesType == 'contacts');
    };
    RowColOptionsComponent.prototype.onOptHide = function () {
        this.moreOptsInp.ans.get('isHidden').patchValue(!this.moreOptsInp.ans.get('isHidden').value);
        this.optSelected();
    };
    RowColOptionsComponent.prototype.applyAddtnText = function (e) {
        var opt = this.moreOptsInp.ans;
        if (e.target.checked) {
            opt.patchValue({ 'hasText': 1 });
            opt._value.hasText = 1;
        }
        else {
            opt.patchValue({ 'hasText': 0 });
            opt.patchValue({ 'isComment': 0 });
        }
    };
    RowColOptionsComponent.prototype.applyTextOrComment = function (e, textOrComment) {
        var opt = this.moreOptsInp.ans;
        if (textOrComment == 'hasText') {
            opt.patchValue({ 'hasText': (e.target.checked ? 1 : 0) });
        }
        else if (textOrComment == 'isComment') {
            opt.patchValue({ 'isComment': (e.target.checked ? 1 : 0) });
        }
        if (opt.get('hasText').value && opt.get('isComment').value) {
            if (textOrComment == 'hasText') {
                opt.patchValue({ 'isComment': 0 });
            }
            else if (textOrComment == 'isComment') {
                opt.patchValue({ 'hasText': 0 });
            }
        }
        else if (!opt.get('hasText').value && !opt.get('isComment').value) {
            if (textOrComment == 'hasText') {
                opt.patchValue({ 'isComment': 1 });
            }
            else if (textOrComment == 'isComment') {
                opt.patchValue({ 'hasText': 1 });
            }
        }
        if (opt.get('isComment').value && this.ifDisplay.addtnTextChoiceRows) {
            if (this.moreOptsInp.rowOrCol == 'row') {
                (this.moreOptsInp.compQues.data.get('fieldOptions.col').controls).forEach(function (obj) {
                    obj.patchValue({ 'isComment': 0 });
                });
            }
            else {
                (this.moreOptsInp.compQues.data.get('fieldOptions.row').controls).forEach(function (obj) {
                    obj.patchValue({ 'isComment': 0 });
                });
            }
        }
    };
    RowColOptionsComponent.prototype.addDropDownMenu = function () {
        var opt = this.moreOptsInp.ans;
        var itemsArr = [];
        if (opt.get('items').length) {
            (opt.get('items').controls).forEach(function (item) {
                itemsArr.push(item.get('text').value);
            });
            this.dropDownItems.value = itemsArr.join('\n');
        }
        console.log(this.dropDownItems);
        this.openModal(this.addDropDownItemsModal, 'modal-md');
    };
    RowColOptionsComponent.prototype.addDropDownItems = function () {
        var _this = this;
        var opt = this.moreOptsInp.ans;
        while (opt.get('items').length) {
            opt.get('items').removeAt(opt.get('items').length - 1);
        }
        var options;
        options = this.dropDownItems.value.replace(/^\s*\n/gm, "");
        if (options == '') {
            this.services.alert({
                title: '<p class="sweetalert_title">Please fill atleast one choice</p>'
            });
            return false;
        }
        options = options.split("\n");
        var obj;
        options.forEach(function (val) {
            val = val.trim();
            if (val != '') {
                obj = _this.quesTypesService.itemGroup(val);
                opt.get('items').push(obj);
            }
        });
        console.log(opt);
        this.closeDropDownItemsModal();
    };
    RowColOptionsComponent.prototype.closeDropDownItemsModal = function () {
        this.hideModal();
        this.optSelected();
        this.dropDownItems.value = '';
    };
    RowColOptionsComponent.prototype.openValidationModal = function (rowOrCol, idx) {
        this.validationObject.index = this.moreOptsInp.idx;
        this.validationObject.rowOrCol = this.moreOptsInp.rowOrCol;
        this.openModal(this.validationModal, 'modal-md');
    };
    RowColOptionsComponent.prototype.onValdnDone = function () {
        this.hideModal();
        this.optSelected();
    };
    RowColOptionsComponent.prototype.addPiping = function () {
        this.onSelect.emit('piping');
    };
    RowColOptionsComponent.prototype.addImage = function () {
        this.onSelect.emit('imgUpload');
    };
    RowColOptionsComponent.prototype.optSelected = function () {
        this.onSelect.emit('done');
    };
    return RowColOptionsComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], RowColOptionsComponent.prototype, "moreOptsInp", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]) === "function" && _a || Object)
], RowColOptionsComponent.prototype, "onSelect", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('addDropDownItemsModal'),
    __metadata("design:type", Object)
], RowColOptionsComponent.prototype, "addDropDownItemsModal", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('validationModal'),
    __metadata("design:type", Object)
], RowColOptionsComponent.prototype, "validationModal", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["HostListener"])('document:click', ['$event']),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], RowColOptionsComponent.prototype, "onClick", null);
RowColOptionsComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-row-col-options',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/row.col.options/row.col.options.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.question.edit/row.col.options/row.col.options.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3_ngx_bootstrap_modal__["a" /* BsModalService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3_ngx_bootstrap_modal__["a" /* BsModalService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _e || Object])
], RowColOptionsComponent);

var _a, _b, _c, _d, _e;
//# sourceMappingURL=row.col.options.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.component.html":
/***/ (function(module, exports) {

module.exports = "<ng-container *ngIf=\"completeQuestion.data\">\n<div [ngClass]=\"(!surveyDesignData.displaySidebar ? 'inner-left-broad-container' : 'inner-left-container')\">\n  <div>\n\t  <div class=\"left_sidebar_ques_options\" #sideBar [formGroup]=\"completeQuestion.data\">\n\t\t\t<div>\n        <div class=\"btn-group ques_select_dropdown_div\" dropdown>\n          <button dropdownToggle type=\"button\" class=\"btn ques_select_dropdown dropdown-toggle\" [attr.disabled]=\"hasResponse\">\n            <span><img [src]=\"quesTypesJSON[selQuesType.type].icon\"></span>\n            <span>{{quesTypesJSON[selQuesType.type].text}}</span>\n            <span class=\"ques_select_dropdown_arrow\"></span>\n          </button>\n          <ul *dropdownMenu class=\"dropdown-menu\" role=\"menu\">\n            <li role=\"menuitem\" *ngFor=\"let ques of quesTypesJSON | keys\" (click)=\"setNewQues(ques)\">\n              <a class=\"dropdown-item\">\n                <span><img [src]=\"quesTypesJSON[ques].icon\"></span>\n                <span class=\"ques_dd_text\">{{quesTypesJSON[ques].text}}</span>\n              </a>\n            </li>\n          </ul>\n        </div>\n\t\t\t</div>\n\t\t\t<div class=\"left_sidebar_box\">\n\t\t\t\t<div class=\"left_sidebar_inner_divs\">\n          <span class=\"tinymce_span_label\">{{selQuesType.type == 'statement' ? 'S' : 'Q'}}.</span>\n          <span class=\"tinymce-small\">\n            <textarea appTinymce [element]=\"{text: completeQuestion.data.get('title'), className: 'tinyMceQuestion'}\" (onEvent)=\"onEvent($event)\" formControlName=\"title\"></textarea>\n          </span>\n        </div>\n\t\t\t</div>\n\n      <div *ngIf=\"ifDisplay.ratingOptions\" class=\"left_sidebar_box\">\n        <div class=\"left_sidebar_heading\">\n          <span>\n            Rating Options\n          </span>\n        </div>\n        <div class=\"left_sidebar_inner_divs\" [hidden]=\"!(ifDisplay.ratingOptions)\">\n          <div class=\"ans_settings_div\" *ngIf=\"(selQuesType.type=='nps')\">\n            <ng-container formGroupName=\"properties\">\n              <ng-container formGroupName=\"nps\">\n                <ng-container formGroupName=\"desktop\">\n                  <div class=\"nps_options\">\n                    <label class=\"add_ques_label nps_label\">Selection Type</label>\n                    <span class=\"nps_custom_select_div\">\n                      <select class=\"nps_custom_select\" #npsTypeSelect (change)=\"setNpsType(npsTypeSelect.value)\" formControlName=\"type\">\n                        <option *ngFor=\"let item of questionTypesRelatedData.nps | keys\" [value]=\"item\">{{questionTypesRelatedData.nps[item].text}}</option>\n                      </select>\n                    </span>\n                  </div>\n                  <div class=\"pull-right\" [hidden]=\"(completeQuestion.data.get('properties.nps.desktop.type').value == 'slider')\">\n                    <span class=\"custom_radio_grp\">\n                      <label class=\"add_ques_label\">\n                        <input type=\"radio\" name=\"dColor\" [value]=\"true\" formControlName=\"dColor\">\n                        <span class=\"custom_radio_txt\">Color</span>\n                      </label>\n                    </span>\n                    <span class=\"custom_radio_grp\">\n                      <label class=\"add_ques_label\">\n                        <input type=\"radio\" name=\"dColor\" [value]=\"false\" formControlName=\"dColor\">\n                        <span class=\"custom_radio_txt\">No Color</span>\n                      </label>\n                    </span>\n                  </div>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n            <div class=\"nps_text_labels\">\n              <div><label class=\"add_ques_label\">Labels</label></div>\n              <div>\n                <input type=\"text\" class=\"small_custom_input\" #npsLabelFirst [ngModel]=\"getTextOfNpsLabel(completeQuestion.data.get('fieldOptions.col').at(0).get('text').value)\" [ngModelOptions]=\"{standalone: true}\" (keyup)=\"changeNpsLabel('first',npsLabelFirst.value)\">\n                <input type=\"text\" class=\"small_custom_input pull-right\" #npsLabelLast [ngModel]=\"getTextOfNpsLabel(completeQuestion.data.get('fieldOptions.col').at(10).get('text').value)\" [ngModelOptions]=\"{standalone: true}\" (keyup)=\"changeNpsLabel('last',npsLabelLast.value)\">\n              </div>\n            </div>\n          </div>\n\n          <div class=\"ans_settings_div\" *ngIf=\"(selQuesType.type=='graph-rating')\">\n            <div class=\"ans_settings_div\">\n              <label class=\"add_ques_label\">Rating Type</label>\n              <div class=\"color_picker_outer_span\"  *ngIf=\"graphicalOptions.displayColorPicker\">\n                <span class=\"color_picker_inner_span\">\n                  <input class=\"color_picker_input\" [(colorPicker)]=\"graphicalOptions.colorPickerValue\" [style.background]=\"graphicalOptions.colorPickerValue\" [cpOKButton]=\"true\" [cpSaveClickOutside]=\"false\" (colorPickerChange)=\"setGraphicalRatingColor($event);\"/>\n                </span>\n                <span class=\"color_picker_inner_span\">\n                  <label class=\"add_ques_label\">Color</label>\n                </span>\n              </div>\n              <div class=\"rating_type_outer_span\">\n                <div class=\"btn-group rating_type_div\" dropdown>\n                  <button dropdownToggle type=\"button\" class=\"btn rating_type_btn dropdown-toggle\">\n                    <span><img [src]=\"graphicalOptions.icon\"></span>\n                    <span>{{questionTypesRelatedData.graphicalRatingTypeJSON[graphicalOptions.text].text}}</span>\n                    <span class=\"rating_types_dd_arrow\"></span>\n                  </button>\n                  <ul *dropdownMenu class=\"dropdown-menu\" role=\"menu\">\n                    <li role=\"menuitem\" *ngFor=\"let item of questionTypesRelatedData.graphicalRatingTypeJSON | keys\" (click)=\"setGraphicalRatingType(item)\">\n                      <a class=\"dropdown-item\">\n                        <span><img [src]=\"questionTypesRelatedData.graphicalRatingTypeJSON[item].iconActive\"></span>\n                        <span>{{questionTypesRelatedData.graphicalRatingTypeJSON[item].text}}</span>\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n            <div class=\"ans_settings_div\" *ngIf=\"graphicalOptions.text == 'emojis' || graphicalOptions.text == 'slider'\">\n              <label class=\"add_ques_label\">{{graphicalOptions.text | titlecase}} Type</label>\n              <div class=\"emojis_type_outer_span\">\n                <div class=\"btn-group emojis_type_div\" dropdown>\n                  <button dropdownToggle type=\"button\" class=\"btn emojis_type_btn dropdown-toggle\">\n                    <span><img [src]=\"graphicalOptions.typeIcon\"></span>\n                    <span>{{graphicalOptions.typeOpts[graphicalOptions.type]?.text}}</span>\n                    <span class=\"rating_types_dd_arrow\"></span>\n                  </button>\n                  <ul *dropdownMenu class=\"dropdown-menu\" role=\"menu\">\n                    <li role=\"menuitem\" *ngFor=\"let item of graphicalOptions.typeOpts | keys\" (click)=\"setSubRatingType(item)\">\n                      <a class=\"dropdown-item\">\n                        <span><img [src]=\"graphicalOptions.typeOpts[item]?.icon\"></span>\n                        <span>{{graphicalOptions.typeOpts[item].text}}</span>\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n            <div class=\"rating_count\" *ngIf=\"graphicalOptions.displayCountSlider\">\n              <div>\n                <label class=\"add_ques_label\">Numbers of Rating</label>\n              </div>\n              <div class=\"graphical_rating_slider\" *ngIf=\"rateVisible\">\n                <nouislider [config]=\"graphicalOptions.ratingCountObj['graphicalSliderConfig']\" [(ngModel)]=\"graphicalOptions.rating\" [ngModelOptions]=\"{standalone: true}\" (change)=\"setGraphicalRatingCount(graphicalOptions.rating)\"></nouislider>\n                <div class=\"noUi-horizontal custom_tooltip\">\n                  <div class=\"noUi-base\">\n                  <div class=\"noUi-connect\" [ngStyle]=\"{'left': '0%', 'right': 'calc(' + graphicalOptions.ratingCountObj.diff + ' * ' + (graphicalOptions.ratingCountObj.highLimit - graphicalOptions.rating) + ')'}\"></div>\n                    <div class=\"noUi-origin\" [ngStyle]=\"{'left': 'calc(' + graphicalOptions.ratingCountObj.diff + ' * ' + (graphicalOptions.rating - graphicalOptions.ratingCountObj.lowLimit) + ')'}\">\n                      <div class=\"noUi-handle noUi-handle-lower custom_circle\" [ngStyle]=\"{'padding': 0, 'top': '-6px', 'left': '-9px'}\">\n                        <div class=\"custom_inner_circle text-center\">{{graphicalOptions.rating}}</div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"noUi-pips noUi-pips-horizontal\">\n                    <ng-container *ngFor=\"let item of graphicalOptions.ratingCountObj.pipsArr;index as idx\">\n                      <div class=\"noUi-value noUi-value-horizontal noUi-value-large\" [hidden]=\"idx == (graphicalOptions.rating - graphicalOptions.ratingCountObj.lowLimit)\" [ngStyle]=\"{'left': 'calc(' + graphicalOptions.ratingCountObj.diff + ' * ' + idx + ')'}\">\n                        <div class=\"slider_color_circle\"></div>\n                      </div>\n                    </ng-container>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"ifDisplay.sliderOptions\" class=\"left_sidebar_box\">\n        <div class=\"left_sidebar_heading\">\n          <span>\n            Slider Options\n          </span>\n        </div>\n        <div class=\"left_sidebar_inner_divs\">\n          <div class=\"ans_settings_div\" formGroupName=\"properties\">\n            <label class=\"add_ques_label\">Type</label>\n            <div>\n              <select #sliderValType class=\"custom_select_line width100\" formControlName=\"valType\" (change)=\"changeSliderValType(sliderValType.value)\">\n                <option *ngFor=\"let type of questionTypesRelatedData.slider.valType | keys\" [value]=\"type\">{{questionTypesRelatedData.slider.valType[type].text}}</option>\n              </select>\n            </div>\n          </div>\n          <div class=\"ans_settings_div\">\n            <label class=\"add_ques_label\">Choice</label>\n            <div class=\"slider_type_inp\">\n              <label>\n                <input type=\"radio\" name=\"sliderType\" value=\"type1\"\n                  [checked]=\"completeQuestion.data.get('fieldOptions.row').at(0).get('optType.subtype').value == 'type1'\"\n                  (click)=\"changeSliderDesign('type1')\">\n                <span class=\"slider_types\" [ngClass]=\"completeQuestion.data.get('fieldOptions.row').at(0).get('optType.subtype').value == 'type1' ? 'slider_type1_active' : 'slider_type1'\"></span>\n              </label>\n              <label class=\"pull-right\">\n                <input type=\"radio\" name=\"sliderType\" value=\"type2\"\n                  [checked]=\"completeQuestion.data.get('fieldOptions.row').at(0).get('optType.subtype').value == 'type2'\"\n                  (click)=\"changeSliderDesign('type2')\">\n                <span class=\"slider_types\" [ngClass]=\"completeQuestion.data.get('fieldOptions.row').at(0).get('optType.subtype').value == 'type2' ? 'slider_type2_active' : 'slider_type2'\"></span>\n              </label>\n            </div>\n            <div class=\"slider_type_inp\">\n              <label class=\"text-center\">\n                <input type=\"radio\" name=\"sliderType\" value=\"type3\"\n                  [checked]=\"completeQuestion.data.get('fieldOptions.row').at(0).get('optType.subtype').value == 'type3'\"\n                  (click)=\"changeSliderDesign('type3')\">\n                <span class=\"slider_types\" [ngClass]=\"completeQuestion.data.get('fieldOptions.row').at(0).get('optType.subtype').value == 'type3' ? 'slider_type3_active' : 'slider_type3'\"></span>\n              </label>\n            </div>\n          </div>\n          <div class=\"ans_settings_div\" formGroupName=\"properties\">\n            <label class=\"add_ques_label\">Label</label>\n            <div>\n              <span>\n                <input class=\"small_custom_input\" formControlName=\"minLabel\">\n              </span>\n              <span class=\"pull-right\">\n                <input class=\"small_custom_input\" formControlName=\"maxLabel\">\n              </span>\n            </div>\n          </div>\n          <div *ngIf=\"sliderValType.value == 'discrete'\" formGroupName=\"properties\">\n            <div class=\"ans_settings_div\">\n              <label class=\"add_ques_label\">Allow Values Between</label>\n              <div>\n                <span>\n                  <input class=\"small_custom_input\" formControlName=\"minValue\">\n                </span>\n                <span class=\"pull-right\">\n                  <input class=\"small_custom_input\" formControlName=\"maxValue\">\n                </span>\n              </div>\n            </div>\n            <div class=\"ans_settings_div\">\n              <label class=\"add_ques_label\">Increment Value</label>\n              <div>\n                <input class=\"custom_input_line\" formControlName=\"step\">\n              </div>\n            </div>\n            <div class=\"ans_settings_div\">\n              <label class=\"add_ques_label\">Custom Start Value</label>\n              <div>\n                <input class=\"custom_input_line\" formControlName=\"start\">\n              </div>\n            </div>\n          </div>\n          <div class=\"slider_preview_div\" [hidden]=\"sliderValType.value == 'continous'\">\n            <button class=\"slider_preview_btn\" (click)=\"checkValidSlider()\">Preview Slider</button>\n          </div>\n        </div>\n      </div>\n\n\t\t\t<div [hidden]=\"!(ifDisplay.answerChoices)\" formGroupName=\"fieldOptions\" class=\"left_sidebar_box\">\n\t\t\t\t<div class=\"left_sidebar_heading\">\n\t\t\t\t\t<span [hidden]=\"(selQuesType.type == 'comment' || selQuesType.type == 'single-text')\">\n\t\t\t\t\t\tAnswer Choices\n            <span class=\"add_span\" [hidden]=\"completeQuestion.data.get('fieldOptions.row').length\" (click)=\"addAnswerOption('row', 0)\">+</span>\n\t\t\t\t\t</span>\n          <span [hidden]=\"!(selQuesType.type == 'comment' || selQuesType.type == 'single-text')\">\n\t\t\t\t\t\tPlaceholder\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"left_sidebar_inner_divs\" *ngIf=\"ifDisplay.row && selQuesType.type != 'slider'\" formArrayName=\"row\">\n\t\t\t\t\t<div [hidden]=\"!(ifDisplay.row && ifDisplay.col)\">\n            <ng-container *ngIf=\"(selQuesType.type != 'graph-rating')\"><span class=\"row_col_text\">Rows</span></ng-container>\n\t\t\t\t\t\t<ng-container *ngIf=\"(selQuesType.type == 'graph-rating')\">\n  \t\t\t\t\t\t<span class=\"custom_checkbox_grp\"><label class=\"col_label\"><input type=\"checkbox\" (change)=\"allowLabels($event, 'row')\" [checked]=\"completeQuestion.data.get('properties.allowRowLabels').value\"><span class=\"custom_checkbox_txt\">Rows</span></label></span>\n            </ng-container>\n\t\t\t\t\t</div>\n          <div *ngIf=\"(completeQuestion.data.get('properties.allowRowLabels') && (completeQuestion.data.get('properties.allowRowLabels').value) || (selQuesType.type != 'graph-rating'))\">\n            <div [dragula]=\"'bag'\" [dragulaModel]=\"completeQuestion.data.get('fieldOptions.row').controls\">\n    \t\t\t\t\t<div class=\"ans_option_div\" *ngFor = \"let ans of completeQuestion.data.get('fieldOptions.row')?.controls; index as idx;\" [formGroupName]=\"idx\">\n                <div *ngIf=\"ans.get('isNa').value == 0 && selQuesType.type != 'slider'\">\n                  <span class=\"opt_move_icon\"></span>\n                  <span class=\"opt_arrow_icon\"></span>\n                  <span class=\"textarea_expanded\">\n                    <app-textarea-expanded\n                      formControlName=\"text\"\n                      (copy)=\"onCopy($event)\"\n                      (paste)=\"onPaste($event,'row',idx)\"\n                      (keydown)=\"onEventInFormControl($event,'row',idx)\"\n                      (onBlurEvt)=\"reflectChangesToQuesTemps()\">\n                    </app-textarea-expanded>\n                  </span>\n                  <span class=\"opt_more_icon\"\n                    [ngClass]=\"{'strictly_show': (moreRowColOpts.inp.idx === idx && moreRowColOpts.inp.rowOrCol == 'row')}\"\n                    (click)=\"openMoreOptions($event, 'row', ans, idx)\"\n                    title=\"Option Settings\">\n                  </span>\n                </div>\n    \t\t\t\t\t</div>\n            </div>\n            <ng-container *ngIf=\"completeQuestion.data.get('fieldOptions.row').at(completeQuestion.data.get('fieldOptions.row').length - 1)\">\n              <div class=\"na_opt_div\" *ngIf=\"completeQuestion.data.get('fieldOptions.row').at(completeQuestion.data.get('fieldOptions.row').length - 1).get('isNa').value\">\n                <div [formGroupName]=\"completeQuestion.data.get('fieldOptions.row').length - 1\">\n                  <span class=\"opt_move_icon na_move\"></span>\n                  <span class=\"opt_arrow_icon\"></span>\n                  <span class=\"textarea_expanded\">\n                    <app-textarea-expanded\n                      formControlName=\"text\"\n                      (copy)=\"onCopy($event)\"\n                      (paste)=\"onPaste($event,'row',completeQuestion.data.get('fieldOptions.row').length - 1)\"\n                      (keydown)=\"onEventInFormControl($event,'row',completeQuestion.data.get('fieldOptions.row').length - 1)\"\n                      (onBlurEvt)=\"reflectChangesToQuesTemps()\">\n                    </app-textarea-expanded>\n                  </span>\n                  <span class=\"opt_more_icon\"\n                    [ngClass]=\"{'strictly_show': moreRowColOpts.inp.idx === (completeQuestion.data.get('fieldOptions.row').length - 1)}\"\n                    (click)=\"openMoreOptions($event, 'row',\n                      completeQuestion.data.get('fieldOptions.row').at(completeQuestion.data.get('fieldOptions.row').length - 1),\n                      completeQuestion.data.get('fieldOptions.row').length - 1\n                    )\">\n                  </span>\n                </div>\n              </div>\n            </ng-container>\n          </div>\n\t\t\t\t\t<div class=\"na_row_padding\" [hidden]=\"(selQuesType.type=='comment' || selQuesType.type=='single-text' || selQuesType.type=='contacts')\">\n\t\t\t\t\t\t<div *ngIf=\"!ifDisplay.notDisplayIsNaRow && completeQuestion.data.get('fieldOptions.row').length\" class=\"ans_settings_div\">\n  \t\t\t\t\t\t<label class=\"add_ques_label\">Add N/A row</label>\n              <label class=\"switch pull-right\">\n  \t\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" (change)=\"addNaOption($event,'row')\"\n                  [checked]=\"completeQuestion.data.get('fieldOptions.row').at(completeQuestion.data.get('fieldOptions.row').length - 1).get('isNa').value\">\n  \t\t\t\t\t\t\t<span class=\"slider round\"></span>\n  \t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div *ngIf=\"(selQuesType.type == 'ranking')\">\n              <div *ngIf=\"completeQuestion.data.get('fieldOptions.col').length\" class=\"ans_settings_div\">\n                <label class=\"add_ques_label\">\n                  Add N/A option\n                </label>\n                <label class=\"switch pull-right\">\n                  <input type=\"checkbox\" class=\"on_off_custom\" (change)=\"addNaOption($event,'col')\"\n                    [checked]=\"completeQuestion.data.get('fieldOptions.col').at(completeQuestion.data.get('fieldOptions.col').length - 1).get('isNa').value\">\n                  <span class=\"slider round\"></span>\n                </label>\n              </div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"left_sidebar_inner_divs\" *ngIf=\"ifDisplay.col\" formArrayName=\"col\">\n\t\t\t\t\t<div [hidden]=\"!(ifDisplay.row && ifDisplay.col) || selQuesType.type == 'slider'\">\n\t\t\t\t\t\t<ng-container *ngIf=\"(selQuesType.type != 'graph-rating')\"><span class=\"row_col_text\">Columns</span></ng-container>\n\t\t\t\t\t\t<ng-container *ngIf=\"(selQuesType.type == 'graph-rating')\">\n  \t\t\t\t\t\t<span class=\"custom_checkbox_grp\"><label class=\"col_label\"><input type=\"checkbox\" (change)=\"allowLabels($event, 'col')\" [checked]=\"completeQuestion.data.get('properties.allowColLabels').value\"><span class=\"custom_checkbox_txt\">Columns</span></label></span>\n            </ng-container>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"(completeQuestion.data.get('properties.allowColLabels') && (completeQuestion.data.get('properties.allowColLabels').value) || (selQuesType.type != 'graph-rating'))\">\n            <div [dragula]=\"'bag'\" [dragulaModel]=\"completeQuestion.data.get('fieldOptions.col').controls\">\n              <div class=\"ans_option_div\" *ngFor = \"let ans of completeQuestion.data.get('fieldOptions.col')?.controls; index as idx\" [formGroupName]=\"idx\">\n                <div *ngIf=\"ans.get('isNa').value == 0 && selQuesType.type!='slider'\">\n                  <span class=\"opt_move_icon\"></span>\n                  <span class=\"opt_arrow_icon\"></span>\n                  <span class=\"textarea_expanded\">\n                    <app-textarea-expanded\n                      formControlName=\"text\"\n                      (copy)=\"onCopy($event)\"\n                      (paste)=\"onPaste($event,'col',idx)\"\n                      (keydown)=\"onEventInFormControl($event,'col',idx)\">\n                    </app-textarea-expanded>\n                  </span>\n                  <span class=\"opt_more_icon\"\n                    [ngClass]=\"{'strictly_show': (moreRowColOpts.inp.idx === idx && moreRowColOpts.inp.rowOrCol == 'col')}\"\n                    (click)=\"openMoreOptions($event, 'col', ans, idx)\">\n                  </span>\n                </div>\n  \t\t\t\t\t\t</div>\n            </div>\n            <div class=\"na_opt_div\" *ngIf=\"completeQuestion.data.get('fieldOptions.col').at(completeQuestion.data.get('fieldOptions.col').length - 1).get('isNa').value\">\n              <div [formGroupName]=\"completeQuestion.data.get('fieldOptions.col').length - 1\">\n                <span class=\"opt_move_icon na_move\"></span>\n                <span class=\"opt_arrow_icon\"></span>\n                <span class=\"textarea_expanded\">\n                  <app-textarea-expanded\n                    formControlName=\"text\"\n                    (copy)=\"onCopy($event)\"\n                    (paste)=\"onPaste($event,'col',completeQuestion.data.get('fieldOptions.col').length - 1)\"\n                    (keydown)=\"onEventInFormControl($event,'col',completeQuestion.data.get('fieldOptions.col').length - 1)\">\n                  </app-textarea-expanded>\n                </span>\n                <span class=\"opt_more_icon\"\n                  [ngClass]=\"{'strictly_show': moreRowColOpts.inp.idx === (completeQuestion.data.get('fieldOptions.col').length - 1)}\"\n                  (click)=\"openMoreOptions($event, 'col',\n                    completeQuestion.data.get('fieldOptions.col').at(completeQuestion.data.get('fieldOptions.col').length - 1),\n                    completeQuestion.data.get('fieldOptions.col').length - 1\n                  )\">\n                </span>\n              </div>\n            </div>\n\t\t\t\t\t</div>\n          <div class=\"na_row_padding\" [hidden]=\"ifDisplay.notDisplayIsNaCol\">\n            <div *ngIf=\"completeQuestion.data.get('fieldOptions.col').length\" class=\"ans_settings_div\">\n              <label class=\"add_ques_label\">\n                {{selQuesType.type=='slider' ? 'Add N/A column' : 'Add N/A option'}}\n              </label>\n              <label class=\"switch pull-right\">\n                <input type=\"checkbox\" class=\"on_off_custom\" (change)=\"addNaOption($event,'col')\" [checked]=\"completeQuestion.data.get('fieldOptions.col').at(completeQuestion.data.get('fieldOptions.col').length - 1).get('isNa').value\">\n                <span class=\"slider round\"></span>\n              </label>\n            </div>\n          </div>\n          <div *ngIf=\"(completeQuestion.data.get('properties.allowColLabels') && completeQuestion.data.get('properties.allowColLabels').value) || (selQuesType.type == 'graph-rating')\" class=\"ans_settings_div\">\n            <label class=\"add_ques_label\">Column Labels below icons</label>\n            <label class=\"switch pull-right\">\n              <input type=\"checkbox\" class=\"on_off_custom\" (change)=\"colLabelsAtTop($event)\" [checked]=\"!completeQuestion.data.get('properties.colLabelsTop').value\">\n              <span class=\"slider round\"></span>\n            </label>\n          </div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div [hidden]=\"(selQuesType.type == 'statement')\" class=\"left_sidebar_box\">\n\t\t\t\t<div class=\"left_sidebar_heading\">\n\t\t\t\t\tSettings\n\t\t\t\t</div>\n\t\t\t\t<div class=\"left_sidebar_inner_divs\">\n\t\t\t\t\t<div class=\"ans_settings_div\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<label class=\"add_ques_label\">Required</label>\n\t\t\t\t\t\t\t<label class=\"switch pull-right\">\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" formControlName=\"required\">\n\t\t\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"ans_settings_div\" [hidden]=\"!(completeQuestion.data.get('required')._value)\">\n\t\t\t\t\t\t\t<input type=\"text\" class=\"custom_input_line\" formControlName=\"reqMsg\" placeholder=\"Enter required message\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n          <div *ngIf=\"selQuesType.type == 'mul-text'\" class=\"ans_settings_div\" formGroupName=\"validation\">\n            <div>\n  \t\t\t\t\t\t<label class=\"add_ques_label\">Sum of All Input Boxes</label>\n  \t\t\t\t\t\t<label class=\"switch pull-right\">\n  \t\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" (change)=\"setSumAllMT($event)\" [checked]=\"sumAllMTPresent\">\n  \t\t\t\t\t\t\t<span class=\"slider round\"></span>\n  \t\t\t\t\t\t</label>\n            </div>\n            <div class=\"ans_settings_div\" *ngIf=\"sumAllMTPresent\">\n\t\t\t\t\t\t\t<input type=\"number\" formControlName=\"max\" class=\"custom_input_line\" placeholder=\"Enter a valid number\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"selQuesType.type == 'matrix-rating'\" class=\"ans_settings_div\">\n\t\t\t\t\t\t<label class=\"add_ques_label\">Multiple answers</label>\n\t\t\t\t\t\t<label class=\"switch pull-right\">\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" (change)=\"multipleAnsInMatrixRating($event)\" [checked]=\"completeQuestion.data.get('fieldType.subtype').value == 'checkbox'\">\n\t\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\n          <!-- <div *ngIf=\"ifDisplay.transposeRowAndCol\" class=\"ans_settings_div\">\n\t\t\t\t\t\t<label class=\"add_ques_label\">Transpose Rows and Columns</label>\n\t\t\t\t\t\t<label class=\"pull-right\">\n\t\t\t\t\t\t\t<img src=\"/assets/images/editSurvey/transpose.svg\" class=\"transpose_img\" (click)=\"transposeRowAndCol()\">\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div> -->\n\n          <div *ngIf=\"ifDisplay.forceDesktopView\" class=\"ans_settings_div\" formGroupName=\"properties\">\n\t\t\t\t\t\t<label class=\"add_ques_label\">Forcibly Desktop View</label>\n            <label class=\"switch pull-right\">\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" formControlName=\"forceDesktopView\">\n\t\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"(selQuesType.type) == 'date-time'\" class=\"ans_settings_div\">\n\t\t\t\t\t\t<div class=\"ans_settings_div\">\n\t\t\t\t\t\t\t<label class=\"add_ques_label\">Show</label>\n\t\t\t\t\t\t\t<span class=\"pull-right date_time_format\">\n\t\t\t\t\t\t\t\t<span class=\"custom_checkbox_grp\">\n                  <label class=\"date_show_lbl\">\n                    <input type=\"checkbox\" (change)=\"setSubTypeForDateTime($event,'dateOnly')\" [checked]=\"completeQuestion.data.get('fieldType.subtype').value == 'dateOnly' || completeQuestion.data.get('fieldType.subtype').value == 'both'\">\n                    <span class=\"custom_checkbox_txt\">Date</span>\n                  </label>\n                </span>\n\t\t\t\t\t\t\t\t<span class=\"custom_checkbox_grp\">\n                  <label class=\"date_show_lbl\">\n                    <input type=\"checkbox\" (change)=\"setSubTypeForDateTime($event,'timeOnly')\" [checked]=\"completeQuestion.data.get('fieldType.subtype').value == 'timeOnly' || completeQuestion.data.get('fieldType.subtype').value == 'both'\">\n                    <span class=\"custom_checkbox_txt\">Time</span>\n                  </label>\n                </span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"text-right\" *ngIf=\"(completeQuestion.data.get('fieldType.subtype').value == 'dateOnly' || completeQuestion.data.get('fieldType.subtype').value == 'both')\">\n\t\t\t\t\t\t\t<label class=\"pull-left add_ques_label\">Format</label>\n\t\t\t\t\t\t\t<span class=\"date_time_format\" formGroupName=\"validation\">\n                <span class=\"custom_radio_grp\">\n                  <label class=\"add_ques_label\">\n                    <input type=\"radio\" name=\"text\" value=\"date_intl\" formControlName=\"text\" [checked]=\"completeQuestion.data.get('validation.text') && completeQuestion.data.get('validation.text').value=='date_intl'\">\n                    <span class=\"custom_radio_txt\">DD/MM/YYYY</span>\n                  </label>\n                </span>\n                <span class=\"custom_radio_grp\">\n                  <label class=\"add_ques_label\">\n                    <input type=\"radio\" name=\"text\" value=\"date_us\" formControlName=\"text\" [checked]=\"completeQuestion.data.get('validation.text') && completeQuestion.data.get('validation.text').value=='date_us'\">\n                    <span class=\"custom_radio_txt\">MM/DD/YYYY</span>\n                  </label>\n                </span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"ifDisplay.forceAlignment\" class=\"ans_settings_div\">\n\t\t\t\t\t\t<label class=\"add_ques_label\">Forcibly vertical align</label>\n\t\t\t\t\t\t<label class=\"switch pull-right\">\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" (change)=\"setVerticalAlign($event)\" [checked]=\"completeQuestion.data.get('properties.align').value=='vertical'\">\n\t\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n          <div *ngIf=\"selQuesType.type == 'dropdown'\" class=\"ans_settings_div\">\n\t\t\t\t\t\t<label class=\"add_ques_label\">Alphabetic Order</label>\n\t\t\t\t\t\t<label class=\"switch pull-right\">\n\t\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" (change)=\"setOrderInDd($event)\" [checked]=\"completeQuestion.data.get('properties.order').value == 'asc'\">\n\t\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"selQuesType.type == 'file'\" formGroupName=\"fieldOptions\">\n            <div formArrayName=\"upload\">\n              <div *ngFor=\"let file of completeQuestion.data.get('fieldOptions.upload')?.controls; index as upload_idx\" [formGroupName]=\"upload_idx\">\n                <div formGroupName=\"fieldVald\">\n      \t\t\t\t\t\t<div class=\"ans_settings_div\">\n      \t\t\t\t\t\t\t<label class=\"add_ques_label\">File Type</label>\n      \t\t\t\t\t\t\t<div>\n                      <select #fileUploadType class=\"custom_select_line width100\" formControlName=\"fileType\" (change)=\"setFileFormat(fileUploadType.value)\">\n      \t\t\t\t\t\t\t\t\t<option *ngFor=\"let type of questionTypesRelatedData.fileUploadJSON | keys\" [value]=\"type\">{{questionTypesRelatedData.fileUploadJSON[type].text}}</option>\n      \t\t\t\t\t\t\t\t</select>\n      \t\t\t\t\t\t\t</div>\n      \t\t\t\t\t\t</div>\n      \t\t\t\t\t\t<div class=\"ans_settings_div\">\n      \t\t\t\t\t\t\t<label class=\"add_ques_label\">File Size</label>\n      \t\t\t\t\t\t\t<div>\n      \t\t\t\t\t\t\t\t<select class=\"custom_select_line width100\" formControlName=\"maxFileSize\">\n      \t\t\t\t\t\t\t\t\t<option *ngFor=\"let size of questionTypesRelatedData.fileUploadSizeJSON\" [value]=\"size\">{{size}}</option>\n      \t\t\t\t\t\t\t\t</select>\n      \t\t\t\t\t\t\t</div>\n      \t\t\t\t\t\t</div>\n                  <div class=\"ans_settings_div\">\n                    <label class=\"add_ques_label\">Supported File Extensions</label>\n                    <div>\n                      {{completeQuestion.data.get('fieldOptions.upload').at(0).get('fieldVald.format').value}}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\t\t\t\t\t</div>\n          <div *ngIf=\"selQuesType.type == 'slider'\" formGroupName=\"properties\">\n            <div class=\"ans_settings_div\">\n  \t\t\t\t\t\t<label class=\"add_ques_label\">Field Input</label>\n  \t\t\t\t\t\t<label class=\"switch pull-right\">\n  \t\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" formControlName=\"showInput\">\n  \t\t\t\t\t\t\t<span class=\"slider round\"></span>\n  \t\t\t\t\t\t</label>\n  \t\t\t\t\t</div>\n          </div>\n          <div *ngIf=\"selQuesType.type == 'nps'\" class=\"ans_settings_div\" formGroupName=\"properties\">\n            <ng-container formGroupName=\"nps\">\n  \t\t\t\t\t\t<label class=\"add_ques_label\">Different View On Mobile</label>\n  \t\t\t\t\t\t<label class=\"switch pull-right\">\n  \t\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" formControlName=\"differentView\">\n  \t\t\t\t\t\t\t<span class=\"slider round\"></span>\n  \t\t\t\t\t\t</label>\n              <ng-container *ngIf=\"(completeQuestion.data.get('properties.nps.differentView').value)\" formGroupName=\"mobile\">\n                <div class=\"nps_options\">\n                  <label class=\"add_ques_label nps_label\">Mobile Selection Type</label>\n                  <span class=\"nps_custom_select_div\">\n                    <select class=\"nps_custom_select\" #npsTypeSelect (change)=\"setNpsType(npsTypeSelect.value)\" formControlName=\"type\">\n                      <option *ngFor=\"let item of questionTypesRelatedData.nps | keys\" [value]=\"item\">{{questionTypesRelatedData.nps[item].text}}</option>\n                    </select>\n                  </span>\n                </div>\n                <div class=\"pull-right\" [hidden]=\"(completeQuestion.data.get('properties.nps.mobile.type').value == 'slider')\">\n                  <span class=\"custom_radio_grp\">\n                    <label class=\"add_ques_label\">\n                      <input type=\"radio\" name=\"mColor\" [value]=\"true\" formControlName=\"mColor\">\n                      <span class=\"custom_radio_txt\">Color</span>\n                    </label>\n                  </span>\n                  <span class=\"custom_radio_grp\">\n                    <label class=\"add_ques_label\">\n                      <input type=\"radio\" name=\"mColor\" [value]=\"false\" formControlName=\"mColor\">\n                      <span class=\"custom_radio_txt\">No Color</span>\n                    </label>\n                  </span>\n                </div>\n              </ng-container>\n            </ng-container>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n      <div [ngStyle]=\"{'display': moreRowColOpts.position.display, 'position': 'absolute', 'right': moreRowColOpts.position.x + 'px', 'top': moreRowColOpts.position.y + 'px'}\">\n        <div *ngIf=\"moreRowColOpts.display\">\n          <app-row-col-options\n            [moreOptsInp]=\"moreRowColOpts.inp\"\n            (onSelect)=\"onSelRowColOpts($event)\">\n          </app-row-col-options>\n        </div>\n      </div>\n\t\t</div>\n\t\t<div class=\"left_sidebar_footer\" [ngClass]=\"{'text-center': questionId != 'qid'}\">\n\t\t\t<button class=\"btn s2c_save_btn\" type=\"button\" [disabled]=\"blockBtn.action\" (click)=\"saveOrUpdateQuestion()\">{{questionId != 'qid' ? 'Update' : 'Save' }}</button>\n\t\t\t<button class=\"btn s2c_cancel_btn\" [disabled]=\"blockBtn.action\" [hidden]=\"questionId != 'qid'\" type=\"button\" (click)=\"saveOrUpdateQuestion('new')\">Save & Create New</button>\n\t\t\t<button class=\"btn left_ques_cancel_btn\" [disabled]=\"blockBtn.action\" type=\"button\" (click)=\"cancelQuestion()\">Cancel</button>\n\t\t</div>\n\n    <ng-template #insertPipingModal>\n\t\t  <div class=\"modal-header\">\n\t\t    <div class=\"modal-title pull-left\">\n          <h4>Add Piping</h4>\n        </div>\n\t\t    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n\t\t      <span aria-hidden=\"true\">&times;</span>\n\t\t    </button>\n\t\t  </div>\n\t\t  <div class=\"modal-body\">\n        <div class=\"modal_inner_body\">\n          <app-question-piping (onPipingDone)=\"onPipingDone()\" (cancelPiping)=\"hideModal()\"></app-question-piping>\n        </div>\n\t\t  </div>\n\t\t</ng-template>\n\n    <ng-template #uploadImageModal>\n\t\t  <div class=\"modal-header\">\n\t\t    <div class=\"modal-title pull-left\">\n          <h4>Upload Image</h4>\n        </div>\n\t\t    <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n\t\t      <span aria-hidden=\"true\">&times;</span>\n\t\t    </button>\n\t\t  </div>\n\t\t  <div class=\"modal-body\">\n        <div class=\"modal_inner_body\">\n  \t\t\t\t<div>\n            <app-image-upload [imgUploadInp]=\"{'cropping': true}\" (onDoneImageSelect)=\"onDoneImageSelect($event)\"></app-image-upload>\n  \t\t\t\t</div>\n        </div>\n\t\t  </div>\n\t\t</ng-template>\n\t</div>\n</div>\n\n<div class=\"right-container\">\n  <div class=\"new_ques_div\">\n    <div class=\"hasResponse_div\" [hidden]=\"!hasResponse\">\n      <span class=\"hasRes_title\">RESPONSES COLLECTED : </span>\n      <span>Changes to this question will be limited</span>\n    </div>\n    <div class=\"ques_edit_area\">\n      <app-question-template [questionData]=\"{'count':'', 'form': {data: completeQuestion, type: selQuesType}, 'changesInChild': changesToChildComp}\" [rateVisible]=\"rateVisible\"></app-question-template>\n    </div>\n  </div>\n</div>\n</ng-container>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.component.scss":
/***/ (function(module, exports) {

module.exports = ".new_ques_div {\n  background-color: white;\n  padding: 40px;\n  min-height: calc(100vh - 140px);\n  margin: 40px 25px; }\n\n.hasResponse_div {\n  color: #6a6b4d;\n  background-color: #f0f1d8;\n  border: 1px solid #d8daae;\n  width: 100%;\n  padding: 10px;\n  border-radius: 4px;\n  font-family: 'Helvetica Neue Medium'; }\n\n.hasResponse_div .hasRes_title {\n    font-family: 'Helvetica Neue Bold'; }\n\n.ques_edit_area {\n  margin-top: 80px; }\n\n.slider_preview_div {\n  text-align: right; }\n\n.slider_preview_div .slider_preview_btn {\n    background-color: white;\n    font-size: 12px;\n    font-family: 'Helvetica Neue Medium';\n    color: #2392ed;\n    border: 0; }\n\n.slider_type_inp input[type=radio] {\n  display: none; }\n\n.slider_type_inp .slider_types {\n  cursor: pointer;\n  height: 28px;\n  display: inline-block;\n  width: 125px; }\n\n.slider_type_inp .slider_type1 {\n  background: url(/assets/images/editSurvey/slider-type1.svg);\n  background-repeat: no-repeat;\n  background-size: 125px; }\n\n.slider_type_inp .slider_type1_active {\n  background: url(/assets/images/editSurvey/slider-type1-active.svg);\n  background-repeat: no-repeat;\n  background-size: 125px; }\n\n.slider_type_inp .slider_type2 {\n  background: url(/assets/images/editSurvey/slider-type2.svg);\n  background-repeat: no-repeat;\n  background-size: 125px; }\n\n.slider_type_inp .slider_type2_active {\n  background: url(/assets/images/editSurvey/slider-type2-active.svg);\n  background-repeat: no-repeat;\n  background-size: 125px; }\n\n.slider_type_inp .slider_type3 {\n  background: url(/assets/images/editSurvey/slider-type3.svg);\n  background-repeat: no-repeat;\n  background-size: 125px; }\n\n.slider_type_inp .slider_type3_active {\n  background: url(/assets/images/editSurvey/slider-type3-active.svg);\n  background-repeat: no-repeat;\n  background-size: 125px; }\n\n.left_sidebar_ques_options {\n  height: calc(100vh - 136px);\n  overflow-y: auto;\n  position: relative; }\n\n.row_col_text {\n  font-family: 'Helvetica Neue Medium';\n  font-size: 14px;\n  display: inline-block;\n  margin-bottom: 6px; }\n\n.tinymce-small {\n  display: inline-block;\n  margin-bottom: 15px; }\n\n.left_sidebar_box {\n  margin-bottom: 15px; }\n\n.left_sidebar_inner_divs {\n  padding: 5px 20px;\n  position: relative; }\n\n.left_sidebar_heading {\n  font-size: 14px;\n  height: 30px;\n  line-height: 19px;\n  font-family: 'Helvetica Neue Medium';\n  padding: 5px 20px;\n  display: inline-block;\n  text-transform: uppercase; }\n\n.ques_select_dropdown_div {\n  width: 100%; }\n\n.ques_select_dropdown_div .dropdown-menu {\n  width: 100%; }\n\n.ques_select_dropdown_div img {\n  height: 20px;\n  width: 20px;\n  margin-right: 6px;\n  margin-top: -4px; }\n\n.ques_select_dropdown_div .ques_dd_text {\n  display: inline-block;\n  margin-top: 2px; }\n\n.ques_select_dropdown_div li {\n  cursor: pointer; }\n\n.ques_select_dropdown {\n  height: 50px;\n  width: 100%;\n  background-color: #F5F5F5;\n  border-radius: 0;\n  font-size: 14px;\n  font-family: 'Helvetica Neue Medium';\n  padding: 15px 20px;\n  text-align: left;\n  border-top: 1px solid #DDDDDD;\n  border-bottom: 1px solid #DDDDDD; }\n\n.ques_select_dropdown:active,\n.ques_select_dropdown_div.btn-group.open .dropdown-toggle {\n  -webkit-box-shadow: none;\n          box-shadow: none; }\n\n.ques_select_dropdown_arrow:after {\n  content: '';\n  background: url(/assets/images/editSurvey/dropdown-arrow.svg);\n  background-repeat: no-repeat;\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  right: 10px;\n  bottom: 8px; }\n\n.ques_textarea {\n  width: 100%;\n  border-radius: 4px;\n  resize: vertical;\n  margin: 7px 0; }\n\n.tinymce_span_label {\n  position: absolute;\n  z-index: 1;\n  font-family: 'Helvetica Neue Medium';\n  margin-top: 2px;\n  background-color: #e3f1fe;\n  padding: 2px 8px; }\n\n.col_label {\n  font-weight: 500; }\n\n.add_ques_label {\n  font-size: 12px;\n  color: #5b5b5b;\n  line-height: 16px;\n  vertical-align: middle;\n  font-weight: 500;\n  font-family: 'Helvetica Neue Medium'; }\n\n.ans_option_div {\n  margin-bottom: 5px;\n  position: relative; }\n\n.opt_move_icon {\n  background: url(/assets/images/editSurvey/option-list.svg);\n  cursor: move;\n  height: 16px;\n  margin-top: 2px;\n  vertical-align: top;\n  display: inline-block;\n  width: 14px;\n  background-repeat: no-repeat; }\n\n.opt_move_icon.na_move {\n    cursor: default; }\n\n.opt_arrow_icon {\n  background: url(/assets/images/editSurvey/question-arrow.svg);\n  cursor: pointer;\n  height: 6px;\n  margin-top: 6px;\n  vertical-align: top;\n  display: inline-block;\n  width: 12px;\n  background-repeat: no-repeat; }\n\n.opt_more_icon {\n  background: url(/assets/images/editSurvey/option-more.svg);\n  cursor: pointer;\n  height: 36px;\n  background-size: 34px;\n  display: inline-block;\n  width: 46px;\n  background-repeat: no-repeat;\n  position: absolute;\n  top: -2px;\n  right: -10px;\n  display: none; }\n\n.ans_option_div:hover .opt_more_icon {\n  display: block; }\n\n.strictly_show {\n  display: block; }\n\n.textarea_expanded {\n  width: calc(100% - 50px);\n  display: inline-block; }\n\n.additional_text_div {\n  background-color: #F5F5F5;\n  border: 1px solid #E0E0E0;\n  padding: 20px 15px;\n  font-size: 12px;\n  display: table;\n  width: 100%; }\n\n.additional_text_div .additional_text_vald {\n    color: #4393E6;\n    font-family: 'Helvetica Neue Medium';\n    float: right;\n    margin-top: 8px; }\n\n.additional_text_div .addtn_txt_row {\n    display: table-row; }\n\n.additional_text_div .addtn_txt_col1 {\n    display: table-cell;\n    text-align: right;\n    padding: 5px; }\n\n.additional_text_div .addtn_txt_col2 {\n    display: table-cell;\n    padding: 5px; }\n\n.additional_text_div .addtn_vald_type {\n    display: inline-block;\n    vertical-align: middle; }\n\n.additional_text_div .add_text_radio {\n    border: 1px solid #2392ED;\n    border-radius: 4px;\n    display: table;\n    background-color: white; }\n\n.additional_text_div .add_text_radio > .inner_add_text_radio {\n    padding: 6px 8px;\n    display: table-cell;\n    cursor: pointer;\n    font-family: 'Helvetica Neue Medium';\n    font-weight: 500; }\n\n.additional_text_div .add_text_radio > .inner_add_text_radio input[type=radio] {\n    display: none; }\n\n.additional_text_div .add_text_radio > .inner_add_text_radio:not(:last-child) {\n    border-right: 1px solid #2392ED; }\n\n.additional_text_div .add_text_radio > .inner_add_text_radio.active {\n    color: white;\n    background-color: #2392ED; }\n\n.rating_type_div,\n.emojis_type_div {\n  margin-top: -5px;\n  margin-left: 2px; }\n\n.rating_type_div .dropdown-menu,\n  .emojis_type_div .dropdown-menu {\n    left: auto;\n    right: 0; }\n\n.rating_type_div img,\n  .emojis_type_div img {\n    height: 15px;\n    width: 15px;\n    margin-right: 6px;\n    margin-top: -3px; }\n\n.rating_type_div li,\n  .emojis_type_div li {\n    cursor: pointer; }\n\n.rating_type_div .rating_type_btn,\n  .emojis_type_div .rating_type_btn {\n    height: 26px;\n    width: 100px;\n    background-color: white;\n    border: 1px solid #B3B1B1;\n    border-radius: 4px;\n    font-size: 12px;\n    font-family: 'Helvetica Neue Medium';\n    padding: 4px;\n    text-align: left; }\n\n.rating_type_div .emojis_type_btn,\n  .emojis_type_div .emojis_type_btn {\n    height: 26px;\n    width: 160px;\n    background-color: white;\n    border: 1px solid #B3B1B1;\n    border-radius: 4px;\n    font-size: 12px;\n    font-family: 'Helvetica Neue Medium';\n    padding: 4px;\n    text-align: left; }\n\n.rating_type_div .rating_types_dd_arrow::before,\n  .emojis_type_div .rating_types_dd_arrow::before {\n    content: '';\n    background: url(/assets/images/editSurvey/dropdown-arrow.svg);\n    background-repeat: no-repeat;\n    width: 20px;\n    height: 20px;\n    position: absolute;\n    right: -2px;\n    bottom: -5px;\n    background-size: 60%; }\n\n.rating_type_btn:active,\n.rating_type_div.btn-group.open .dropdown-toggle,\n.emojis_type_btn:active,\n.emojis_type_div.btn-group.open .dropdown-toggle {\n  -webkit-box-shadow: none;\n          box-shadow: none; }\n\n.rating_type_outer_span,\n.emojis_type_outer_span {\n  float: right; }\n\n.color_picker_outer_span {\n  margin-left: 10px;\n  border-radius: 4px;\n  display: inline-block;\n  border: 1px solid #B3B1B1;\n  float: right;\n  margin-top: -4px; }\n\n.color_picker_inner_span {\n  padding: 4px; }\n\n.color_picker_inner_span .add_ques_label {\n    margin-right: 5px; }\n\n.color_picker_inner_span:first-child {\n  border-right: 1px solid #B3B1B1; }\n\n.color_picker_input {\n  background: #2889e9;\n  height: 13px;\n  width: 13px;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  border: none;\n  border-radius: 2px;\n  margin-top: 5px;\n  margin-left: 4px;\n  cursor: pointer; }\n\n::ng-deep .color-picker {\n  left: 40px !important; }\n\n::ng-deep .color-picker .arrow-right {\n  right: -20px !important;\n  left: auto !important;\n  border-color: transparent transparent transparent #777 !important; }\n\n.rating_count .add_ques_label {\n  margin-top: 4px; }\n\n.rating_count .custom_select {\n  width: 60px;\n  height: 26px; }\n\n.rating_count .custom_select_div {\n  float: right; }\n\n.rating_count .custom_select_div:after {\n  bottom: -4px; }\n\n.left_sidebar_footer {\n  padding: 18px;\n  border-top: 1px solid #E8E8E8;\n  font-family: 'Helvetica Neue Medium';\n  position: fixed;\n  background-color: #fff;\n  width: 387px;\n  bottom: 0;\n  -webkit-box-shadow: 0px -7px 18px #f5f5f5;\n          box-shadow: 0px -7px 18px #f5f5f5;\n  z-index: 2; }\n\n.left_ques_cancel_btn {\n  color: #2392ED;\n  padding: 10px 26px;\n  background-color: white;\n  font-size: 12px; }\n\n.ans_settings_div {\n  margin-bottom: 15px; }\n\n.transpose_img {\n  height: 15px;\n  cursor: pointer; }\n\n.date_time_format {\n  margin-top: -5px;\n  margin-right: -8px; }\n\n.width100 {\n  width: 100%; }\n\n.nps_custom_select_div {\n  float: right; }\n\n.nps_custom_select {\n  height: 33px;\n  width: 130px;\n  background-color: white;\n  border: 1px solid #B3B1B1;\n  border-radius: 4px;\n  font-size: 12px;\n  padding: 4px 8px;\n  background: url(/assets/images/editSurvey/dropdown-arrow.svg) no-repeat;\n  background-size: 14px;\n  background-position: right 10px center;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none; }\n\n.nps_label {\n  margin-top: 7px; }\n\n.nps_options {\n  margin-bottom: 13px; }\n\n.nps_color_options {\n  margin-left: 25px; }\n\n.nps_text_labels {\n  margin-top: 50px; }\n\n.nps_text_labels .add_ques_label {\n  margin-bottom: 5px; }\n\n::ng-deep .graphical_rating_slider {\n  position: relative;\n  height: 15px; }\n\n::ng-deep .graphical_rating_slider .noUi-horizontal .noUi-handle {\n    background-color: transparent;\n    -webkit-box-shadow: none;\n            box-shadow: none;\n    border: 0; }\n\n::ng-deep .graphical_rating_slider .noUi-handle:after,\n  ::ng-deep .graphical_rating_slider .noUi-handle:before {\n    content: none; }\n\n::ng-deep .graphical_rating_slider .noUi-horizontal.noUi-target {\n    z-index: 2;\n    background-color: transparent;\n    border: 0;\n    -webkit-box-shadow: none;\n            box-shadow: none; }\n\n::ng-deep .graphical_rating_slider .noUi-connect {\n    background-color: transparent;\n    -webkit-box-shadow: none;\n            box-shadow: none; }\n\n::ng-deep .graphical_rating_slider .custom_tooltip {\n    height: 8px;\n    border: 1px solid #cacaca;\n    border-radius: 10px;\n    margin-top: -23px; }\n\n::ng-deep .graphical_rating_slider .custom_tooltip .custom_circle {\n      width: 20px;\n      height: 20px;\n      border-radius: 50%;\n      border: 1px solid #2392ED;\n      background-color: white; }\n\n::ng-deep .graphical_rating_slider .custom_tooltip .noUi-connect {\n      background: #2392ED; }\n\n::ng-deep .graphical_rating_slider .custom_tooltip .slider_color_circle {\n      height: 5px;\n      width: 5px;\n      background-color: #2392ED;\n      border-radius: 50%; }\n\n::ng-deep .graphical_rating_slider .custom_tooltip .noUi-pips-horizontal {\n      top: -6px;\n      left: 5px;\n      width: calc(100% - 10px);\n      height: 30px; }\n\n.na_row_padding {\n  padding-top: 5px; }\n\n.date_show_lbl {\n  vertical-align: -webkit-baseline-middle;\n  margin-bottom: 0;\n  margin-top: 5px; }\n\n.add_span {\n  cursor: pointer; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyQuestionEditComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__survey_question_edit_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shared_questionTemplates_question_types_service__ = __webpack_require__("./src/app/shared/questionTemplates/question-types.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_forms__ = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_ngx_bootstrap_modal__ = __webpack_require__("./node_modules/ngx-bootstrap/modal/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__angular_router__ = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shared_pipes_common_pipes__ = __webpack_require__("./src/app/shared/pipes/common.pipes.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__edit_constants_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.constants.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_ng2_dragula__ = __webpack_require__("./node_modules/ng2-dragula/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_ng2_dragula___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_ng2_dragula__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__question_piping_question_piping_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/question.piping/question.piping.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__shared_components_image_upload_image_upload_service__ = __webpack_require__("./src/app/shared/components/image.upload/image.upload.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};













var originFormControlNameNgOnChanges = __WEBPACK_IMPORTED_MODULE_4__angular_forms__["FormControlName"].prototype.ngOnChanges;
__WEBPACK_IMPORTED_MODULE_4__angular_forms__["FormControlName"].prototype.ngOnChanges = function () {
    var result = originFormControlNameNgOnChanges.apply(this, arguments);
    this.control.nativeElement = this.valueAccessor.textarea ? this.valueAccessor.textarea.nativeElement : undefined;
    return result;
};
var SurveyQuestionEditComponent = (function () {
    function SurveyQuestionEditComponent(editDataService, quesEditService, questionTypesService, modalService, router, route, changeDetectorRef, services, editConstants, elemRef, swapMongoIdAndQuesNum, dragulaService, pipingService, imageService) {
        this.editDataService = editDataService;
        this.quesEditService = quesEditService;
        this.questionTypesService = questionTypesService;
        this.modalService = modalService;
        this.router = router;
        this.route = route;
        this.changeDetectorRef = changeDetectorRef;
        this.services = services;
        this.editConstants = editConstants;
        this.elemRef = elemRef;
        this.swapMongoIdAndQuesNum = swapMongoIdAndQuesNum;
        this.dragulaService = dragulaService;
        this.pipingService = pipingService;
        this.imageService = imageService;
        this.hasResponse = false;
        this.selQuesType = { type: '' };
        this.editQuestion = false;
        this.completeQuestion = {
            data: null
        };
        this.rateVisible = true;
        this.ifDisplay = {
            answerChoices: false,
            row: false,
            col: false,
            notDisplayIsNaRow: false,
            notDisplayIsNaCol: false,
            ratingOptions: false,
            sliderOptions: false,
            transposeRowAndCol: false,
            forceDesktopView: false,
            forceAlignment: false,
            addtnTextChoiceRows: false,
            addtnTextChoiceCols: false
        };
        this.dateOrTime = [];
        this.graphicalOptions = {
            text: '',
            icon: '',
            optType: {
                family: '',
                subtype: ''
            },
            ratingCountObj: '',
            displayCountSlider: true,
            displayColorPicker: true,
            colorPickerValue: '#000000',
            type: '',
            typeIcon: '',
            typeOpts: '',
            rating: 3 //rating(num of cols) to show in slider while creating ques
        };
        this.changesToChildComp = {};
        this.moreRowColOpts = {
            inp: {
                idx: '',
                quesType: '',
                rowOrCol: '',
                ans: '',
                compQues: ''
            },
            display: false,
            position: {
                x: '',
                y: '',
                display: 'none'
            }
        };
        this.pipingOrImageData = {
            action: '',
            from: '',
            data: {
                idx: '',
                rowOrCol: ''
            }
        };
        this.sumAllMTPresent = false;
        this.blockBtn = {
            action: false
        };
    }
    SurveyQuestionEditComponent.prototype.openModal = function (template, size) {
        this.modalRef = this.modalService.show(template, { class: size });
    };
    SurveyQuestionEditComponent.prototype.hideModal = function () {
        this.modalRef.hide();
    };
    SurveyQuestionEditComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.route.params.subscribe(function (params) {
            _this.questionId = params['qid'];
        });
        this.surId = this.editDataService.sId;
        this.surveyDesignData = this.editDataService.surveyDesignData;
        setTimeout(function () {
            _this.surveyDesignData.displaySidebar = false;
        }, 1);
        this.formObj = this.services.form.formObj;
        this.quesTypesJSON = this.questionTypesService.questionTypesJSON;
        this.questionTypesRelatedData = this.questionTypesService.questionTypesRelatedData;
        this.graphRatingData = this.questionTypesService.graphRatingData;
        this.npsProperties = this.questionTypesService.npsProperties;
        if (this.questionId != 'qid') {
            this.subscription = this.editDataService.getSurveyData().subscribe(function (data) {
                if (!data)
                    return;
                _this.formObj = _this.services.form.formObj;
                _this.editQuesJSON = _this.services.form.allQuestionsOfSurvey[_this.questionId];
                _this.selQuesType = _this.questionTypesService.getQuestionType(_this.editQuesJSON.fieldType.family, _this.editQuesJSON.fieldType.subtype);
                _this.editQuesJSON = _this.services.utils.extendObjectValue(_this.editQuesJSON, _this.editConstants.allQues[_this.selQuesType.type]);
                _this.editQuestion = true;
                _this.ifUpdationPossible();
                _this.configureQuestion();
            });
        }
        else {
            this.selQuesType = this.editDataService.selectedQuesType;
            this.editQuesJSON = this.editConstants.allQues[this.selQuesType.type];
            // this.setGraphicalObject(Object.keys(this.questionTypesRelatedData.graphicalRatingTypeJSON)[0]);
            this.configureQuestion();
        }
        // console.log("this.selQuesType",this.selQuesType)
    };
    SurveyQuestionEditComponent.prototype.configureQuestion = function () {
        var _this = this;
        this.completeQuestion.data = this.questionTypesService.convertQuestion(this.editQuesJSON, false);
        if (this.selQuesType.type == 'mul-text') {
            this.sumAllMTPresent = (this.completeQuestion.data.get('validation.valdType') && this.completeQuestion.data.get('validation.valdType').value == 'percentageSum') ? true : false;
        }
        this.setNewQues(this.selQuesType.type);
        this.functionOnReload();
        this.dragulaService.drop.subscribe(function (value) {
            try {
                if (value[0] == 'bag') {
                    _this.reflectChangesToQuesTemps();
                }
            }
            catch (err) {
                console.log(err);
            }
        });
    };
    SurveyQuestionEditComponent.prototype.ifUpdationPossible = function () {
        var _this = this;
        this.services.resource.ifResponseToQuestion(this.questionId).subscribe(function (data) {
            if (data.hasResponse == 1) {
                _this.hasResponse = true;
            }
        }, function (err) {
            _this.services.toastr.error('Error in getting response');
        });
    };
    SurveyQuestionEditComponent.prototype.functionOnReload = function () {
        var _this = this;
        console.log('reload', this.editDataService.addQuestionRelatedData);
        if (this.editDataService.addQuestionRelatedData.pageId == '' && this.questionId == 'qid') {
            setTimeout(function () {
                _this.router.navigate(['/survey', 'design', _this.surId, 'questions']);
            }, 500);
        }
    };
    SurveyQuestionEditComponent.prototype.onEvent = function (event) {
        if (event.type == 'keyup') {
            this.onEditorKeyup(event.options);
        }
        else if (event.type == 'btnClick') {
            this.onCustumButtonClick(event.options);
        }
    };
    SurveyQuestionEditComponent.prototype.onEditorKeyup = function (options) {
        options.element.setValue(options.content);
    };
    SurveyQuestionEditComponent.prototype.onCustumButtonClick = function (options) {
        if (options.action == 'piping') {
            this.openPipingModal('ques');
        }
        else if (options.action == 'imgUpload') {
            this.openUploadImageModal('ques');
        }
    };
    SurveyQuestionEditComponent.prototype.setNewQues = function (ques) {
        if (this.prevQuesType == 'matrix-rating') {
            var colArr = this.completeQuestion.data.get('fieldOptions.col');
            var len = colArr.length;
            if (len > 0 && colArr.at(len - 1).get('isNa').value) {
                colArr.removeAt(len - 1);
            }
        }
        this.selQuesType.type = ques;
        this.setDisplayItems();
        this.hideMoreOptDiv();
        if (this.editQuestion == false) {
            var prevQuestionData = this.completeQuestion.data.getRawValue();
            this.editQuesJSON = this.editConstants.allQues[this.selQuesType.type];
            this.completeQuestion.data = this.questionTypesService.convertQuestion(this.editQuesJSON, false);
            this.copyValuesFromPrevQuesSelected(this.completeQuestion.data, prevQuestionData);
        }
        if (this.completeQuestion.data.get('piping.hasPiping').value == 1) {
            this.completeQuestion.data.get('title').patchValue(this.convertMongoIdToQuesNum(this.completeQuestion.data.get('title').value));
        }
        if (ques == 'ranking') {
            var rowArr = this.completeQuestion.data.get('fieldOptions.row');
            var colArr = this.completeQuestion.data.get('fieldOptions.col');
            var rLen = rowArr.length;
            if (rowArr.at(rLen - 1).get('isNa').value) {
                rowArr.removeAt(rLen - 1);
                colArr.removeAt(rLen - 1);
            }
        }
        if (ques == 'date-time') {
            if (this.completeQuestion.data.get('fieldType.subtype').value == 'both') {
                this.dateOrTime = ['dateOnly', 'timeOnly'];
            }
            else {
                this.dateOrTime.push(this.completeQuestion.data.get('fieldType.subtype').value);
            }
        }
        if (ques == 'nps' && this.editQuestion == false) {
            var colArr = this.completeQuestion.data.get('fieldOptions.col');
            colArr.at(0).patchValue({ 'text': colArr.at(0).get('text').value + '-' + this.npsProperties.label0 });
            colArr.at(10).patchValue({ 'text': colArr.at(10).get('text').value + '-' + this.npsProperties.label10 });
        }
        if (ques == 'graph-rating') {
            // let ifCol: boolean = false;
            // for(let item of (<FormArray>this.completeQuestion.data.get('fieldOptions.col')).controls){
            //   if(item.get('text').value != ''){
            //     ifCol = true;
            //     break;
            //   }
            // }
            // if(ifCol){
            //   this.allowLabels();
            // }
            var obj = this.completeQuestion.data.get('fieldOptions.row').at(0);
            this.setGraphicalObject(obj.get('optType.family').value, obj.get('optType.subtype').value);
            var colArr = this.completeQuestion.data.get('fieldOptions.col');
            this.graphicalOptions.rating = (colArr.at(colArr.length - 1).get('isNa').value ? colArr.length - 1 : colArr.length);
        }
        this.editQuestion = false;
        this.prevQuesType = ques;
        console.log(this.completeQuestion.data);
    };
    SurveyQuestionEditComponent.prototype.setDisplayItems = function () {
        var quesType = this.selQuesType.type;
        var question = this.quesTypesJSON[quesType];
        this.ifDisplay.answerChoices = (question.row || question.col);
        this.ifDisplay.row = question.row;
        this.ifDisplay.col = question.col;
        this.ifDisplay.notDisplayIsNaRow = (quesType == 'single-text' || quesType == 'mul-text' || quesType == 'matrix-rating' || quesType == 'matrix-dropdown' ||
            quesType == 'matrix-text' || quesType == 'graph-rating' || quesType == 'date-time' || quesType == 'ranking' || quesType == 'slider');
        this.ifDisplay.notDisplayIsNaCol = (quesType == 'matrix-dropdown' || quesType == 'matrix-text');
        this.ifDisplay.transposeRowAndCol = (quesType == 'matrix-rating' || quesType == 'matrix-dropdown' || quesType == 'matrix-text');
        this.ifDisplay.forceDesktopView = (quesType == 'matrix-rating' || quesType == 'matrix-dropdown' || quesType == 'matrix-text');
        this.ifDisplay.ratingOptions = (quesType == 'nps' || quesType == 'graph-rating');
        this.ifDisplay.sliderOptions = (quesType == 'slider');
        this.ifDisplay.forceAlignment = question.forceAlignment;
        this.ifDisplay.addtnTextChoiceRows = (quesType == 'matrix-rating' || quesType == 'matrix-dropdown' || quesType == 'matrix-text' || quesType == 'graph-rating');
        this.ifDisplay.addtnTextChoiceCols = (quesType == 'matrix-rating' || quesType == 'matrix-dropdown');
    };
    SurveyQuestionEditComponent.prototype.copyValuesFromPrevQuesSelected = function (tempFormObj, prevQues) {
        var idx = 0;
        var flag = !(this.selQuesType.type == 'single-text' || this.selQuesType.type == 'comment' || this.selQuesType.type == 'date-time' ||
            this.selQuesType.type == 'contacts' || this.selQuesType.type == 'statement' || this.selQuesType.type == 'nps' || this.selQuesType.type == 'slider');
        flag = (flag && this.prevQuesType != 'contacts' && this.prevQuesType != 'nps');
        if (flag) {
            var rowArr = tempFormObj.get('fieldOptions.row');
            if (prevQues.fieldOptions.row && rowArr) {
                var diffRow = prevQues.fieldOptions.row.length - rowArr.length;
                if (diffRow > 0) {
                    while (idx < diffRow) {
                        rowArr.push(this.questionTypesService.rowColGroup());
                        idx++;
                    }
                }
            }
            var colArr = tempFormObj.get('fieldOptions.col');
            if (this.selQuesType.type != 'ranking' && prevQues.fieldOptions.col && colArr) {
                var diffCol = prevQues.fieldOptions.col.length - colArr.length;
                if (diffCol > 0) {
                    idx = 0;
                    while (idx < diffCol) {
                        colArr.push(this.questionTypesService.rowColGroup());
                        idx++;
                    }
                }
            }
        }
        if (this.selQuesType.type != 'contacts' && this.prevQuesType != 'contacts' && this.selQuesType.type != 'nps' && this.prevQuesType != 'nps') {
            if (tempFormObj.get('fieldOptions.row') && prevQues.fieldOptions.row) {
                tempFormObj.get('fieldOptions.row').patchValue(prevQues.fieldOptions.row);
                if (!this.ifDisplay.addtnTextChoiceRows) {
                    var count = 0;
                    while (count < tempFormObj.get('fieldOptions.row').length) {
                        tempFormObj.get('fieldOptions.row').at(count).get('isComment').patchValue(0);
                        count++;
                    }
                }
            }
            if (tempFormObj.get('fieldOptions.col') && prevQues.fieldOptions.col && this.selQuesType.type != 'ranking' && this.prevQuesType != 'ranking') {
                tempFormObj.get('fieldOptions.col').patchValue(prevQues.fieldOptions.col);
                if (!this.ifDisplay.addtnTextChoiceCols) {
                    var count = 0;
                    while (count < tempFormObj.get('fieldOptions.col').length) {
                        tempFormObj.get('fieldOptions.col').at(count).get('isComment').patchValue(0);
                        count++;
                    }
                }
            }
        }
        if (this.selQuesType.type == 'ranking' && this.prevQuesType != 'contacts') {
            var rankColArr = tempFormObj.get('fieldOptions.col');
            var rankDiffCol = prevQues.fieldOptions.row.length - rankColArr.length;
            if (rankDiffCol > 0) {
                idx = 0;
                while (idx < rankDiffCol) {
                    rankColArr.push(this.questionTypesService.rowColGroup(String(rankColArr.length + 1)));
                    idx++;
                }
            }
        }
        tempFormObj.get('title').patchValue(prevQues.title);
        tempFormObj.get('surId').patchValue(prevQues.surId);
        tempFormObj.get('_id').patchValue(prevQues._id);
        tempFormObj.get('required').patchValue(prevQues.required);
        tempFormObj.get('reqMsg').patchValue(prevQues.reqMsg);
    };
    SurveyQuestionEditComponent.prototype.setGraphicalRatingType = function (graphicalRatingType) {
        var _this = this;
        console.log(this.completeQuestion.data);
        this.completeQuestion.data.get('fieldOptions.row').controls.forEach(function (val) {
            val.get('optType.family').patchValue(graphicalRatingType);
            if (graphicalRatingType == 'emojis') {
                val.get('optType.subtype').patchValue(Object.keys(_this.graphRatingData['emojisType'])[0]);
            }
            else if (graphicalRatingType == 'slider') {
                val.get('optType.subtype').patchValue(Object.keys(_this.graphRatingData['sliderType'])[0]);
            }
            else {
                val.get('optType.subtype').patchValue(graphicalRatingType);
            }
        });
        var colArr = this.completeQuestion.data.get('fieldOptions.col');
        var len = (colArr.at(colArr.length - 1).get('isNa').value ? colArr.length - 1 : colArr.length);
        if (graphicalRatingType == 'emojis') {
            if (len > 5) {
                this.graphicalOptions.rating = 5;
                this.setGraphicalRatingCount(this.graphicalOptions.rating);
            }
        }
        else if (graphicalRatingType == 'slider') {
            if (len != 5) {
                this.graphicalOptions.rating = 5;
                this.setGraphicalRatingCount(this.graphicalOptions.rating);
            }
        }
        else {
            if (len == 2) {
                this.graphicalOptions.rating = 3;
                this.setGraphicalRatingCount(this.graphicalOptions.rating);
            }
        }
        this.setGraphicalObject(graphicalRatingType);
        this.rateVisible = false;
        setInterval(function () { _this.rateVisible = true; }, 1);
    };
    SurveyQuestionEditComponent.prototype.setSubRatingType = function (subType) {
        this.completeQuestion.data.get('fieldOptions.row').controls.forEach(function (val) {
            val.get('optType.subtype').patchValue(subType);
        });
        this.graphicalOptions.type = subType;
        this.graphicalOptions.typeIcon = this.graphicalOptions.typeOpts[subType].icon;
    };
    SurveyQuestionEditComponent.prototype.setGraphicalObject = function (str, emojiStr) {
        this.graphicalOptions.text = str;
        this.graphicalOptions.icon = this.questionTypesRelatedData.graphicalRatingTypeJSON[str].iconActive;
        this.graphicalOptions.ratingCountObj = this.graphRatingData['ratingConfig'][this.questionTypesRelatedData.graphicalRatingTypeJSON[str].ratingCount];
        this.graphicalOptions.displayCountSlider = str != 'slider';
        this.graphicalOptions.displayColorPicker = str != 'slider' && str != 'emojis';
        if (this.completeQuestion.data) {
            this.graphicalOptions.optType.family = this.completeQuestion.data.get('fieldOptions.row').at(0).get('optType.family').value;
            this.graphicalOptions.optType.subtype = this.completeQuestion.data.get('fieldOptions.row').at(0).get('optType.subtype').value;
            this.graphicalOptions.colorPickerValue = this.completeQuestion.data.get('fieldOptions.row').at(0).get('color').value;
        }
        if (str == 'emojis') {
            this.graphicalOptions.type = emojiStr || Object.keys(this.graphRatingData['emojisType'])[0];
            this.graphicalOptions.typeIcon = this.graphRatingData['emojisType'][this.graphicalOptions.type].icon;
            this.graphicalOptions.typeOpts = this.graphRatingData['emojisType'];
        }
        else if (str == 'slider') {
            this.graphicalOptions.type = emojiStr || Object.keys(this.graphRatingData['sliderType'])[0];
            this.graphicalOptions.typeIcon = this.graphRatingData['sliderType'][this.graphicalOptions.type] && this.graphRatingData['sliderType'][this.graphicalOptions.type].icon;
            this.graphicalOptions.typeOpts = this.graphRatingData['sliderType'];
        }
        console.log(this.graphicalOptions);
    };
    SurveyQuestionEditComponent.prototype.setGraphicalRatingCount = function (graphicalRatingCount) {
        var _this = this;
        var isNaPresent = false;
        var len = this.completeQuestion.data.get('fieldOptions.col').length;
        if (this.completeQuestion.data.get('fieldOptions.col').at(len - 1).get('isNa').value) {
            len = len - 1;
            isNaPresent = true;
        }
        var diff = Math.abs(graphicalRatingCount - len);
        console.log(diff);
        if (graphicalRatingCount > len) {
            var num = 0;
            while (num < diff) {
                this.completeQuestion.data.get('fieldOptions.col').insert((len + num), this.questionTypesService.rowColGroup(''));
                num++;
            }
        }
        else {
            var num = 0;
            while (num < diff) {
                if (isNaPresent)
                    this.completeQuestion.data.get('fieldOptions.col').removeAt(this.completeQuestion.data.get('fieldOptions.col').length - 2);
                else
                    this.completeQuestion.data.get('fieldOptions.col').removeAt(this.completeQuestion.data.get('fieldOptions.col').length - 1);
                num++;
            }
        }
        this.rateVisible = false;
        setInterval(function () { _this.rateVisible = true; }, 1);
    };
    SurveyQuestionEditComponent.prototype.setGraphicalRatingColor = function (graphicalRatingColor) {
        this.completeQuestion.data.get('fieldOptions.row').controls.forEach(function (val) {
            val.patchValue({ color: graphicalRatingColor });
        });
    };
    SurveyQuestionEditComponent.prototype.setNpsType = function (type) {
        // this.completeQuestion.data.get('properties').patchValue({'npsType':type});
        if (type == 'slider') {
            this.completeQuestion.data.get('properties').patchValue({ 'color': false });
        }
    };
    SurveyQuestionEditComponent.prototype.addAnswerOption = function (str, index, text) {
        var _this = this;
        var colArr = this.completeQuestion.data.get('fieldOptions.col');
        if (this.selQuesType.type == 'graph-rating' && str == 'col') {
            var flag = false;
            var rowArr = this.completeQuestion.data.get('fieldOptions.row');
            var cLen = (colArr.at(colArr.length - 1).get('isNa').value ? colArr.length - 1 : colArr.length);
            if (rowArr.at(0).get('optType.family').value == 'emojis' || rowArr.at(0).get('optType.family').value == 'slider') {
                if (cLen == 5) {
                    flag = true;
                }
            }
            else {
                if (cLen == 10) {
                    flag = true;
                }
            }
            if (flag) {
                this.services.toastr.warning('No more Columns can be added.', 'Not Allowed');
                return false;
            }
        }
        this.completeQuestion.data.get('fieldOptions.' + str).insert((index + 1), this.questionTypesService.rowColGroup(text ? text : ''));
        if (this.selQuesType.type == 'graph-rating' && str == 'row') {
            this.completeQuestion.data.get('fieldOptions.' + str).at(index + 1).get('color').patchValue(this.graphicalOptions.colorPickerValue);
            this.completeQuestion.data.get('fieldOptions.' + str).at(index + 1).get('optType.family').patchValue(this.graphicalOptions.optType.family);
            this.completeQuestion.data.get('fieldOptions.' + str).at(index + 1).get('optType.subtype').patchValue(this.graphicalOptions.optType.subtype);
        }
        if (this.selQuesType.type == 'ranking') {
            var colLenInRanking = colArr.length;
            if (colLenInRanking > 0 && colArr.at(colLenInRanking - 1).get('isNa').value) {
                colArr.insert((colLenInRanking - 1), this.questionTypesService.rowColGroup(String(colLenInRanking)));
            }
            else {
                colArr.insert(colLenInRanking, this.questionTypesService.rowColGroup(String(colLenInRanking + 1)));
            }
        }
        if (str == 'col' && this.selQuesType.type == 'graph-rating') {
            this.graphicalOptions.rating = (colArr.at(colArr.length - 1).get('isNa').value ? colArr.length - 1 : colArr.length);
            //to dynamically add columns in graphical-rating question types
            this.rateVisible = false;
            setInterval(function () { _this.rateVisible = true; }, 1);
        }
        this.reflectChangesToQuesTemps();
    };
    SurveyQuestionEditComponent.prototype.removeAnswerOption = function (str, index) {
        var _this = this;
        if (this.completeQuestion.data.get('fieldOptions.' + str).length < 2) {
            this.services.toastr.error('There should be atleast one ' + (str == 'row' ? 'row.' : 'column.'), 'Cannot be deleted');
            return false;
        }
        var colArr = this.completeQuestion.data.get('fieldOptions.col');
        if (this.selQuesType.type == 'graph-rating' && str == 'col') {
            var flag = false;
            var rowArr = this.completeQuestion.data.get('fieldOptions.row');
            var cLen = (colArr.at(colArr.length - 1).get('isNa').value ? colArr.length - 1 : colArr.length);
            if (rowArr.at(0).get('optType.family').value == 'slider') {
                if (cLen == 5) {
                    flag = true;
                }
            }
            else if (rowArr.at(0).get('optType.family').value == 'emojis') {
                if (cLen == 2) {
                    flag = true;
                }
            }
            else {
                if (cLen == 3) {
                    flag = true;
                }
            }
            if (flag) {
                this.services.toastr.warning('No more Columns can be removed.', 'Not Allowed');
                return false;
            }
        }
        this.completeQuestion.data.get('fieldOptions.' + str).removeAt(index);
        if (this.selQuesType.type == 'ranking') {
            var colLenInRanking = colArr.length;
            if (colLenInRanking > 0 && colArr.at(colLenInRanking - 1).get('isNa').value) {
                colArr.removeAt(colLenInRanking - 2);
            }
            else {
                colArr.removeAt(colLenInRanking - 1);
            }
        }
        if (str == 'col' && this.selQuesType.type == 'graph-rating') {
            this.graphicalOptions.rating = (colArr.at(colArr.length - 1).get('isNa').value ? colArr.length - 1 : colArr.length);
            //to dynamically remove columns in graphical-rating question types
            this.rateVisible = false;
            setInterval(function () { _this.rateVisible = true; }, 1);
        }
        this.reflectChangesToQuesTemps();
    };
    SurveyQuestionEditComponent.prototype.reflectChangesToQuesTemps = function () {
        this.changesToChildComp = {};
    };
    SurveyQuestionEditComponent.prototype.multipleAnsInMatrixRating = function (e) {
        var subTypeStr = (e.target.checked ? 'checkbox' : 'radio');
        this.completeQuestion.data.get('fieldType').patchValue({ 'subtype': subTypeStr });
    };
    SurveyQuestionEditComponent.prototype.setSumAllMT = function (e) {
        this.sumAllMTPresent = !this.sumAllMTPresent;
        //this.completeQuestion.data.get('validation.valdType') && this.completeQuestion.data.get('validation.valdType').value == 'percentageSum';
        if (this.sumAllMTPresent) {
            this.completeQuestion.data.get('validation.valdType').patchValue("percentageSum");
        }
        else {
            this.completeQuestion.data.get('validation.valdType').patchValue("");
        }
        // console.log("e",e);
    };
    SurveyQuestionEditComponent.prototype.allowLabels = function (e, str) {
        var ifDelRowColLabels = false;
        if (str == 'row') {
            if (e && e.target.checked) {
                this.completeQuestion.data.get('properties.allowRowLabels').patchValue(true);
            }
            else {
                this.completeQuestion.data.get('properties.allowRowLabels').patchValue(false);
                ifDelRowColLabels = true;
            }
        }
        if (str == 'col') {
            if (e && e.target.checked) {
                this.completeQuestion.data.get('properties.allowColLabels').patchValue(true);
            }
            else {
                this.completeQuestion.data.get('properties.allowColLabels').patchValue(false);
                ifDelRowColLabels = true;
            }
        }
        if (ifDelRowColLabels) {
            var flag_1 = false;
            this.completeQuestion.data.get('fieldOptions.' + str).controls.forEach(function (opt) {
                if (opt.get('hasText').value) {
                    opt.get('hasText').patchValue(0);
                    flag_1 = true;
                }
            });
            if (flag_1) {
                this.services.toastr.warning('Additional text has been deleted on respective ' + (str == 'row' ? 'Rows' : 'Columns') + '.', 'Updated');
            }
        }
    };
    SurveyQuestionEditComponent.prototype.setSubTypeForDateTime = function (e, dateTimeType) {
        if (e.target.checked) {
            this.dateOrTime.push(dateTimeType);
        }
        else {
            var idx = this.dateOrTime.indexOf(dateTimeType);
            this.dateOrTime.splice(idx, 1);
            if (this.dateOrTime.length == 0) {
                this.dateOrTime.push((dateTimeType == 'dateOnly') ? 'timeOnly' : 'dateOnly');
            }
        }
        if (this.dateOrTime.includes('dateOnly') && this.dateOrTime.includes('timeOnly')) {
            this.completeQuestion.data.get('fieldType').patchValue({ subtype: 'both' });
        }
        else if (this.dateOrTime.includes('dateOnly')) {
            this.completeQuestion.data.get('fieldType').patchValue({ subtype: 'dateOnly' });
        }
        else if (this.dateOrTime.includes('timeOnly')) {
            this.completeQuestion.data.get('fieldType').patchValue({ subtype: 'timeOnly' });
        }
    };
    SurveyQuestionEditComponent.prototype.addNaOption = function (e, type) {
        var _this = this;
        if (this.selQuesType.type == 'slider') {
            var naObj = {
                isNa: 0
            };
            naObj['isNa'] = (e.target.checked ? 1 : 0);
            this.completeQuestion.data.get('fieldOptions.col').at(0).patchValue(naObj);
            this.completeQuestion.data.get('fieldOptions.col').at(0).patchValue({ text: 'N/A' });
            return;
        }
        if (e.target.checked) {
            this.completeQuestion.data.get('fieldOptions.' + type).push(this.questionTypesService.rowColGroup('N/A'));
            var idx = this.completeQuestion.data.get('fieldOptions.' + type).length - 1;
            this.completeQuestion.data.get('fieldOptions.' + type).at(idx).patchValue({ isNa: 1 });
        }
        else {
            var idx = this.completeQuestion.data.get('fieldOptions.' + type).length - 1;
            this.completeQuestion.data.get('fieldOptions.' + type).removeAt(idx);
        }
        if (type == 'col' && this.selQuesType.type == 'graph-rating') {
            this.rateVisible = false;
            setInterval(function () { _this.rateVisible = true; }, 1);
        }
        this.reflectChangesToQuesTemps();
    };
    SurveyQuestionEditComponent.prototype.getTextOfNpsLabel = function (str) {
        var idx = str.indexOf('-');
        if (idx != -1) {
            return str.substr(idx + 1);
        }
        return str;
    };
    SurveyQuestionEditComponent.prototype.changeNpsLabel = function (pos, str) {
        if (pos == 'first') {
            this.completeQuestion.data.get('fieldOptions.col').at(0).get('text').patchValue('0-' + str);
        }
        else if (pos == 'fifth') {
            this.completeQuestion.data.get('fieldOptions.col').at(5).get('text').patchValue('5-' + str);
        }
        else if (pos == 'last') {
            this.completeQuestion.data.get('fieldOptions.col').at(10).get('text').patchValue('10-' + str);
        }
    };
    SurveyQuestionEditComponent.prototype.setFileFormat = function (str) {
        this.completeQuestion.data.get('fieldOptions.upload').at(0).get('fieldVald').patchValue({ 'format': this.questionTypesService.questionTypesRelatedData['fileUploadJSON'][str].format });
        this.reflectChangesToQuesTemps();
    };
    SurveyQuestionEditComponent.prototype.transposeRowAndCol = function () {
        if (this.hasResponse) {
            this.services.toastr.warning('Response has been collected for this Question.', 'Not Allowed');
            return false;
        }
        this.quesEditService.transposeRowAndCol(this.completeQuestion, this.selQuesType.type);
    };
    SurveyQuestionEditComponent.prototype.colLabelsAtTop = function (e) {
        this.completeQuestion.data.get('properties.colLabelsTop').patchValue(!e.target.checked ? true : false);
    };
    SurveyQuestionEditComponent.prototype.setVerticalAlign = function (e) {
        this.completeQuestion.data.get('properties.align').patchValue(e.target.checked ? 'vertical' : 'horizontal');
    };
    SurveyQuestionEditComponent.prototype.setOrderInDd = function (e) {
        this.completeQuestion.data.get('properties.order').patchValue(e.target.checked ? 'asc' : 'default');
        this.reflectChangesToQuesTemps();
    };
    SurveyQuestionEditComponent.prototype.saveOrUpdateQuestion = function (str) {
        var _this = this;
        if (this.questionId == 'qid') {
            this.completeQuestion.data.get('surId').patchValue(this.surId);
        }
        var finalJSON = this.completeQuestion.data.getRawValue();
        if (this.selQuesType.type == 'statement') {
            finalJSON.required = false;
            delete finalJSON.reqMsg;
        }
        finalJSON.title = this.convertQuesNumToMongoId(finalJSON.title);
        this.makePipedQuesArr(finalJSON);
        if (this.selQuesType.type == 'graph-rating' || this.selQuesType.type == 'slider') {
            finalJSON.fieldOptions.col.forEach(function (opt) {
                delete opt.optType;
            });
        }
        else {
            if (finalJSON.fieldOptions.row) {
                finalJSON.fieldOptions.row.forEach(function (opt) {
                    delete opt.optType;
                });
            }
            if (finalJSON.fieldOptions.col) {
                finalJSON.fieldOptions.col.forEach(function (opt) {
                    delete opt.optType;
                });
            }
        }
        if (!finalJSON.fieldType.subtype) {
            delete finalJSON.fieldType.subtype;
        }
        if (this.selQuesType.type == 'graph-rating') {
            var len = this.completeQuestion.data.get('fieldOptions.col').length;
            var colLen = void 0;
            if (this.completeQuestion.data.get('fieldOptions.col').at(len - 1).get('isNa').value) {
                colLen = len - 1;
            }
            else {
                colLen = len;
            }
            if (this.graphicalOptions.rating != colLen) {
                console.log('col len did not match');
                return false;
            }
        }
        if (this.selQuesType.type == 'slider') {
            var flag = true;
            if (finalJSON.properties.valType == 'discrete') {
                flag = this.checkValidSlider();
            }
            if (!flag) {
                return false;
            }
        }
        if (finalJSON.title == '') {
            this.services.toastr.error('Question title is required.', 'Cannot be saved');
            return false;
        }
        var rowColTextValid = !(this.selQuesType.type == 'slider' || this.selQuesType.type == 'nps' || this.selQuesType.type == 'date-time' ||
            this.selQuesType.type == 'graph-rating' || this.selQuesType.type == 'file' || this.selQuesType.type == 'single-text' || this.selQuesType.type == 'comment');
        if (rowColTextValid) {
            var optionFlag_1 = false;
            finalJSON.fieldOptions.row && finalJSON.fieldOptions.row.forEach(function (r) {
                if (r.text.trim() == '') {
                    optionFlag_1 = true;
                    return false;
                }
            });
            if (!optionFlag_1) {
                finalJSON.fieldOptions.col && finalJSON.fieldOptions.col.forEach(function (c) {
                    if (c.text.trim() == '') {
                        optionFlag_1 = true;
                        return false;
                    }
                });
            }
            if (optionFlag_1) {
                this.services.toastr.error('All options text is required.', 'Cannot be saved');
                return false;
            }
        }
        if (this.selQuesType.type == 'graph-rating') {
            this.questionTypesService.interchangeTextAndDescForGraphicalQues(finalJSON);
        }
        this.blockBtn.action = true;
        var addQuesRelData = this.editDataService.addQuestionRelatedData;
        console.log(finalJSON);
        if (this.questionId == 'qid') {
            delete finalJSON._id;
            finalJSON.fieldOptions.row && finalJSON.fieldOptions.row.forEach(function (r) {
                delete r._id;
            });
            finalJSON.fieldOptions.col && finalJSON.fieldOptions.col.forEach(function (c) {
                delete c._id;
                c.items && c.items.forEach(function (i) {
                    delete i._id;
                });
            });
            this.services.resource.saveQuestionData(addQuesRelData.pageId, addQuesRelData.addQuesRefId, finalJSON).subscribe(function (data) {
                _this.formObj.pageFields[addQuesRelData.pageIndex].formFields.splice(addQuesRelData.addQuesRefIndex, 0, new Question(data.questionWithId));
                _this.afterSaveOrUpdate(data.questionWithId);
                if (str == 'new') {
                    addQuesRelData.addQuesRefId = data.questionWithId._id;
                    addQuesRelData.addQuesRefIndex += 1;
                    _this.surveyDesignData.presentAction = 'add-question';
                }
                else {
                    _this.surveyDesignData.presentAction = 'survey-flow';
                }
                _this.services.toastr.success('Question has been saved successfully.', 'Success');
                setTimeout(function () {
                    _this.services.utils.scrollPage(data.questionWithId._id, 150);
                }, 100);
            }, function (err) {
                _this.services.toastr.error('Error in saving question');
                _this.blockBtn.action = false;
            });
        }
        else {
            finalJSON.fieldOptions.row && finalJSON.fieldOptions.row.forEach(function (r) {
                if (r._id.length == 4)
                    delete r._id;
            });
            finalJSON.fieldOptions.col && finalJSON.fieldOptions.col.forEach(function (c) {
                if (c._id.length == 4)
                    delete c._id;
                c.items && c.items.forEach(function (i) {
                    if (i._id.length == 4)
                        delete i._id;
                });
            });
            if (addQuesRelData.pageIndex == '') {
                addQuesRelData.pageId = this.services.form.getPageId(this.questionId);
                addQuesRelData.pageIndex = this.services.utils.findIndex(this.formObj.pageFields, '_id', addQuesRelData.pageId);
            }
            this.services.resource.updateQuestionData(this.questionId, finalJSON).subscribe(function (data) {
                _this.formObj.pageFields[addQuesRelData.pageIndex].formFields.splice(addQuesRelData.updateQuesIndex, 1, new Question(data.resBody));
                _this.afterSaveOrUpdate(data.resBody);
                _this.services.toastr.success('Question has been updated successfully.', 'Success');
                setTimeout(function () {
                    _this.services.utils.scrollPage(_this.questionId, 150);
                }, 100);
            }, function (err) {
                _this.services.toastr.error('Error in updating question');
            });
        }
    };
    SurveyQuestionEditComponent.prototype.afterSaveOrUpdate = function (ques) {
        this.services.form.addNewQuesInAllQuesObj(new Question(ques));
        this.services.form.setAllPagesAndQuestions();
        this.services.form.setPipingObject();
        this.router.navigate(['/survey', 'design', this.surId, 'questions']);
    };
    SurveyQuestionEditComponent.prototype.cancelQuestion = function () {
        var _this = this;
        this.router.navigate(['/survey', 'design', this.surId, 'questions']);
        setTimeout(function () {
            _this.services.utils.scrollPage(_this.questionId, 150);
        }, 100);
    };
    SurveyQuestionEditComponent.prototype.openPipingModal = function (fromStr) {
        this.pipingService.initializePipingObj();
        this.pipingService.setFromPiping(fromStr);
        this.setPipingOrImageData(fromStr, 'piping');
        this.openModal(this.insertPipingModal, 'modal-md');
    };
    SurveyQuestionEditComponent.prototype.setPipingOrImageData = function (fromStr, action) {
        this.pipingOrImageData.action = action;
        this.pipingOrImageData.from = fromStr;
        if (fromStr == 'opt') {
            this.pipingOrImageData.data.rowOrCol = this.moreRowColOpts.inp.rowOrCol;
            this.pipingOrImageData.data.idx = this.moreRowColOpts.inp.idx;
        }
    };
    SurveyQuestionEditComponent.prototype.onPipingDone = function () {
        this.insertInQuesOrOpt();
        this.hideModal();
        this.onSelRowColOpts('done');
    };
    SurveyQuestionEditComponent.prototype.makePipedQuesArr = function (ques) {
        var _this = this;
        var idx;
        var surveyPipedQuesObj = this.services.form.getPipingObject();
        if (surveyPipedQuesObj[this.questionId]) {
            var prevPipedQues = surveyPipedQuesObj[this.questionId];
            prevPipedQues.forEach(function (qid) {
                var obj = {
                    'id': qid,
                    'isPiped': 0
                };
                idx = ques.title.indexOf('{{p://' + qid + '}}');
                obj['isPiped'] = ((idx > -1) ? 1 : 0);
                ques.piping.pipedQuestions.push(obj);
            });
        }
        var prevIdx;
        var ifPrevPresent;
        this.pipingService.pipingJSON.pipedQuesArr.forEach(function (qid) {
            idx = ques.title.indexOf('{{p://' + qid + '}}');
            if (idx > -1) {
                prevIdx = _this.services.utils.findIndex(ques.piping.pipedQuestions, 'id', qid);
                ifPrevPresent = (prevIdx > -1);
                if (ifPrevPresent) {
                    if (ques.piping.pipedQuestions[prevIdx].isPiped == 0) {
                        ques.piping.pipedQuestions[prevIdx].isPiped = 1;
                    }
                }
                else {
                    var obj = {
                        'id': qid,
                        'isPiped': 1
                    };
                    ques.piping.pipedQuestions.push(obj);
                }
            }
        });
        var flag = false;
        for (var _i = 0, _a = ques.piping.pipedQuestions; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.isPiped == 1) {
                flag = true;
                break;
            }
        }
        if (flag) {
            ques.piping.hasPiping = 1;
        }
        else {
            ques.piping.hasPiping = 0;
        }
    };
    SurveyQuestionEditComponent.prototype.convertQuesNumToMongoId = function (title) {
        var _this = this;
        title = this.swapMongoIdAndQuesNum.transform(title, false, this.questionId); //for piped questions previously.
        var keys = Object.keys(this.pipingService.pipingJSON.pipedQuesObj); //for piped question at the current moment.
        keys.forEach(function (item) {
            title = title.replace(new RegExp(item, 'g'), _this.pipingService.pipingJSON.pipedQuesObj[item]);
        });
        return title;
    };
    SurveyQuestionEditComponent.prototype.convertMongoIdToQuesNum = function (title) {
        return this.swapMongoIdAndQuesNum.transform(title, true, this.questionId);
    };
    SurveyQuestionEditComponent.prototype.openUploadImageModal = function (fromStr) {
        this.setPipingOrImageData(fromStr, 'imgUpload');
        this.openModal(this.uploadImageModal, 'modal-lg');
    };
    SurveyQuestionEditComponent.prototype.onDoneImageSelect = function (e) {
        if (e) {
            this.imageService.initializePipingImgObj(e);
            this.insertInQuesOrOpt();
        }
        this.hideModal();
        this.onSelRowColOpts('done');
    };
    SurveyQuestionEditComponent.prototype.insertInQuesOrOpt = function () {
        var _this = this;
        var insertToData = this.pipingOrImageData;
        var textToInsert;
        if (insertToData.action == 'piping') {
            textToInsert = this.pipingService.getResult();
        }
        else if (insertToData.action == 'imgUpload') {
            textToInsert = this.imageService.getPipedImgElem();
        }
        if (insertToData.from == 'ques') {
            this.services.utils.insertContentInActiveTinyMce(textToInsert);
        }
        else if (insertToData.from == 'opt') {
            setTimeout(function () {
                var opItem = _this.completeQuestion.data.get("fieldOptions." + insertToData.data.rowOrCol).at(insertToData.data.idx);
                var str = opItem.get('text').value;
                opItem.get('text').nativeElement.focus();
                opItem.get('text').patchValue(str + textToInsert);
            }, 50);
        }
    };
    SurveyQuestionEditComponent.prototype.onEventInFormControl = function (e, rowOrCol, idx) {
        var _this = this;
        var type = this.selQuesType.type;
        var isNa = this.completeQuestion.data.get("fieldOptions." + rowOrCol).at(idx).get('isNa').value;
        var isValid = (type != 'single-text' && type != 'comment' && type != 'date-time' && type != 'slider' && !isNa);
        var optArr = (this.completeQuestion.data.get("fieldOptions." + rowOrCol));
        if (e.which == 13) {
            e.preventDefault();
            if (isValid) {
                this.addAnswerOption(rowOrCol, idx);
                if (optArr.at(idx + 1)) {
                    setTimeout(function () {
                        optArr.at(idx + 1).get('text').nativeElement.focus();
                    }, 50);
                    this.changeDetectorRef.detectChanges();
                }
            }
        }
        else if (e.which == 8) {
            if (isValid) {
                var tempText = this.services.utils.getTextOutOfHtml(optArr.at(idx).get('text').value.trim());
                if (tempText == '') {
                    if (this.hasResponse && optArr.at(idx).get('_id').value.length == 24) {
                        this.services.toastr.warning('Response against this question has been already taken.', 'Cannot be Deleted');
                        return;
                    }
                    this.removeAnswerOption(rowOrCol, idx);
                    if (idx != 0) {
                        setTimeout(function () {
                            optArr.at(idx - 1).get('text').nativeElement.focus();
                            _this.services.utils.selectElementContents(optArr.at(idx - 1).get('text').nativeElement);
                        }, 50);
                    }
                    this.changeDetectorRef.detectChanges();
                }
            }
        }
    };
    SurveyQuestionEditComponent.prototype.onCopy = function (e) {
        var clipboard = e.clipboardData || clipboardData;
        if (!clipboard) {
            console.error('not able to paste from clipboard.');
            return;
        }
        var selectedText = window.getSelection().toString().trim();
        clipboard.setData('Text/html', selectedText);
        e.preventDefault();
    };
    SurveyQuestionEditComponent.prototype.onPaste = function (e, rowOrCol, idx) {
        var _this = this;
        var quesType = this.selQuesType.type;
        var isNa = this.completeQuestion.data.get("fieldOptions." + rowOrCol).at(idx).get('isNa').value;
        if (quesType == 'single-text' || quesType == 'comment' || quesType == 'date-time' || quesType == 'slider' || isNa) {
            return;
        }
        else {
            var clipboard = e.clipboardData || clipboardData;
            if (!clipboard) {
                console.error('not able to paste from clipboard.');
                return;
            }
            var pastedData = clipboard.getData('Text');
            var options = pastedData.split("\n");
            if (options.length > 1) {
                e.preventDefault();
                var pos_1 = idx - 1;
                options.forEach(function (val) {
                    val = val.trim();
                    if (val != '') {
                        _this.addAnswerOption(rowOrCol, pos_1, val);
                        pos_1++;
                    }
                });
            }
        }
    };
    SurveyQuestionEditComponent.prototype.openMoreOptions = function (e, str, opt, idx) {
        e.stopPropagation();
        var scrollTop = this.sideBar.nativeElement.scrollTop;
        this.moreRowColOpts.inp = {
            idx: idx,
            quesType: this.selQuesType.type,
            rowOrCol: str,
            ans: opt,
            compQues: this.completeQuestion
        };
        this.moreRowColOpts.position.x = String(e.clientX - 310);
        this.moreRowColOpts.position.y = String(e.clientY + scrollTop - 60 + 15);
        // console.log((this.moreRowColOpts.position.x),this.moreRowColOpts.position.y);
        if (this.moreRowColOpts.position.display == 'block') {
            this.hideMoreOptDiv();
        }
        else {
            this.moreRowColOpts.position.display = 'block';
            this.moreRowColOpts.display = true;
        }
        console.log(this.moreRowColOpts);
    };
    SurveyQuestionEditComponent.prototype.hideMoreOptDiv = function () {
        this.moreRowColOpts.position.display = 'none';
        this.moreRowColOpts.display = false;
        this.moreRowColOpts.inp.idx = '';
    };
    SurveyQuestionEditComponent.prototype.onSelRowColOpts = function (e) {
        if (e == 'piping') {
            this.openPipingModal('opt');
        }
        else if (e == 'imgUpload') {
            this.openUploadImageModal('opt');
        }
        if (e == 'done') {
            this.hideMoreOptDiv();
            this.reflectChangesToQuesTemps();
            console.log(this.moreRowColOpts);
        }
    };
    SurveyQuestionEditComponent.prototype.changeSliderValType = function (valType) {
        this.completeQuestion.data.get('properties.minValue').patchValue(0);
        this.completeQuestion.data.get('properties.step').patchValue(1);
        if (valType == 'discrete') {
            this.completeQuestion.data.get('properties.maxValue').patchValue(10);
            this.completeQuestion.data.get('properties.start').patchValue(3);
        }
        else if (valType == 'continous') {
            this.completeQuestion.data.get('properties.maxValue').patchValue(100);
            this.completeQuestion.data.get('properties.start').patchValue(50);
        }
        this.reflectChangesToQuesTemps();
    };
    SurveyQuestionEditComponent.prototype.changeSliderDesign = function (type) {
        this.completeQuestion.data.get('fieldOptions.row').at(0).get('optType.subtype').patchValue(type);
    };
    SurveyQuestionEditComponent.prototype.checkValidSlider = function () {
        var ques = this.completeQuestion.data;
        var min = parseInt(ques.get('properties.minValue').value);
        var max = parseInt(ques.get('properties.maxValue').value);
        var step = parseInt(ques.get('properties.step').value);
        var start = parseInt(ques.get('properties.start').value);
        var diff = (max - min);
        if (min > max) {
            this.services.toastr.error('Range entered is not valid.');
            return false;
        }
        else if (diff < step) {
            this.services.toastr.error('Increment value should lie within the difference of range entered.');
            return false;
        }
        else if ((diff % step) != 0) {
            this.services.toastr.error('Increment value should divide the range properly.');
            return false;
        }
        else if ((start > max) || (start < min)) {
            this.services.toastr.error('Start value should lie within the range entered.');
            return false;
        }
        else {
            this.reflectChangesToQuesTemps();
            return true;
        }
    };
    SurveyQuestionEditComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    return SurveyQuestionEditComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('sideBar'),
    __metadata("design:type", typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _a || Object)
], SurveyQuestionEditComponent.prototype, "sideBar", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('insertPipingModal'),
    __metadata("design:type", Object)
], SurveyQuestionEditComponent.prototype, "insertPipingModal", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('uploadImageModal'),
    __metadata("design:type", Object)
], SurveyQuestionEditComponent.prototype, "uploadImageModal", void 0);
SurveyQuestionEditComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey.question.edit',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__edit_data_service__["a" /* EditDataService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__survey_question_edit_service__["a" /* SurveyQuestionEditService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__survey_question_edit_service__["a" /* SurveyQuestionEditService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_3__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */]) === "function" && _d || Object, typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_5_ngx_bootstrap_modal__["a" /* BsModalService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_5_ngx_bootstrap_modal__["a" /* BsModalService */]) === "function" && _e || Object, typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_6__angular_router__["e" /* Router */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__angular_router__["e" /* Router */]) === "function" && _f || Object, typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_6__angular_router__["a" /* ActivatedRoute */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_6__angular_router__["a" /* ActivatedRoute */]) === "function" && _g || Object, typeof (_h = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ChangeDetectorRef"]) === "function" && _h || Object, typeof (_j = typeof __WEBPACK_IMPORTED_MODULE_7__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_7__shared_services_services_module__["a" /* SharedServices */]) === "function" && _j || Object, typeof (_k = typeof __WEBPACK_IMPORTED_MODULE_9__edit_constants_service__["a" /* EditConstantsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_9__edit_constants_service__["a" /* EditConstantsService */]) === "function" && _k || Object, typeof (_l = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === "function" && _l || Object, typeof (_m = typeof __WEBPACK_IMPORTED_MODULE_8__shared_pipes_common_pipes__["b" /* SwapMongoIdAndQuesNum */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_8__shared_pipes_common_pipes__["b" /* SwapMongoIdAndQuesNum */]) === "function" && _m || Object, typeof (_o = typeof __WEBPACK_IMPORTED_MODULE_10_ng2_dragula__["DragulaService"] !== "undefined" && __WEBPACK_IMPORTED_MODULE_10_ng2_dragula__["DragulaService"]) === "function" && _o || Object, typeof (_p = typeof __WEBPACK_IMPORTED_MODULE_11__question_piping_question_piping_service__["a" /* QuestionPipingService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_11__question_piping_question_piping_service__["a" /* QuestionPipingService */]) === "function" && _p || Object, typeof (_q = typeof __WEBPACK_IMPORTED_MODULE_12__shared_components_image_upload_image_upload_service__["a" /* ImageUploadService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_12__shared_components_image_upload_image_upload_service__["a" /* ImageUploadService */]) === "function" && _q || Object])
], SurveyQuestionEditComponent);

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
//# sourceMappingURL=survey.question.edit.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyQuestionEditService; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_questionTemplates_question_types_service__ = __webpack_require__("./src/app/shared/questionTemplates/question-types.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var SurveyQuestionEditService = (function () {
    function SurveyQuestionEditService(quesTypesService) {
        this.quesTypesService = quesTypesService;
    }
    SurveyQuestionEditService.prototype.transposeRowAndCol = function (completeQuestion, quesType) {
        var rawRowArr = completeQuestion.data.get('fieldOptions.row').getRawValue();
        var rawColArr = completeQuestion.data.get('fieldOptions.col').getRawValue();
        var rowArr = completeQuestion.data.get('fieldOptions.row');
        var colArr = completeQuestion.data.get('fieldOptions.col');
        var rowLen = rowArr.length;
        var colLen;
        var naFlag = false;
        if (quesType == 'matrix-rating' && colArr.at(colArr.length - 1).get('isNa').value == 1) {
            naFlag = true;
            colLen = colArr.length - 1;
        }
        else {
            colLen = colArr.length;
        }
        var i = 0;
        if (rowLen < colLen) {
            var diff = (colLen - rowLen);
            while (i < diff) {
                rowArr.insert(rowArr.length, this.quesTypesService.rowColGroup());
                i++;
            }
            i = 0;
            while (i < diff) {
                if (naFlag) {
                    colArr.removeAt(colArr.length - 2);
                }
                else {
                    colArr.removeAt(colArr.length - 1);
                }
                i++;
            }
        }
        else if (colLen < rowLen) {
            i = 0;
            var diff = (rowLen - colLen);
            while (i < diff) {
                if (naFlag) {
                    colArr.insert(colArr.length - 1, this.quesTypesService.rowColGroup());
                }
                else {
                    colArr.insert(colArr.length, this.quesTypesService.rowColGroup());
                }
                i++;
            }
            i = 0;
            while (i < diff) {
                rowArr.removeAt(rowArr.length - 1);
                i++;
            }
        }
        completeQuestion.data.get('fieldOptions.row').patchValue(rawColArr);
        completeQuestion.data.get('fieldOptions.col').patchValue(rawRowArr);
    };
    return SurveyQuestionEditService;
}());
SurveyQuestionEditService = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_questionTemplates_question_types_service__["a" /* QuestionTypesService */]) === "function" && _a || Object])
], SurveyQuestionEditService);

var _a;
//# sourceMappingURL=survey.question.edit.service.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.randomization/randomization.service.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RandomizationService; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var RandomizationService = (function () {
    function RandomizationService() {
        this.randomizationElements = {
            randomType: null,
            state: 0,
            randomCount: null,
            setCounter: 0,
            setIdArr: [],
            setMap: {},
            flow: [{
                    elemId: '',
                    type: '',
                    setId: ''
                }]
        };
    }
    RandomizationService.prototype.createOrModifyRandomization = function (elems) {
    };
    RandomizationService.prototype.deleteRandomization = function (elems) {
    };
    return RandomizationService;
}());
RandomizationService = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(),
    __metadata("design:paramtypes", [])
], RandomizationService);

//# sourceMappingURL=randomization.service.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.randomization/survey.randomization.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"survey_flow_content\" style=\"margin-left: 10px; margin-top: 10px;\">\n  <div *ngIf=\"!showAdvanceRandomization\" class=\"ran_label\">{{(ranInpData.type == 'Page')?'Survey':(ranInpData.type == 'Question')?'Page':'Question'}} Randomization Type\n    <label class=\"switch\" style=\"float: right;\">\n      <input type=\"checkbox\" class=\"on_off_custom\" (change)=\"offOnRandomization($event)\" [checked]=\"finalRandomObj.state\">\n      <span class=\"slider round\"></span>\n    </label>\n  </div>\n  <div *ngIf=\"showAdvanceRandomization\" style=\"text-align:left;\">\n    <div style=\"display: inline-block;\" class=\"ran_label\">\n      {{(ranInpData.type == 'Page')?'Survey':(ranInpData.type == 'Question')?'Page':'Question'}} Randomization - Advance\n      <img src=\"./assets/images/editSurvey/upward-arrow.svg\" (click)=\"showAdvanceRandomized()\" style=\"cursor: pointer;\">\n    </div>\n    <div style=\"display: inline-block; float: right;\">\n      <label class=\"inner_ran_radio_inp\">\n        <button class=\"btn btn_ran_gen\" [ngClass]=\"openEditSet? 'active' : ''\" style=\"line-height: 1;\" (click)=\"toggleEditSet();\">Edit Sets</button>\n      </label>\n    </div>\n  </div>\n  <div class=\"ran_input_radio\" [ngStyle]=\"{'opacity': opacity, 'pointer-events': pointeevts}\">\n    <div>\n      <label class=\"response_type\" *ngIf=\"!showAdvanceRandomization\">\n        <input type=\"radio\" name=\"randomization_option\" value=\"1\"  [checked]=\"finalRandomObj.randomType == 1\" style=\"margin-right:8px;\" (click)=\"saveFinalObj(1);\">\n        Randomize all {{ranInpData.type}}\n      </label>\n    </div>\n    <div style=\"margin-top: 20px;\">\n      <label class=\"response_type\" *ngIf=\"!showAdvanceRandomization\">\n        <input type=\"radio\" name=\"randomization_option\" value=\"2\" [checked]=\"finalRandomObj.randomType == 2\" style=\"margin-right:8px;\" (click)=\"saveFinalObj(2);\">\n        Total\n        <input type=\"number\" style=\"max-width: 44px; margin-left: 3px; text-align:center;\" min=\"0\" [(ngModel)]=\"finalRandomObj.randomCount\" (keyup.enter)=\"saveFinalObj();\" (blur)=\"saveFinalObj();\">\n        out of all the choices\n      </label>\n    </div>\n    <div style=\"margin-top: 20px;\">\n      <label class=\"response_type\" *ngIf=\"!showAdvanceRandomization\">\n        <input type=\"radio\" (click)=\"showAdvanceRandomized();saveFinalObj(3);\" name=\"randomization_option\" value=\"3\" [checked]=\"finalRandomObj.randomType  == 3\" style=\"margin-right:8px;\">\n        Advance Options\n      </label>\n    </div>\n  </div>\n  <div class=\"survey_ran_content\" *ngIf=\"showAdvanceRandomization && !openEditSet\">\n    <ul class=\"sur_ran_page_ul\">\n      <li class=\"sur_ran_page_li\" *ngFor=\"let part of allPagesAndQues | keys;\">\n        <span class=\"first_pg_span\">\n          <span>\n            <span class=\"page_num\"><span>{{(ranInpData.type == 'Page')?'P':((ranInpData.type == 'Question')?'Q':'O')}}{{toInt(part)+1}}</span></span>\n            <span class=\"page_title\">\n              <span [innerHTML]=\"(ranInpData.type == 'Options')? allPagesAndQues[part].text : allPagesAndQues[part].title\"></span>\n            </span>\n          </span>\n        </span>\n        <ul class=\"sur_ran_ques_ul\">\n          <li class=\"sur_ran_ques_li\" *ngIf=\"!openRandomOpts[allPagesAndQues[part]._id]\">\n            <div class=\"ran_radio_inp\">\n              <label class=\"inner_ran_radio_inp\" [ngClass]=\"getFlowByElemID(allPagesAndQues[part]._id).type == 1 ? 'active' : ''\">\n                <input type=\"radio\" name=\"{{allPagesAndQues[part]._id}}\" [value]=\"1\" (click)=\"saveFinalObj('fx', allPagesAndQues[part]._id)\" [checked]=\"getFlowByElemID(allPagesAndQues[part]._id).type  == 1\">\n                <span>Fixed</span>\n              </label>\n              <label class=\"inner_ran_radio_inp\" [ngClass]=\"getFlowByElemID(allPagesAndQues[part]._id).type == 3 ? 'active' : ''\">\n                <input type=\"radio\" name=\"{{allPagesAndQues[part]._id}}\" [value]=\"3\" (click)=\"openRandomOptions(allPagesAndQues[part]._id);\" [checked]=\"getFlowByElemID(allPagesAndQues[part]._id).type  == 3\">\n                <span>Random</span>\n              </label>\n              <label class=\"inner_ran_radio_inp\" [ngClass]=\"getFlowByElemID(allPagesAndQues[part]._id).type == 2 ? 'active' : ''\">\n                <input type=\"radio\" name=\"{{allPagesAndQues[part]._id}}\" [value]=\"2\" (click)=\"saveFinalObj('hd', allPagesAndQues[part]._id)\" [checked]=\"getFlowByElemID(allPagesAndQues[part]._id).type == 2\">\n                <span>Hidden</span>\n              </label>\n            </div>\n          </li>\n          <label class=\"sur_ran_ques_li ran_radio_inp\" *ngIf=\"openRandomOpts[allPagesAndQues[part]._id]\"  style=\"border: none; text-align: left;\">\n            <span style=\"color: #3A3A3A;\tfont-family: 'Helvetica';\tfont-size: 14px;\tline-height: 16px;\">Set</span>\n              <div class=\"btn-group\" *ngIf=\"setMap[allPagesAndQues[part]._id]['name'] != '+ Create New'\" dropdown>\n                <button dropdownToggle type=\"button\" class=\"btn dropdown-toggle\"  style=\"padding: 8px 8px; margin-left: 24px; min-width: 224px; max-width: 245px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;\">\n                  <span class=\"ran_set_btn_name\">{{(setMap[allPagesAndQues[part]._id] && setMap[allPagesAndQues[part]._id]['name'] != 'NA')?(setMap[allPagesAndQues[part]._id]['name']):'No Set Selected'}}</span>\n                  <span class=\"rating_types_dd_arrow\"></span>\n                </button>\n                <ul *dropdownMenu class=\"dropdown-menu\" role=\"menu\" style=\"min-width: 273px; line-height: 36px;\">\n                  <li role=\"menuitem\" *ngFor=\"let set of sets[id]\">\n                    <div class=\"dropdown-item\" style=\"padding-left: 8px;\"\n                      (click)=\"selectSetToPart(allPagesAndQues[part]._id, set)\">\n                      {{set['name']}}\n                    </div>\n                  </li>\n                </ul>\n              </div>\n              <!-- {{(setMap[allPagesAndQues[part]._id] && setMap[allPagesAndQues[part]._id]['name'] != '+ Create New' && setMap[allPagesAndQues[part]._id]['name'] != 'NA')?('Count: '+setMap[allPagesAndQues[part]._id]['count']):''}} -->\n              <span *ngIf=\"setMap[allPagesAndQues[part]._id]['name'] == '+ Create New'\" style=\"margin-left: 24px;\">\n                <input type=\"text\" (keyup.enter)=\"setMap[allPagesAndQues[part]._id]['name'] = $event.target.value; this.setMap[allPagesAndQues[part]._id]['count'] = 0; saveNewSet(allPagesAndQues[part]._id);\"\n                  (blur)=\"setMap[allPagesAndQues[part]._id]['name'] = $event.target.value; this.setMap[allPagesAndQues[part]._id]['count'] = 0; saveNewSet(allPagesAndQues[part]._id);\" style=\"padding: 8px 8px; min-width: 224px;\">\n              </span>\n              <span style=\"cursor: pointer;\" (click)=\"cancelSet(allPagesAndQues[part]._id)\" style=\"margin-left: 16px; cursor: pointer;\">\n                <img src=\"./assets/images/editSurvey/upward-arrow.svg\" style=\"max-width: 18px;\">\n              </span>\n          </label>\n        </ul>\n      </li>\n    </ul>\n  </div>\n<!-- Edit set -->\n  <div class=\"survey_ran_content\" *ngIf=\"showAdvanceRandomization && openEditSet\">\n    <ul class=\"sur_ran_page_ul\">\n      <div class=\"set_title\">Sets</div>\n      <li *ngFor=\"let setID of sets[id] | keys;\">\n        <div class=\"sur_ran_page_li\" *ngIf=\"(sets[id][setID]['name'] != '+ Create New') && (sets[id][setID]['name'] != 'NA')\" style=\"text-align:left; min-height: 66px;\">\n          <div style=\"display:inline-block; vertical-align:top;\"><textarea title=\"Set Name\" class=\"set_name\" [(ngModel)]=\"sets[id][setID]['name']\">{{sets[id][setID]['name']}}</textarea></div>\n          <div (click)=\"toggleSetLists(setID)\" style=\"display:inline-block; vertical-align:top;\">\n            <img src=\"./assets/images/editSurvey/dropdown-arrow.svg\" style=\"cursor: pointer;\">\n          </div>\n          <div style=\"display:inline-block; float:right;\">\n            <div style=\"display:inline-block; margin-right: 12px;\">\n              <div style=\"margin-bottom: 8px;\"><span>View Count</span><input type=\"number\" [(ngModel)]=\"sets[id][setID]['viewCount']\" style=\"margin-left: 25px; padding: 2px 2px; max-width: 40px;max-height: 20px;\" min=\"0\"></div>\n            </div>\n            <div style=\"display:inline-block; margin-right: 12px; cursor: pointer; vertical-align:top;\" (click)=\"saveSet(setID)\">\n              <img src=\"./assets/images/editSurvey/save.svg\">\n            </div>\n            <div style=\"display:inline-block; cursor: pointer;  vertical-align:top;\" (click)=\"deleteSet(setID)\">\n              <img src=\"./assets/images/editSurvey/delete.svg\">\n            </div>\n          </div>\n          <ul class=\"sur_flow_ques_ul\" [hidden]=\"!setListShow[id][setID]\">\n            <li class=\"sur_flow_ques_li\" *ngFor=\"let part of allPagesAndQues | keys;\">\n              <div class=\"first_ques_span\" style=\"padding-left: 8px; text-align: left;\" *ngIf=\"setMap[allPagesAndQues[part]._id]['name'] == sets[id][setID]['name']\">\n                <div [innerHTML]=\"(ranInpData.type == 'Options')? ((allPagesAndQues[part].text != '')?allPagesAndQues[part].text:'--Untitled--') : ((allPagesAndQues[part].title != '')?allPagesAndQues[part].title:'--Untitled--')\" class=\"set_list_name\"></div>\n                <div style=\"display: inline-block; float: right;\"><label style=\"margin-right: 12px;\">Count </label><input type=\"number\" style=\"max-width: 40px;\" [(ngModel)]=\"setMap[allPagesAndQues[part]._id]['count']\" min=\"0\"></div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </li>\n      <div *ngIf=\"sets[id].length == 1\">\n        Not Set Found!\n      </div>\n    </ul>\n  </div>\n\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.randomization/survey.randomization.component.scss":
/***/ (function(module, exports) {

module.exports = ".ran_footer_btns_div {\n  margin: 30px 0 10px 0;\n  text-align: center; }\n  .ran_footer_btns_div button {\n    margin-left: 10px; }\n  .ran_input_radio {\n  margin-top: 32px; }\n  .ran_input_radio label {\n    cursor: pointer; }\n  .response_type {\n  color: #3A3A3A;\n  font-family: \"Helvetica\";\n  font-size: 14px;\n  line-height: 17px; }\n  .ran_label {\n  color: #3A3A3A;\n  font-family: \"Helvetica\";\n  font-size: 14px;\n  font-weight: bold;\n  line-height: 17px; }\n  .collapse_sur_flow_right {\n  margin-left: 4px;\n  height: 20px;\n  cursor: pointer; }\n  .ran_save_btn {\n  background-color: #2392ed;\n  color: white;\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n  padding: 6px 20px; }\n  .ran_cancel_btn {\n  background-color: white;\n  border: 1px solid #2392ed;\n  color: #2392ed;\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n  padding: 6px 20px; }\n  .ran_table {\n  margin-top: 8px;\n  border-spacing: 1;\n  border-collapse: collapse;\n  background: white;\n  border-radius: 6px;\n  overflow: auto;\n  max-width: 800px;\n  width: 100%;\n  margin: 0 auto;\n  position: relative; }\n  .ran_table * {\n    position: relative; }\n  .ran_table thead tr {\n    height: 60px;\n    font-size: 12px; }\n  .ran_table tbody tr {\n    height: 48px;\n    border-bottom: 1px solid #E3F1D5; }\n  .ran_table tbody tr:last-child {\n      border: 0; }\n  .ran_table td, .ran_table th {\n    text-align: center; }\n  .ran_table td.l, .ran_table th.l {\n      text-align: center; }\n  .ran_table td.c, .ran_table th.c {\n      text-align: center; }\n  .ran_table td.r, .ran_table th.r {\n      text-align: center; }\n  .ran_table td {\n    text-overflow: ellipsis;\n    word-break: break-all;\n    overflow: hidden;\n    white-space: nowrap;\n    max-width: 40px; }\n  .ran_table td:hover {\n    overflow: visible;\n    white-space: normal;\n    height: auto;\n    /* just added this line */ }\n  .ran_radio_inp {\n  border: 1px solid #EBEBEB;\n  border-radius: 4px;\n  display: table;\n  font-family: \"Helvetica\";\n  font-size: 14px;\n  line-height: 16px;\n  color: #AAAAAA;\n  width: 100%;\n  text-align: center;\n  font-family: 'Helvetica Neue Medium'; }\n  .ran_radio_inp > .inner_ran_radio_inp {\n  padding: 9px 11px;\n  display: table-cell;\n  cursor: pointer;\n  font-weight: 500;\n  color: #AAAAAA; }\n  .ran_radio_inp > .inner_ran_radio_inp input[type=radio] {\n  display: none; }\n  .ran_radio_inp > .inner_ran_radio_inp:not(:last-child) {\n  border-right: 1px solid #EBEBEB;\n  color: #AAAAAA; }\n  .ran_radio_inp > .inner_ran_radio_inp.active {\n  color: #3A3A3A;\n  background-color: #EBEBEB; }\n  .set_title {\n  margin: 12px 0px;\n  font-size: 16px;\n  font-weight: bold; }\n  .btn_ran_gen.active {\n  color: white;\n  background-color: #2772ba; }\n  .set_name {\n  font-weight: 800;\n  border: #afafae 1px solid;\n  border-radius: 4px;\n  padding: 4px;\n  max-width: 100px;\n  white-space: break-word; }\n  .set_list_name {\n  text-overflow: ellipsis;\n  display: inline-block;\n  width: calc(100% - 100px);\n  overflow: hidden;\n  white-space: nowrap; }\n  .set_list_name:hover {\n  overflow: visible;\n  white-space: normal;\n  height: auto;\n  word-wrap: break-word; }\n  .survey_ran_content .sur_ran_page_ul {\n  list-style-type: none;\n  padding-left: 0; }\n  .survey_ran_content .sur_ran_ques_ul {\n  list-style-type: none;\n  padding-left: 0px;\n  padding-top: 8px;\n  position: relative; }\n  .survey_ran_content .sur_ran_page_li {\n  margin-bottom: 12px;\n  border: 1px solid #EDEDED;\n  padding: 8px; }\n  .survey_ran_content .sur_ran_page_li .first_pg_span {\n    border-bottom: 1px solid #EDEDED;\n    width: 100%;\n    display: inline-block;\n    padding: 3px 3px 10px 0px;\n    font-size: 12px;\n    margin: 4px 0;\n    font-family: 'Helvetica Neue Medium';\n    position: relative; }\n  .survey_ran_content .sur_ran_page_li .first_pg_span.collapse:before {\n    content: '';\n    background: url(/assets/images/editSurvey/dropdown-arrow.svg);\n    background-repeat: no-repeat;\n    position: absolute;\n    right: -7px;\n    top: 0px;\n    height: 20px;\n    width: 20px;\n    background-size: 50%;\n    -webkit-transform: rotate(-90deg);\n            transform: rotate(-90deg); }\n  .survey_ran_content .sur_ran_page_li .first_pg_span.open:before {\n    content: '';\n    background: url(/assets/images/editSurvey/dropdown-arrow.svg);\n    background-repeat: no-repeat;\n    position: absolute;\n    right: -3px;\n    top: 12px;\n    height: 20px;\n    width: 20px;\n    background-size: 50%; }\n  .survey_ran_content .sur_ran_page_li .page_num {\n    background-color: #404653;\n    color: white;\n    padding: 4px;\n    border-radius: 2px;\n    margin-right: 10px; }\n  .survey_ran_content .sur_ran_page_li .page_title {\n    font-family: 'Helvetica Neue Bold';\n    display: inline-block;\n    vertical-align: middle;\n    text-overflow: ellipsis;\n    width: calc(100% - 40px);\n    overflow: hidden;\n    white-space: nowrap; }\n  .survey_ran_content .sur_ran_page_li .page_title:hover {\n    overflow: visible;\n    white-space: normal;\n    height: auto;\n    word-wrap: break-word; }\n  .survey_ran_content .sur_ran_page_li .total_ques_count {\n    float: right;\n    margin-right: 18px; }\n  .survey_ran_content .sur_ran_ques_li {\n  position: relative; }\n  .survey_ran_content .sur_ran_ques_li .first_ques_span {\n    border-bottom: 1px solid #EDEDED;\n    width: 100%;\n    display: inline-block;\n    padding: 6px;\n    font-size: 12px;\n    margin: 4px 0;\n    font-family: 'Helvetica Neue Medium'; }\n  .survey_ran_content .sur_ran_ques_li .ques_icon {\n    border-right: 1px solid #bbb9ba;\n    padding: 0 6px 0 0;\n    margin-right: 3px; }\n  .survey_ran_content .sur_ran_ques_li .ques_icon img {\n    height: 18px;\n    width: 26px; }\n  .survey_ran_content .sur_ran_ques_li .ques_title {\n    display: inline-block;\n    vertical-align: middle; }\n  .survey_ran_content .sur_ran_ques_li:last-child {\n  margin-bottom: 6px; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.randomization/survey.randomization.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyRandomizationComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__randomization_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.randomization/randomization.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var SurveyRandomizationComponent = (function () {
    function SurveyRandomizationComponent(services, randServices, editDataServices) {
        this.services = services;
        this.randServices = randServices;
        this.editDataServices = editDataServices;
        this.id = "";
        this.openRandomOpts = [];
        this.sets = [];
        this.setMap = [];
        this.setListShow = [];
        this.showAdvanceRandomization = false;
        this.openEditSet = false;
        this.finalRandomObj = {
            flow: [],
            randomCount: 0,
            randomType: 0,
            setCounter: 0,
            setIdArr: [],
            setMap: [],
            state: 0,
            title: ""
        };
        this.randomID = "";
        this.pointeevts = 'auto';
        this.opacity = 1;
    }
    SurveyRandomizationComponent.prototype.ngOnInit = function () {
        this.formObj = this.services.form.formObj;
        this.finalRandomObj.state = 0;
        this.finalRandomObj.title = this.formObj.getSurveyTitle();
        console.log("formOBj", this.formObj);
        var allData = this.services.form.getAllPagesAndQuestions();
        if (this.ranInpData.type == "Page") {
            this.id = 'page';
            this.allPagesAndQues = this.formObj.pageFields; //allData['data'];
            this.randObj = this.formObj.getRandomise();
            console.log("indv survey level", this.allPagesAndQues);
        }
        else if (this.ranInpData.type == "Question") {
            this.allPagesAndQues = allData['data'][this.ranInpData.pid].ques;
            this.id = this.ranInpData.pid;
            console.log("pgbyid", this.formObj.getPageById(this.id));
            this.randObj = this.formObj.getPageById(this.id).getRandomise();
            console.log("indv page level", this.allPagesAndQues);
        }
        else if (this.ranInpData.type == "Options") {
            this.completeQuestionData = this.services.form.allQuestionsOfSurvey;
            this.allPagesAndQues = this.completeQuestionData[this.ranInpData.qid].fieldOptions.row;
            this.id = this.ranInpData.qid;
            this.randObj = this.formObj.getQuestionById(this.id).getRandomise();
            // console.log(this.services.utils.getTextOutOfHtml())
            console.log("indv ques level", this.allPagesAndQues);
        }
        if (typeof this.randObj != undefined && this.randObj != null && this.randObj != "") {
            this.finalRandomObj.flow = (typeof this.randObj.flow != "undefined" && this.randObj.flow != "") ? this.randObj.flow : [];
            this.finalRandomObj.randomCount = (typeof this.randObj.randomCount != "undefined" && this.randObj.randomCount != "") ? this.randObj.randomCount : 0;
            this.finalRandomObj.randomType = (typeof this.randObj.randomType != "undefined" && this.randObj.randomType != "") ? this.randObj.randomType : 0;
            this.finalRandomObj.setCounter = isNaN(parseInt(this.randObj.setCounter)) ? 0 : parseInt(this.randObj.setCounter);
            this.finalRandomObj.setIdArr = (typeof this.randObj.setIdArr != "undefined" && this.randObj.setIdArr != "") ? this.randObj.setIdArr : [];
            this.finalRandomObj.setMap = (typeof this.randObj.setMap != "undefined" && this.randObj.setMap != "") ? this.randObj.setMap : [];
            this.finalRandomObj.title = (typeof this.randObj.title != "undefined" && this.randObj.title != "") ? this.randObj.title : "";
            this.randomID = (typeof this.randObj._id != "undefined" && this.randObj._id != "") ? this.randObj._id : "";
            this.finalRandomObj.state = (typeof this.randObj.state != "undefined" && this.randObj.state != "") ? this.randObj.state : "";
        }
        console.log("this.randomID", this.randomID);
        if (this.finalRandomObj.state) {
            this.pointeevts = 'auto';
            this.opacity = 1;
        }
        else {
            this.pointeevts = 'none';
            this.opacity = 0.3;
        }
        if (this.finalRandomObj.randomType == 3 && this.finalRandomObj.state) {
            this.showAdvanceRandomization = true;
        }
        console.log("randObj", this.randObj);
        if (typeof this.allPagesAndQues == "undefined" || this.allPagesAndQues.length == 0) {
            this.services.toastr.error("No Data to Allot Randomization!");
        }
        this.sets[this.id] = [];
        this.setListShow[this.id] = [];
        this.sets[this.id].push({ 'name': "+ Create New", "viewCount": 0, "setId": "CN", "oldName": "+ Create New" });
        for (var ss in this.finalRandomObj.setMap) {
            this.sets[this.id].push({ "name": this.finalRandomObj.setMap[ss].name, "viewCount": this.finalRandomObj.setMap[ss].count, "setId": ss, "oldName": this.finalRandomObj.setMap[ss].name });
            if (typeof this.finalRandomObj.setMap[ss].elemArr != undefined) {
                for (var elss in this.finalRandomObj.setMap[ss].elemArr) {
                    if (typeof this.finalRandomObj.setMap[ss].elemArr[elss].elemId != undefined && this.finalRandomObj.setMap[ss].elemArr[elss].elemId != "" && !this.existsInAllPagesAndQues(this.finalRandomObj.setMap[ss].elemArr[elss].elemId)) {
                        delete this.finalRandomObj.setMap[ss].elemArr[elss];
                    }
                }
            }
        }
        for (var ssfl in this.finalRandomObj.flow) {
            if (typeof this.finalRandomObj.flow[ssfl].elemId != undefined && this.finalRandomObj.flow[ssfl].elemId != "" && !this.existsInAllPagesAndQues(this.finalRandomObj.flow[ssfl].elemId)) {
                delete this.finalRandomObj.flow[ssfl];
            }
        }
        for (var part1 in this.allPagesAndQues) {
            var part1ExistsInFinalRandomObj = false;
            for (var ssfl in this.finalRandomObj.flow) {
                if (typeof this.finalRandomObj.flow[ssfl].elemId != undefined && this.finalRandomObj.flow[ssfl].elemId != "" && this.finalRandomObj.flow[ssfl].elemId == this.allPagesAndQues[part1]._id) {
                    part1ExistsInFinalRandomObj = true;
                }
            }
            if (!part1ExistsInFinalRandomObj) {
                var rfNO = new RandomFlow();
                rfNO["elemId"] = this.allPagesAndQues[part1]._id;
                rfNO["setId"] = "";
                rfNO["type"] = 1;
                this.finalRandomObj.flow.push(rfNO);
            }
        }
        var flowLen = this.finalRandomObj.flow.length;
        var _loop_1 = function (part) {
            console.log(this_1.allPagesAndQues[part]._id);
            this_1.setMap[this_1.allPagesAndQues[part]._id] = { 'name': "NA", "count": 0, "setId": "" };
            this_1.openRandomOpts[this_1.allPagesAndQues[part]._id] = false;
            var pt;
            if (flowLen > 0) {
                var flow_1 = this_1.finalRandomObj.flow;
                var _loop_2 = function () {
                    if (flow_1[pt].elemId == this_1.allPagesAndQues[part]._id) {
                        if (flow_1[pt].setId != "" && flow_1[pt].type == 3) {
                            var sMP = this_1.finalRandomObj.setMap[flow_1[pt].setId];
                            var sEA_1 = sMP.elemArr;
                            console.log("sMP", sMP);
                            console.log("flow[pt].elemId", flow_1[pt].elemId);
                            var pMP = sEA_1.filter(function (i, v) { return sEA_1[v].elemId == flow_1[pt].elemId; });
                            console.log("pMP", pMP);
                            this_1.setMap[this_1.allPagesAndQues[part]._id] = { 'name': sMP.name, "count": (typeof pMP[0] == "undefined" || pMP.length == 0) ? 0 : pMP[0].viewCount, "setId": flow_1[pt].setId };
                            this_1.openRandomOpts[this_1.allPagesAndQues[part]._id] = true;
                        }
                    }
                };
                for (pt in flow_1) {
                    _loop_2();
                }
            }
            else {
                console.log("HERE:", this_1.allPagesAndQues[part]);
                var rfNO = new RandomFlow();
                rfNO["elemId"] = this_1.allPagesAndQues[part]._id;
                rfNO["setId"] = "";
                rfNO["type"] = 1;
                this_1.finalRandomObj.flow.push(rfNO);
            }
        };
        var this_1 = this;
        for (var part in this.allPagesAndQues) {
            _loop_1(part);
        }
        console.log("allsetMap", this.setMap);
        console.log("allset", this.sets);
        console.log("FINALOBJ", this.finalRandomObj);
    };
    SurveyRandomizationComponent.prototype.toInt = function (s) {
        return (!isNaN(parseInt(s))) ? parseInt(s) : null;
    };
    SurveyRandomizationComponent.prototype.openRandomOptions = function (part) {
        this.openRandomOpts[part] = !this.openRandomOpts[part];
        console.log("parts::", this.openRandomOpts[part]);
    };
    SurveyRandomizationComponent.prototype.setSet = function (partId) {
        this.openRandomOpts[partId] = false;
        this.services.toastr.success("Successfully assigned " + this.setMap[partId]['name'] + " !");
        console.log("set", this.setMap[partId]);
    };
    SurveyRandomizationComponent.prototype.existsInAllPagesAndQues = function (i_idx) {
        var exists = false;
        for (var par in this.allPagesAndQues) {
            if (this.allPagesAndQues[par]._id == i_idx) {
                exists = true;
            }
        }
        return exists;
    };
    SurveyRandomizationComponent.prototype.offOnRandomization = function (event) {
        this.finalRandomObj.state = !this.finalRandomObj.state;
        if (this.finalRandomObj.state) {
            this.pointeevts = 'auto';
            this.opacity = 1;
        }
        else {
            this.pointeevts = 'none';
            this.opacity = 0.3;
        }
        console.log("eve", event);
        console.log("this.finalRandomObj", this.finalRandomObj);
        console.log("this.randomID", this.randomID);
        if (this.randomID) {
            this.saveFinalObj();
        }
    };
    SurveyRandomizationComponent.prototype.saveSet = function (setID) {
        var val = this.sets[this.id][setID];
        console.log("saveset val:", val);
        if (typeof val == "undefined" || val['name'] == "+ Create New" || val['name'] == "" || val['name'] == "NA") {
            this.services.toastr.error("Please select a set to save.");
            return;
        }
        this.setListShow[this.id][setID] = false;
        if (val['name'] != val['oldName']) {
            for (var part in this.allPagesAndQues) {
                if (this.setMap[this.allPagesAndQues[part]._id]['name'] == val['oldName']) {
                    this.setMap[this.allPagesAndQues[part]._id]['name'] = val['name'];
                }
            }
            this.sets[this.id][setID]['oldName'] = this.sets[this.id][setID]['name'];
        }
        var elemObjArr = [];
        for (var part in this.allPagesAndQues) {
            if (this.setMap[this.allPagesAndQues[part]._id]['setId'] == this.sets[this.id][setID]["setId"]) {
                elemObjArr.push({ "elemId": this.allPagesAndQues[part]._id, "viewCount": this.setMap[this.allPagesAndQues[part]._id]['count'] });
            }
        }
        var rSNO = new RandomSet();
        rSNO["count"] = this.sets[this.id][setID]['viewCount'];
        rSNO["elemArr"] = elemObjArr;
        rSNO["name"] = this.sets[this.id][setID]['name'];
        this.finalRandomObj.setMap[this.sets[this.id][setID]["setId"]] = rSNO;
        this.services.toastr.success("Successfully saved " + val['name'] + " !");
        console.log("FINALOBJ", this.finalRandomObj);
        this.saveFinalObj("setSet", this.sets[this.id][setID]["setId"]);
    };
    SurveyRandomizationComponent.prototype.deleteSet = function (setID) {
        var val = this.sets[this.id][setID];
        var sSID = this.sets[this.id][setID]["setId"];
        console.log("deleteSet val:", val);
        console.log("deleteSet sSID:", sSID);
        if (typeof val == "undefined" || val['name'] == "+ Create New" || val['name'] == "" || val['name'] == "NA") {
            this.services.toastr.error("Select a Set to delete!");
            return;
        }
        for (var pt in this.sets[this.id]) {
            if ((pt + 1) < setID) {
                this.setListShow[this.id][pt] = this.setListShow[this.id][pt];
            }
            else if (((pt + 1) > setID) && ((pt + 1) <= this.sets[this.id].length)) {
                this.setListShow[this.id][pt] = this.setListShow[this.id][pt + 1];
            }
        }
        this.setListShow[this.id].pop();
        delete this.finalRandomObj.setMap[sSID];
        var sMA = this.finalRandomObj.setIdArr;
        this.finalRandomObj.setIdArr = sMA.filter(function (i, v) { return sMA[v] != sSID; });
        this.sets[this.id] = this.sets[this.id].filter(function (item) { return item['name'] !== val['name']; });
        console.log("deleteSet sets:", this.sets);
        for (var pt in this.allPagesAndQues) {
            if (this.setMap[this.allPagesAndQues[pt]._id]['name'] == val['name']) {
                this.setMap[this.allPagesAndQues[pt]._id]['setId'] = "";
                this.setMap[this.allPagesAndQues[pt]._id]['name'] = "NA";
                this.setMap[this.allPagesAndQues[pt]._id]['count'] = 0;
                this.openRandomOpts[this.allPagesAndQues[pt]._id] = false;
            }
        }
        for (var flArr in this.finalRandomObj.flow) {
            if (this.finalRandomObj.flow[flArr].setId == sSID) {
                this.finalRandomObj.flow[flArr].type = 1;
                this.finalRandomObj.flow[flArr].setId = "";
            }
        }
        this.services.toastr.success("Successfully deleted " + val['name'] + " !");
        console.log("FINALOBJ", this.finalRandomObj);
        console.log("cancel", setID);
        this.saveFinalObj("deleteSet", sSID);
    };
    SurveyRandomizationComponent.prototype.cancelSet = function (partId) {
        if (this.setMap[partId]['name'] == '' || this.setMap[partId]['name'] == '+ Create New') {
            this.setMap[partId]['name'] = "NA";
            this.setMap[partId]['count'] = 0;
            this.setMap[partId]['setId'] = "";
        }
        else {
            this.openRandomOpts[partId] = false;
        }
    };
    SurveyRandomizationComponent.prototype.saveNewSet = function (partId) {
        if (typeof this.setMap[partId]['name'] == "undefined" ||
            this.setMap[partId]['name'] == "NA" ||
            this.setMap[partId]['name'] == "+ Create New" ||
            this.setMap[partId]['name'].trim().length == 0) {
            this.services.toastr.error("Please input a value!");
            return;
        }
        for (var pt in this.sets[this.id]) {
            if (this.sets[this.id][pt]['name'] == this.setMap[partId]['name']) {
                this.services.toastr.error("Set already exists!");
                this.selectSetToPart(partId, this.sets[this.id][pt]);
                return;
            }
        }
        this.finalRandomObj.setCounter++;
        this.setListShow[this.id][this.sets[this.id].count] = false;
        this.setMap[partId]['setId'] = "SID" + this.finalRandomObj.setCounter;
        this.sets[this.id].push({ "name": this.setMap[partId]['name'], "setId": "SID" + this.finalRandomObj.setCounter, "viewCount": 0, "oldName": this.setMap[partId]['name'] });
        this.setSet(partId);
        for (var ffl in this.finalRandomObj.flow) {
            if (this.finalRandomObj.flow[ffl].elemId == partId) {
                this.finalRandomObj.flow[ffl].setId = "SID" + this.finalRandomObj.setCounter;
                this.finalRandomObj.flow[ffl].type = 3;
            }
        }
        this.finalRandomObj.randomType = 3;
        this.finalRandomObj.setIdArr.push("SID" + this.finalRandomObj.setCounter);
        var elemObj = { "elemId": partId, "viewCount": 0 };
        var rSNO = new RandomSet();
        rSNO["count"] = 0;
        rSNO["elemArr"] = [elemObj];
        rSNO["name"] = this.setMap[partId]['name'];
        this.finalRandomObj.setMap["SID" + this.finalRandomObj.setCounter] = rSNO;
        console.log("FINALOBJ", this.finalRandomObj);
        this.saveFinalObj("saveNewSet", "SID" + this.finalRandomObj.setCounter);
    };
    SurveyRandomizationComponent.prototype.selectSetToPart = function (ptid, set) {
        this.setMap[ptid]['name'] = set['name'];
        this.setMap[ptid]['count'] = 0;
        if (set['name'] != '+ Create New') {
            this.setSet(ptid);
            this.setMap[ptid]['setId'] = set['setId'];
            for (var k = 0; k < this.finalRandomObj.flow.length; k++) {
                if (this.finalRandomObj.flow[k].elemId == ptid) {
                    this.finalRandomObj.flow[k].setId = set['setId'];
                    this.finalRandomObj.flow[k].type = 3;
                    break;
                }
            }
            this.finalRandomObj.randomType = 3;
            var elemObj = { "elemId": ptid, "viewCount": 0 };
            this.finalRandomObj.setMap[set['setId']].elemArr.push(elemObj);
            this.saveFinalObj("setSetAndUpdate", set['setId']);
        }
        else {
            this.setMap[ptid]['setId'] = '';
        }
        console.log("FINALOBJ", this.finalRandomObj);
    };
    SurveyRandomizationComponent.prototype.showAdvanceRandomized = function () {
        this.showAdvanceRandomization = !this.showAdvanceRandomization;
        console.log(this.showAdvanceRandomization);
    };
    SurveyRandomizationComponent.prototype.toggleEditSet = function () {
        this.openEditSet = !this.openEditSet;
    };
    SurveyRandomizationComponent.prototype.toggleSetLists = function (key) {
        this.setListShow[this.id][key] = !this.setListShow[this.id][key];
    };
    SurveyRandomizationComponent.prototype.getFlowByElemID = function (ptid) {
        if (this.finalRandomObj.flow.length > 0) {
            for (var k in this.finalRandomObj.flow) {
                if (this.finalRandomObj.flow[k].elemId == ptid) {
                    return this.finalRandomObj.flow[k];
                }
            }
        }
        else {
            return { type: 1 };
        }
    };
    SurveyRandomizationComponent.prototype.setFlowByElemID = function (ptid, val) {
        var setIdLoc = "";
        for (var k in this.finalRandomObj.flow) {
            if (this.finalRandomObj.flow[k].elemId == ptid) {
                this.finalRandomObj.flow[k].type = val;
                setIdLoc = this.finalRandomObj.flow[k].setId;
                this.finalRandomObj.flow[k].setId = "";
            }
        }
        if (setIdLoc) {
            for (var k in this.finalRandomObj.setMap[setIdLoc].elemArr) {
                if (this.finalRandomObj.setMap[setIdLoc].elemArr[k].elemId = ptid) {
                    this.finalRandomObj.setMap[setIdLoc].elemArr.splice(k, 1);
                }
            }
        }
    };
    SurveyRandomizationComponent.prototype.saveFinalObj = function (tp, sid) {
        var _this = this;
        if (tp === void 0) { tp = ""; }
        if (sid === void 0) { sid = ""; }
        if (typeof tp != undefined && tp != "" && (parseInt(tp) == 1 || parseInt(tp) == 2 || parseInt(tp) == 3))
            this.finalRandomObj.randomType = tp;
        if (tp == 'fx') {
            this.setFlowByElemID(sid, 1);
        }
        if (tp == 'hd') {
            this.setFlowByElemID(sid, 2);
        }
        var data = this.finalRandomObj;
        console.log("final data", data);
        console.log("randomid", this.randomID);
        if (this.randomID == "") {
            var d = {
                "title": this.finalRandomObj.title,
                "randomType": this.finalRandomObj.randomType,
                "ownerId": (this.id == "page") ? this.formObj._id : this.id,
                "state": this.finalRandomObj.state,
                "ownerType": (this.ranInpData.type == "Page") ? "Survey" : ((this.ranInpData.type == "Question") ? "Page" : "Question"),
                "randomCount": this.finalRandomObj.randomCount
            };
            this.services.resource.createRandomization(this.services.form.formObj.getId(), d).subscribe(function (dat) {
                console.log(dat);
                _this.randomID = dat.data._id;
                if (_this.finalRandomObj.randomType == 3) {
                    _this.services.resource.updateRandomization(_this.services.form.formObj.getId(), data, _this.randomID).subscribe(function (dat3) {
                        console.log(dat3);
                    });
                }
                _this.services.toastr.success('Your Randomization has been saved', 'Saved Successfully');
            });
        }
        else if (tp == "setSet" || tp == "setSetAndUpdate") {
            var sObj = this.finalRandomObj.setMap[sid];
            this.services.resource.setSet(sid, sObj, this.randomID).subscribe(function (dat) {
                console.log("setSet", dat);
                if (tp == "setSetAndUpdate") {
                    _this.services.resource.updateRandomization(_this.services.form.formObj.getId(), data, _this.randomID).subscribe(function (dat) {
                        console.log(dat);
                        _this.services.toastr.success('Your Randomization has been saved', 'Saved Successfully');
                    });
                }
            });
        }
        else if (tp == "saveNewSet") {
            var sObj = this.finalRandomObj.setMap[sid];
            this.services.resource.saveNewSet(sid, sObj, this.randomID).subscribe(function (dat) {
                console.log("saveNewSet", dat);
            });
        }
        else if (tp == "deleteSet") {
            var sObj = this.finalRandomObj.setMap[sid];
            this.services.resource.updateRandomization(this.services.form.formObj.getId(), data, this.randomID).subscribe(function (dat) {
                console.log(dat);
                _this.services.resource.deleteSet(sid, _this.randomID).subscribe(function (dat) {
                    console.log("deleSet", dat);
                });
                _this.services.toastr.success('Your Randomization has been saved', 'Saved Successfully');
            });
        }
        else {
            this.services.resource.updateRandomization(this.services.form.formObj.getId(), data, this.randomID).subscribe(function (dat) {
                console.log(dat);
                _this.services.toastr.success('Your Randomization has been saved', 'Saved Successfully');
            });
        }
        if (this.randomID) {
            data._id = this.randomID;
        }
        if (this.ranInpData.type == "Page") {
            this.randObj = this.formObj.setRandomisation(data);
        }
        else if (this.ranInpData.type == "Question") {
            this.randObj = this.formObj.getPageById(this.id).setRandomisation(data);
        }
        else if (this.ranInpData.type == "Options") {
            this.randObj = this.formObj.getQuestionById(this.id).setRandomisation(data);
        }
    };
    return SurveyRandomizationComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(),
    __metadata("design:type", Object)
], SurveyRandomizationComponent.prototype, "ranInpData", void 0);
SurveyRandomizationComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey-randomization',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.randomization/survey.randomization.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.randomization/survey.randomization.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__randomization_service__["a" /* RandomizationService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__randomization_service__["a" /* RandomizationService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__edit_data_service__["a" /* EditDataService */]) === "function" && _c || Object])
], SurveyRandomizationComponent);

var _a, _b, _c;
//# sourceMappingURL=survey.randomization.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.settings/survey.settings.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"inner-left-container\" *ngIf=\"formObj\">\n\t<div class=\"side_bar_tips\">\n\t\t<div class=\"tips_heading dark_text\">\n\t\t\t<span>Survey Settings</span>\n\t\t</div>\n\t\t<div class=\"settings_content\">\n\t\t\t<!-- <div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">Logo</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" #logoCheckbox [(ngModel)]=\"formObj.logo.hasLogo\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-12 col-sm-12 col-xs-12\" [hidden]=\"!logoCheckbox.checked\">\n\t\t\t\t\t<div class=\"logo_config\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4 col-xs-4\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-8 col-sm-8 col-xs-8 text-right\">\n\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t<label class=\"add_logo_label_settings\">\n\t\t\t\t\t\t        <input type=\"file\" class=\"survey_logo\" #surveyLogo (change)=\"logoUploadChange()\">\n\t\t\t\t\t\t        <button type=\"button\" class=\"btn logo_btn sel_logo_btn\" (click)=\"selectLogo()\">Select</button>\n\t\t\t\t\t\t\t    </label>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn logo_btn rep_logo_btn\" (click)=\"replaceLogo()\">Replace</button>\n\t\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn logo_btn rem_logo_btn\" (click)=\"removeLogo()\">Remove</button>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4 col-xs-4 settings_label margintop_4\">\n\t\t\t\t\t\t\t\tSize\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-8 col-sm-8 col-xs-8\">\n\t\t\t\t\t\t\t\t<select class=\"custom_select\" [(ngModel)]=\"formObj.logo.size\" (change)=\"setLogo()\">\n\t\t\t\t\t\t\t\t\t<option value=\"actual\">Actual</option>\n\t\t\t\t\t\t\t\t\t<option value=\"small\">Small(100px)</option>\n\t\t\t\t\t\t\t\t\t<option value=\"medium\">Medium(200px)</option>\n\t\t\t\t\t\t\t\t\t<option value=\"large\">Large(300px)</option>\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4 col-xs-4 settings_label margintop_4\">\n\t\t\t\t\t\t\t\tPosition\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-8 col-sm-8 col-xs-8\">\n\t\t\t\t\t\t\t\t<select class=\"custom_select\" [(ngModel)]=\"formObj.logo.position\" (change)=\"setLogo()\">\n\t\t\t\t\t\t\t\t\t<option value=\"above\">Above Title</option>\n\t\t\t\t\t\t\t\t\t<option value=\"below\">Below Title</option>\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4 col-xs-4 settings_label margintop_4\">\n\t\t\t\t\t\t\t\tAlignment\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-8 col-sm-8 col-xs-8\">\n\t\t\t\t\t\t\t\t<select class=\"custom_select\" [(ngModel)]=\"formObj.logo.allignment\" (change)=\"setLogo()\">\n\t\t\t\t\t\t\t\t\t<option value=\"left\">Left</option>\n\t\t\t\t\t\t\t\t\t<option value=\"right\">Right</option>\n\t\t\t\t\t\t\t\t\t<option value=\"center\">Center</option>\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div> -->\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">Survey Title</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.showTitle\" (change)=\"setSurveyTitle($event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">Exit Link</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.showExit\" (change)=\"setExitLink($event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">Question Progress (Desktop)</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.showQProgDesktop\" (change)=\"setQuesProgDesktop($event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">Question Progress (Mobile/Tab)</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.showQProgMobTab\" (change)=\"setQuesProgMobTab($event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">One Question View (Desktop)</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.singleQuesFocusDesktop\" (change)=\"setSingleQuesFocus('d',$event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">One Question View (Mobile/Tab)</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.singleQuesFocusTabMobile\" (change)=\"setSingleQuesFocus('m',$event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<label class=\"progressLabel\">\n\t\t\t\t\t\t\t<span class=\"settings_label\">Progress Bar (Desktop)</span>\n\t\t\t\t\t\t\t<span class=\"displayOff\"><input type=\"checkbox\" [(ngModel)]=\"show_progressbr_config\" (change)=\"setProgessBar($event)\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.showProg.hasProg\" (change)=\"setProgessBar($event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-12 col-sm-12 col-xs-12\" [hidden]=\"!formObj.showProg.hasProg\">\n\t\t\t\t\t<div class=\"progressbr_config\" [hidden]=\"!show_progressbr_config\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4 col-xs-4 settings_label\">\n\t\t\t\t\t\t\t\tPosition\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-8 col-sm-8 col-xs-8\">\n\t\t\t\t\t\t\t\t<div class=\"tab_radio_inp margin_bottom10\">\n\t\t\t\t\t\t\t\t\t<label class=\"inner_tab_radio_inp progress_bar_inp\" [ngClass]=\"formObj.showProg.position == 0 ? 'active' : ''\">\n\t\t\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"position\" [value]=\"0\" [(ngModel)]=\"formObj.showProg.position\">\n\t\t\t\t\t\t\t\t\t\t<span>Top</span>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<label class=\"inner_tab_radio_inp progress_bar_inp\" [ngClass]=\"formObj.showProg.position == 1 ? 'active' : ''\">\n\t\t\t\t\t\t\t\t\t\t<input type=\"radio\" name=\"position\" [value]=\"1\" [(ngModel)]=\"formObj.showProg.position\">\n\t\t\t\t\t\t\t\t\t\t<span>Bottom</span>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4 col-xs-4 settings_label\">\n\t\t\t\t\t\t\t\tFormat\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-8 col-sm-8 col-xs-8\">\n\t\t\t\t\t\t\t\t<span class=\"custom_checkbox_grp\">\n\t\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" #progBarPages name=\"format\" [checked]=\"formObj.showProg.format.showPages == '0' || formObj.showProg.format.showPages == '2'\" (change)=\"setProgressBarFormat('page')\">\n\t\t\t\t\t\t\t\t\t\t<span class=\"custom_checkbox_txt\">Show pages completed</span>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span class=\"custom_checkbox_grp\">\n\t\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" #progBarPerc name=\"format\" [checked]=\"formObj.showProg.format.showPages == '1' || formObj.showProg.format.showPages == '2'\" (change)=\"setProgressBarFormat('perc')\">\n\t\t\t\t\t\t\t\t\t\t<span class=\"custom_checkbox_txt\">Show percentage completed</span>\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-md-6 col-sm-6 col-xs-6\">\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn sur_settings_done_btn\" (click)=\"setConfigOfProgressBar()\">Done</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">Page Title</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.showPTitle\" (change)=\"setPageTitle($event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">Show Previous Button</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.showPrevBtn\" (change)=\"setPrevBtnDisplay($event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">Page Numbers</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.showPageNumber\" (change)=\"setPageNumbers($event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">Question Symbol</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.showQuesSymbol\" (change)=\"setQuestionSymbol($event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">Question Numbers</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.showQuesNum\" (change)=\"setQuestionNumbers($event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">Required Asterisks</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.required\" (change)=\"setRequired($event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-9 col-sm-9 col-xs-9\">\n\t\t\t\t\t<span class=\"settings_label\">Location Tracking</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 col-sm-3 col-xs-3 text-right settings_col\">\n\t\t\t\t\t<label class=\"switch\">\n\t\t\t\t\t\t<input type=\"checkbox\" class=\"on_off_custom\" [(ngModel)]=\"formObj.trackLocation\" (change)=\"setLocationTracking($event)\">\n\t\t\t\t\t\t<span class=\"slider round\"></span>\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row settings_row\">\n\t\t\t\t<div class=\"col-md-12 col-sm-12 col-xs-12\">\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-md-12 col-sm-12 col-xs-12\">\n\t\t\t\t\t\t\t<span class=\"settings_label\">Buttons Text Settings</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-md-8 col-sm-8 col-xs-8\">\n\t\t\t\t\t\t\t<span class=\"btn-text\" [innerHTML]=\"btnText.previous.text\" [hidden]=\"btnText.previous.action\"></span>\n\t\t\t\t\t\t\t<input type=\"text\" class=\"st-inp\" [(ngModel)]=\"btnText.previous.text\" [hidden]=\"!btnText.previous.action\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4 col-xs-4 text-right settings_col\">\n\t\t\t\t\t\t\t<span [hidden]=\"btnText.previous.action\">\n\t\t\t\t\t\t\t\t<span class=\"edit-btn\" (click)=\"editBtnText('previous')\"></span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span [hidden]=\"!btnText.previous.action\">\n\t\t\t\t\t\t\t\t<span class=\"save-btn\" (click)=\"saveBtnText('previous')\"></span>\n\t\t\t\t\t\t\t\t<span class=\"cancel-btn\" (click)=\"cancelBtnText('previous')\"></span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-8 col-sm-8 col-xs-8\">\n\t\t\t\t\t\t\t<span class=\"btn-text\" [innerHTML]=\"btnText.next.text\" [hidden]=\"btnText.next.action\"></span>\n\t\t\t\t\t\t\t<input type=\"text\" class=\"st-inp\" [(ngModel)]=\"btnText.next.text\" [hidden]=\"!btnText.next.action\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4 col-xs-4 text-right settings_col\">\n\t\t\t\t\t\t\t<span [hidden]=\"btnText.next.action\">\n\t\t\t\t\t\t\t\t<span class=\"edit-btn\" (click)=\"editBtnText('next')\"></span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span [hidden]=\"!btnText.next.action\">\n\t\t\t\t\t\t\t\t<span class=\"save-btn\" (click)=\"saveBtnText('next')\"></span>\n\t\t\t\t\t\t\t\t<span class=\"cancel-btn\" (click)=\"cancelBtnText('next')\"></span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-8 col-sm-8 col-xs-8\">\n\t\t\t\t\t\t\t<span class=\"btn-text\" [innerHTML]=\"btnText.done.text\" [hidden]=\"btnText.done.action\"></span>\n\t\t\t\t\t\t\t<input type=\"text\" class=\"st-inp\" [(ngModel)]=\"btnText.done.text\" [hidden]=\"!btnText.done.action\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4 col-xs-4 text-right settings_col\">\n\t\t\t\t\t\t\t<span [hidden]=\"btnText.done.action\">\n\t\t\t\t\t\t\t\t<span class=\"edit-btn\" (click)=\"editBtnText('done')\"></span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span [hidden]=\"!btnText.done.action\">\n\t\t\t\t\t\t\t\t<span class=\"save-btn\" (click)=\"saveBtnText('done')\"></span>\n\t\t\t\t\t\t\t\t<span class=\"cancel-btn\" (click)=\"cancelBtnText('done')\"></span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-8 col-sm-8 col-xs-8\">\n\t\t\t\t\t\t\t<span class=\"btn-text\" [innerHTML]=\"btnText.exit.text\" [hidden]=\"btnText.exit.action\"></span>\n\t\t\t\t\t\t\t<input type=\"text\" class=\"st-inp\" [(ngModel)]=\"btnText.exit.text\" [hidden]=\"!btnText.exit.action\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4 col-xs-4 text-right settings_col\">\n\t\t\t\t\t\t\t<span [hidden]=\"btnText.exit.action\">\n\t\t\t\t\t\t\t\t<span class=\"edit-btn\" (click)=\"editBtnText('exit')\"></span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span [hidden]=\"!btnText.exit.action\">\n\t\t\t\t\t\t\t\t<span class=\"save-btn\" (click)=\"saveBtnText('exit')\"></span>\n\t\t\t\t\t\t\t\t<span class=\"cancel-btn\" (click)=\"cancelBtnText('exit')\"></span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-8 col-sm-8 col-xs-8\">\n\t\t\t\t\t\t\t<span class=\"btn-text\" [innerHTML]=\"btnText.endBtn.text\" [hidden]=\"btnText.endBtn.action\"></span>\n\t\t\t\t\t\t\t<input type=\"text\" class=\"st-inp\" [(ngModel)]=\"btnText.endBtn.text\" [hidden]=\"!btnText.endBtn.action\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-4 col-sm-4 col-xs-4 text-right settings_col\">\n\t\t\t\t\t\t\t<span [hidden]=\"btnText.endBtn.action\">\n\t\t\t\t\t\t\t\t<span class=\"edit-btn\" (click)=\"editBtnText('endBtn')\"></span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span [hidden]=\"!btnText.endBtn.action\">\n\t\t\t\t\t\t\t\t<span class=\"save-btn\" (click)=\"saveBtnText('endBtn')\"></span>\n\t\t\t\t\t\t\t\t<span class=\"cancel-btn\" (click)=\"cancelBtnText('endBtn')\"></span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n\n<div class=\"right-container\" *ngIf=\"surveyData\">\n\t<div [ngStyle]=\"themeData?.survey?.body\" class=\"settings_main_list\">\n\t\t<div [ngStyle]=\"themeData?.survey?.header\">\n\t\t\t<div class=\"survey_header settings-max-width\">\n\t\t\t\t<div *ngIf=\"formObj.logo.hasLogo == 1 && formObj.logo.position == 'above'\" class=\"logo_div\" [style.text-align]=\"formObj.logo.allignment\">\n\t\t\t    <img class=\"display-inline img-responsive\" [src]=\"logoDetails?.src\">\n\t\t\t  </div>\n\t\t\t\t<div [hidden]=\"!formObj.showTitle\" [ngStyle]=\"themeData?.survey?.title\">\n\t\t\t\t\t<span class=\"survey_title\" [innerHTML]=\"surveyData.surveyTitle\"></span>\n\t\t\t\t</div>\n\t\t\t\t<div *ngIf=\"formObj.logo.hasLogo == 1 && formObj.logo.position == 'below'\" class=\"logo_div\" [style.text-align]=\"formObj.logo.allignment\">\n\t\t\t    <img class=\"display-inline img-responsive\" [src]=\"logoDetails?.src\">\n\t\t\t  </div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"settings-max-width page_div create_survey_div\" [ngStyle]=\"themeDetails?.pageTheme[pageObj._id]?.body\" *ngFor=\"let pageObj of formObj.pageFields; index as page_idx\">\n\t\t\t<div [ngStyle]=\"themeDetails?.pageTheme[pageObj._id]?.header\">\n\t\t\t\t<div class=\"exit_link_div\" [hidden]=\"!(formObj.showExit)\">\n\t\t\t\t\t<button type=\"button\" class=\"btn exit_btn\">{{formObj.exit}}</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"page_num_div\" [hidden]=\"!formObj.showPageNumber\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\tPage\n\t\t\t\t\t\t{{surveyData.allPagesAndQues.data[pageObj._id].count}}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"page_header\" [hidden]=\"!formObj.showPTitle\">\n\t\t\t\t  <div class=\"page_title break_words\" [ngStyle]=\"themeDetails?.pageTheme[pageObj._id]?.title\">\n\t\t\t\t    <p [innerHTML]=\"surveyData.allPagesAndQues.data[pageObj._id].title || ''\"></p>\n\t\t\t\t  </div>\n\t\t\t\t  <div class=\"page_description\" [ngStyle]=\"themeDetails?.pageTheme[pageObj._id]?.desc\">\n\t\t\t\t    <p [innerHTML]=\"surveyData.allPagesAndQues.data[pageObj._id].desc || ''\"></p>\n\t\t\t\t  </div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"progress-bar-div\" [ngStyle]=\"themeData?.survey?.progressBar\" [hidden]=\"!(formObj.showProg.hasProg && !formObj.showProg.position)\">\n\t\t\t\t\t<app-progress-bar\n\t\t\t\t\t\t[inpData]=\"{count: surveyData.allPagesAndQues.data[pageObj._id].count, totalPages: formObj.pageFields.length, 'format': formObj.showProg.format}\"\n\t\t\t\t\t\t[color]=\"themeData?.survey?.progressBar?.color\">\n\t\t\t\t\t</app-progress-bar>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"page_body\">\n\t\t    <div class=\"question_body\" [ngStyle]=\"themeDetails?.quesTheme[question._id]?.body\" *ngFor=\"let question of surveyData.allPagesAndQues.data[pageObj._id].ques;index as ques_idx\">\n\t\t\t\t\t<app-question-template\n\t\t\t\t\t\t[questionData]=\"{'count':question.count, 'form': allQuestionsInFormGroup[question._id]}\"\n\t\t\t\t\t\t[themeInp]=\"{'surTheme': themeData?.survey, 'quesTheme': themeDetails?.quesTheme[question._id], 'optTheme': themeDetails?.optionTheme[question._id]}\">\n\t\t\t\t\t</app-question-template>\n\t\t    </div>\n\t\t\t</div>\n\t\t\t<div class=\"progress-bar-div\" [ngStyle]=\"themeData?.survey?.progressBar\" [hidden]=\"!(formObj.showProg.hasProg && formObj.showProg.position)\">\n\t\t\t\t<app-progress-bar\n\t\t\t\t\t[inpData]=\"{count: surveyData.allPagesAndQues.data[pageObj._id].count, totalPages: formObj.pageFields.length, 'format': formObj.showProg.format}\"\n\t\t\t\t\t[color]=\"themeData?.survey?.progressBar?.color\">\n\t\t\t\t</app-progress-bar>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.settings/survey.settings.component.scss":
/***/ (function(module, exports) {

module.exports = ".progressbr_config {\n  background-color: rgba(243, 243, 243, 0.88);\n  padding: 10px;\n  border-radius: 4px;\n  -webkit-box-shadow: 0px 0px 2px 1px #e5e5e5;\n          box-shadow: 0px 0px 2px 1px #e5e5e5;\n  margin-bottom: 12px; }\n\n.displayOff {\n  display: none;\n  float: right; }\n\n.progressLabel {\n  width: 100%;\n  display: inline-block;\n  cursor: pointer; }\n\n.settings_label {\n  font-family: 'Helvetica Neue Medium';\n  font-size: 12px;\n  font-weight: 400; }\n\n.settings_row {\n  padding-top: 15px;\n  padding-bottom: 5px;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1); }\n\n.settings_col {\n  padding-top: 3px; }\n\n.page_header {\n  padding: 0 0 20px 0; }\n\n.question_body {\n  padding: 30px 20px;\n  margin-bottom: 20px; }\n\n.settings-max-width {\n  max-width: 896px;\n  margin: auto; }\n\n::ng-deep .settings_main_list .question_body .new_ques_text {\n  margin-bottom: 15px; }\n\n.settings_content {\n  padding: 15px;\n  overflow-y: auto;\n  height: calc(100vh - 102px); }\n\n.margin_bottom10 {\n  margin-bottom: 10px; }\n\n.progress_bar_inp {\n  width: 50%;\n  padding: 3px !important; }\n\n.sur_settings_done_btn {\n  padding: 4px 8px;\n  font-size: 12px;\n  color: white;\n  background-color: #2392ED;\n  font-family: 'Helvetica Neue Medium'; }\n\n.st-inp {\n  border: 0;\n  border-bottom: 1px solid #a5a5a5; }\n\n.btn-text {\n  font-size: 12px; }\n\n.edit-btn {\n  display: inline-block;\n  background: url(/assets/images/editSurvey/customise.svg);\n  background-repeat: no-repeat;\n  height: 18px;\n  width: 22px;\n  cursor: pointer; }\n\n.save-btn {\n  display: inline-block;\n  background: url(/assets/images/editSurvey/checked.svg);\n  background-repeat: no-repeat;\n  height: 18px;\n  width: 22px;\n  background-size: 80%;\n  cursor: pointer; }\n\n.cancel-btn {\n  display: inline-block;\n  background: url(/assets/images/editSurvey/close.svg);\n  background-repeat: no-repeat;\n  height: 14px;\n  width: 12px;\n  cursor: pointer; }\n\n/*----------------------------------------------------------------------------------------*/\n\n.create_survey_div {\n  padding: 14px;\n  background-color: white;\n  border-radius: 4px; }\n\n.survey_header {\n  padding: 10px; }\n\n.page_div {\n  -webkit-box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.07);\n          box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.07);\n  padding: 30px 15px;\n  margin: 25px auto 0 auto; }\n\n.page_div .page_title {\n  line-height: 21px; }\n\n.survey_title {\n  margin-bottom: 30px; }\n\n.exit_link_div {\n  text-align: right;\n  margin-top: -15px; }\n\n.exit_btn {\n  background-color: #f3f3f3;\n  font-size: 12px;\n  font-family: 'Helvetica Neue Medium'; }\n\n.page_num_div {\n  text-align: center;\n  margin-bottom: 10px; }\n\n.progress-bar-div {\n  margin: auto; }\n"

/***/ }),

/***/ "./src/app/routes/survey/edit/survey.settings/survey.settings.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveySettingsComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__survey_main_list_logo_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.main-list/logo.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__survey_main_list_theme_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.main-list/theme.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var SurveySettingsComponent = (function () {
    function SurveySettingsComponent(services, editDataService, logoService, themeService) {
        this.services = services;
        this.editDataService = editDataService;
        this.logoService = logoService;
        this.themeService = themeService;
        this.btnText = {
            previous: {
                text: '',
                edit: false
            },
            next: {
                text: '',
                edit: false
            },
            done: {
                text: '',
                edit: false
            },
            exit: {
                text: '',
                edit: false
            },
            endBtn: {
                text: '',
                edit: false
            }
        };
        this.themeDetails = {
            pageTheme: '',
            quesTheme: '',
            optionTheme: ''
        };
    }
    SurveySettingsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.sId = this.editDataService.sId;
        this.logoDetails = this.logoService.logoDetails;
        this.subscription = this.editDataService.getSurveyData().subscribe(function (data) {
            if (!data)
                return;
            _this.formObj = _this.services.form.formObj;
            _this.surveyData = {};
            _this.surveyData['surveyTitle'] = _this.formObj.getSurveyTitle();
            _this.surveyData['allPagesAndQues'] = _this.services.form.getAllPagesAndQuestions();
            _this.allQuestionsInFormGroup = _this.services.form.allQuestionsInFormGroup;
            _this.logoService.setLogoOnLoad(_this.sId, _this.formObj);
            _this.setBtnsText();
            _this.setTheme();
        });
    };
    SurveySettingsComponent.prototype.setBtnsText = function () {
        this.btnText['previous']['text'] = this.formObj.previous;
        this.btnText['next']['text'] = this.formObj.next;
        this.btnText['done']['text'] = this.formObj.done;
        this.btnText['exit']['text'] = this.formObj.exit;
        this.btnText['endBtn']['text'] = this.formObj.endBtn;
    };
    SurveySettingsComponent.prototype.editBtnText = function (type) {
        this.btnText[type].action = true;
    };
    SurveySettingsComponent.prototype.setSingleQuesFocus = function (type, e) {
        var _this = this;
        var data = {};
        if (e.target.checked) {
            if (type == 'm')
                data['singleQuesFocusTabMobile'] = 1;
            else
                data['singleQuesFocusDesktop'] = 1;
        }
        else {
            if (type == 'm')
                data['singleQuesFocusTabMobile'] = 0;
            else
                data['singleQuesFocusDesktop'] = 0;
        }
        this.services.resource.updateSurveyData(this.sId, data).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.saveBtnText = function (type) {
        var _this = this;
        var res = {};
        res[type] = this.btnText[type].text;
        this.btnText[type].action = false;
        this.services.resource.updateSurveyData(this.sId, res).subscribe(function (data) {
            _this.formObj[type] = data[type];
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.cancelBtnText = function (type) {
        this.btnText[type].action = false;
    };
    SurveySettingsComponent.prototype.setTheme = function () {
        this.themeData = this.formObj.theme;
        this.themeDetails.pageTheme = this.themeService.getPageTheme(this.formObj);
        this.themeDetails.quesTheme = this.themeService.getQuesTheme(this.formObj);
        this.themeDetails.optionTheme = this.themeService.getOptionTheme(this.formObj);
    };
    // logoUploadChange(){
    //   if(this.surveyLogo.nativeElement.files.length > 0){
    //     this.logoService.logoUploadChange(this.sId, this.surveyLogo.nativeElement.files[0], this.formObj);
    //   }
    // }
    //
    // selectLogo(){
    //   this.surveyLogo.nativeElement.click();
    // }
    //
    // removeLogo(){
    //   this.logoService.removeLogo(this.sId, this.formObj);
    //   this.surveyLogo.nativeElement.value = '';
    // }
    //
    // replaceLogo(){
    //   this.surveyLogo.nativeElement.click();
    // }
    //
    // setLogo(){
    //   let data: any = this.formObj.logo;
    //   let res: any = {
    //     logo: data
    //   }
    //   this.services.resource.addLogo(this.sId, res).subscribe((data) => {
    //     this.services.toastr.success('Survey Logo Configuration is successfully set.', 'Updated Successfully');
    //     this.logoService.setLogoOnLoad(this.sId, this.formObj);
    //   })
    // }
    SurveySettingsComponent.prototype.setSurveyTitle = function (e) {
        var _this = this;
        var data = {};
        if (e.target.checked) {
            data['showTitle'] = 1;
        }
        else {
            data['showTitle'] = 0;
        }
        this.services.resource.updateSurveyData(this.sId, data).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.setPrevBtnDisplay = function (e) {
        var _this = this;
        var data = {};
        if (e.target.checked) {
            data['showPrevBtn'] = 1;
        }
        else {
            data['showPrevBtn'] = 0;
        }
        this.services.resource.updateSurveyData(this.sId, data).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.setExitLink = function (e) {
        var _this = this;
        var data = {};
        if (e.target.checked) {
            data['showExit'] = 1;
        }
        else {
            data['showExit'] = 0;
        }
        this.services.resource.updateSurveyData(this.sId, data).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.setQuesProgDesktop = function (e) {
        var _this = this;
        var data = {};
        if (e.target.checked) {
            data['showQProgDesktop'] = 1;
        }
        else {
            data['showQProgDesktop'] = 0;
        }
        this.services.resource.updateSurveyData(this.sId, data).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.setQuesProgMobTab = function (e) {
        var _this = this;
        var data = {};
        if (e.target.checked) {
            data['showQProgMobTab'] = 1;
        }
        else {
            data['showQProgMobTab'] = 0;
        }
        this.services.resource.updateSurveyData(this.sId, data).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.setProgessBar = function (e) {
        var data = this.formObj.showProg;
        this.show_progressbr_config = true;
        if (e.target.checked) {
            data['hasProg'] = 1;
        }
        else {
            data['hasProg'] = 0;
            data['position'] = 0;
            data['format']['showPages'] = 0;
        }
        var res = {
            showProg: data
        };
        this.services.resource.updateSurveyData(this.sId, res).subscribe(function (data) {
            // this.services.toastr.success('Progress Bar is successfully set.', 'Updated Succesfully');
        });
    };
    SurveySettingsComponent.prototype.setProgressBarFormat = function (type) {
        var format = this.formObj.showProg.format;
        if (this.progBarPages.nativeElement.checked && this.progBarPerc.nativeElement.checked) {
            format.showPages = 2;
        }
        else if (this.progBarPages.nativeElement.checked) {
            format.showPages = 0;
        }
        else if (this.progBarPerc.nativeElement.checked) {
            format.showPages = 1;
        }
        else {
            if (type == 'page') {
                format.showPages = 1;
            }
            else if (type == 'perc') {
                format.showPages = 0;
            }
        }
    };
    SurveySettingsComponent.prototype.setConfigOfProgressBar = function () {
        var _this = this;
        var data = this.services.utils.cloneObject(this.formObj.showProg);
        var res = {
            showProg: data
        };
        this.services.resource.updateSurveyData(this.sId, res).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
        this.show_progressbr_config = false;
    };
    SurveySettingsComponent.prototype.setPageTitle = function (e) {
        var _this = this;
        var data = {};
        if (e.target.checked) {
            data['showPTitle'] = 1;
        }
        else {
            data['showPTitle'] = 0;
        }
        this.services.resource.updateSurveyData(this.sId, data).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.setPageNumbers = function (e) {
        var _this = this;
        var data = {};
        if (e.target.checked) {
            data['showPageNumber'] = 1;
        }
        else {
            data['showPageNumber'] = 0;
        }
        this.services.resource.updateSurveyData(this.sId, data).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.setQuestionSymbol = function (e) {
        var _this = this;
        var data = {};
        if (e.target.checked) {
            data['showQuesSymbol'] = 1;
        }
        else {
            data['showQuesSymbol'] = 0;
        }
        this.services.resource.updateSurveyData(this.sId, data).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.setQuestionNumbers = function (e) {
        var _this = this;
        var data = {};
        if (e.target.checked) {
            data['showQuesNum'] = 1;
        }
        else {
            data['showQuesNum'] = 0;
        }
        this.services.resource.updateSurveyData(this.sId, data).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.setRequired = function (e) {
        var _this = this;
        var data = {};
        if (e.target.checked) {
            data['required'] = 1;
        }
        else {
            data['required'] = 0;
        }
        this.services.resource.updateSurveyData(this.sId, data).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.setLocationTracking = function (e) {
        var _this = this;
        var data = {};
        if (e.target.checked) {
            data['trackLocation'] = 1;
        }
        else {
            data['trackLocation'] = 0;
        }
        this.services.resource.updateSurveyData(this.sId, data).subscribe(function (data) {
            _this.services.toastr.success('Survey Setting has been updated succesfully.');
        });
    };
    SurveySettingsComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    return SurveySettingsComponent;
}());
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('progBarPages'),
    __metadata("design:type", Object)
], SurveySettingsComponent.prototype, "progBarPages", void 0);
__decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('progBarPerc'),
    __metadata("design:type", Object)
], SurveySettingsComponent.prototype, "progBarPerc", void 0);
SurveySettingsComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey-settings',
        template: __webpack_require__("./src/app/routes/survey/edit/survey.settings/survey.settings.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/edit/survey.edit.component.scss"), __webpack_require__("./src/app/routes/survey/edit/survey.settings/survey.settings.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_services_module__["a" /* SharedServices */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__edit_data_service__["a" /* EditDataService */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__survey_main_list_logo_service__["a" /* LogoService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__survey_main_list_logo_service__["a" /* LogoService */]) === "function" && _c || Object, typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__survey_main_list_theme_service__["a" /* ThemeService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_4__survey_main_list_theme_service__["a" /* ThemeService */]) === "function" && _d || Object])
], SurveySettingsComponent);

var _a, _b, _c, _d;
//# sourceMappingURL=survey.settings.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/list/survey.list.component.html":
/***/ (function(module, exports) {

module.exports = "<div *ngIf=\"surveyList\">\n\t<p *ngFor=\"let survey of surveyList.data.list\">\n\t\t<a [routerLink]=\"['/survey', 'design', survey._id, 'questions']\">\n\t\t  <span [innerHtml]=\"survey.title\"></span>\n\t\t</a>\n\t</p>\n</div>\n"

/***/ }),

/***/ "./src/app/routes/survey/list/survey.list.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyListComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_services_resource_service__ = __webpack_require__("./src/app/shared/services/resource.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var SurveyListComponent = (function () {
    function SurveyListComponent(resource) {
        this.resource = resource;
    }
    SurveyListComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.options = {};
        this.resource.getSurveyList(this.options).subscribe(function (data) { return _this.surveyList = data; });
    };
    return SurveyListComponent;
}());
SurveyListComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey.list',
        template: __webpack_require__("./src/app/routes/survey/list/survey.list.component.html")
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__shared_services_resource_service__["a" /* AppResourceService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__shared_services_resource_service__["a" /* AppResourceService */]) === "function" && _a || Object])
], SurveyListComponent);

var _a;
//# sourceMappingURL=survey.list.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/preview/survey.preview.component.css":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/routes/survey/preview/survey.preview.component.html":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/routes/survey/preview/survey.preview.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyPreviewComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__ = __webpack_require__("./src/app/shared/services/services.module.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var SurveyPreviewComponent = (function () {
    function SurveyPreviewComponent(route, services) {
        this.route = route;
        this.services = services;
        this.sid = "";
    }
    SurveyPreviewComponent.prototype.ngOnInit = function () {
        this.sid = this.route.params["value"].sid;
    };
    return SurveyPreviewComponent;
}());
SurveyPreviewComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey.preview',
        template: __webpack_require__("./src/app/routes/survey/preview/survey.preview.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/preview/survey.preview.component.css")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_router__["a" /* ActivatedRoute */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_router__["a" /* ActivatedRoute */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_services_module__["a" /* SharedServices */]) === "function" && _b || Object])
], SurveyPreviewComponent);

var _a, _b;
//# sourceMappingURL=survey.preview.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/summary/survey.summary.component.css":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/routes/survey/summary/survey.summary.component.html":
/***/ (function(module, exports) {

module.exports = "<p>\n  survey.summary works!\n</p>\n"

/***/ }),

/***/ "./src/app/routes/survey/summary/survey.summary.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveySummaryComponent; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var SurveySummaryComponent = (function () {
    function SurveySummaryComponent() {
    }
    SurveySummaryComponent.prototype.ngOnInit = function () {
    };
    return SurveySummaryComponent;
}());
SurveySummaryComponent = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'app-survey.summary',
        template: __webpack_require__("./src/app/routes/survey/summary/survey.summary.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/summary/survey.summary.component.css")]
    }),
    __metadata("design:paramtypes", [])
], SurveySummaryComponent);

//# sourceMappingURL=survey.summary.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/survey.component.html":
/***/ (function(module, exports) {

module.exports = "<nav class=\"navbar navbar-fixed-top main_header\">\n  \t<div class=\"container-fluid\">\n  \t\t<div class=\"navbar-header nav_header\">\n\t      \t<button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#myNavbar\" (click)=\"toggleCollapse()\" [ngClass]=\"{'collapsed': isCollapsed}\">\n\t\t        <span class=\"icon-bar\"></span>\n\t\t        <span class=\"icon-bar\"></span>\n\t\t        <span class=\"icon-bar\"></span>\n\t      \t</button>\n          <a><img src=\"/assets/images/s2c-img-mysurvey-logo.png\" height=\"40\"></a>\n          <!-- <span class=\"survey_all_optns\">\n            <div class=\"btn-group\" dropdown>\n              <button dropdownToggle type=\"button\" class=\"btn dropdown-toggle\">\n                <img src=\"./assets/images/editSurvey/more.svg\">\n              </button>\n              <ul *dropdownMenu class=\"dropdown-menu\" role=\"menu\">\n                <li><a href=\"/selectdashboard\">DASHBOARD</a></li>\n                <li><a href=\"/tickets\">TICKETS</a></li>\n                <li><a href=\"/CAPI\">CAPI</a></li>\n                <li><a href=\"/admin/users\">ADMIN</a></li>\n                <li><a href=\"/agents\">AGENT</a></li>\n                <li><a href=\"/accounts\">VIEW DETAILS</a></li>\n                <li><a href=\"/library\">MY LIBRARY</a></li>\n                <li><a href=\"/contacts\">CONTACTS</a></li>\n              </ul>\n            </div>\n          </span> -->\n\t    </div>\n\t    <div class=\"collapse navbar-collapse\" id=\"myNavbar\" [ngClass]=\"{'in': !isCollapsed}\">\n        <button type=\"button\" class=\"btn preview_btn hide_preview_sm pull-right\" (click)=\"openNewWindowForPreview()\"><img src=\"./assets/images/editSurvey/preview.svg\" height=\"16\"><span class=\"hide-on-small-sc\">PREVIEW & TEST</span></button>\n\t    \t<ul class=\"nav navbar-nav main_header_ul\">\n            <li class=\"nav_li\" routerLinkActive=\"active\"><a [href]=\"apiUrl + 'SelectSurvey'\">MY SURVEY</a></li>\n            <li class=\"nav_li\" routerLinkActive=\"active\"><a [href]=\"apiUrl + 'summary?id=' + survey.sId\">SUMMARY</a></li>\n\t\t        <li class=\"nav_li\" routerLinkActive=\"active\"><a routerLink=\"/survey/design/{{survey.sId}}\" (click)=\"changeRouting()\">DESIGN SURVEY</a></li>\n\t\t        <li class=\"nav_li\" routerLinkActive=\"active\"><a [href]=\"apiUrl + 'Collect?id=' + survey.sId\">COLLECT RESPONSE</a></li>\n\t\t        <li class=\"nav_li\" routerLinkActive=\"active\"><a [href]=\"apiUrl + 'questionSummary?id=' + survey.sId\">ANALYSE RESULT</a></li>\n            <li class=\"nav_li\"><button type=\"button\" class=\"btn preview_btn hide_preview_lg\" (click)=\"openNewWindowForPreview()\"><img src=\"./assets/images/editSurvey/preview.svg\" height=\"16\"><span>PREVIEW & TEST</span></button></li>\n        </ul>\n\t\t</div>\n  \t</div>\n</nav>\n\n<section class=\"survey-body\">\n    <div class=\"content-wrapper\" id=\"survey_internal_div\">\n        <router-outlet></router-outlet>\n    </div>\n</section>\n"

/***/ }),

/***/ "./src/app/routes/survey/survey.component.scss":
/***/ (function(module, exports) {

module.exports = ".main_header {\n  background-color: white;\n  height: 60px;\n  border-bottom: 1px solid #E8E6E6;\n  -webkit-box-shadow: -15px 1px 15px 0 rgba(0, 0, 0, 0.07);\n          box-shadow: -15px 1px 15px 0 rgba(0, 0, 0, 0.07);\n  font-family: 'Helvetica Neue Medium';\n  position: fixed;\n  margin-bottom: 0;\n  top: 0; }\n  .main_header .nav_header {\n    padding-top: 10px; }\n  .main_header .survey_all_optns {\n    display: inline-block;\n    cursor: pointer; }\n  .survey-body {\n  margin-top: 60px; }\n  .dropdown-menu::before {\n  content: '';\n  height: 10px;\n  width: 12px;\n  border-left: 7px solid transparent;\n  border-right: 7px solid transparent;\n  border-bottom: 10px solid #b2b1b1;\n  position: absolute;\n  left: 28px;\n  top: -12px; }\n  .dropdown-menu::after {\n  content: '';\n  height: 12px;\n  width: 12px;\n  border-left: 7px solid transparent;\n  border-right: 7px solid transparent;\n  border-bottom: 10px solid white;\n  position: absolute;\n  left: 28px;\n  top: -12px; }\n  .dropdown-menu {\n  padding: 10px;\n  right: 12px;\n  top: 55px;\n  border: 0;\n  left: -15px;\n  -webkit-box-shadow: 0px 0px 9px 2px rgba(0, 0, 0, 0.32);\n          box-shadow: 0px 0px 9px 2px rgba(0, 0, 0, 0.32); }\n  .dropdown-menu a {\n  background-color: white;\n  padding: 6px;\n  text-align: left;\n  width: 100%;\n  color: #868686;\n  margin-top: 7px;\n  font-size: 12px; }\n  .dropdown-menu a:hover {\n  color: #2392ED; }\n  .collapse.in {\n  background-color: white; }\n  .main_header .nav > .nav_li > a {\n  padding-top: 20px;\n  color: #898888;\n  font-size: 12px;\n  line-height: 17px;\n  padding-left: 0;\n  padding-right: 0;\n  margin-left: 22px;\n  /*margin-right: 40px;*/\n  height: 59px; }\n  .main_header .collapse.in .nav_li > a {\n  padding-top: 12px;\n  height: 40px; }\n  .main_header .nav_li a:hover,\n.main_header .nav_li a:focus {\n  background-color: white; }\n  .main_header .nav_li.active a {\n  color: #565656;\n  border-bottom: 5px solid #2392ED; }\n  .main_header .navbar-toggle {\n  border: 1px solid #898888;\n  margin-right: 25px; }\n  .main_header .navbar-toggle .icon-bar {\n  background-color: #898888; }\n  .preview_btn {\n  background-color: #0A73BA;\n  -webkit-box-shadow: -1px 4px 8px 0 rgba(10, 115, 186, 0.39);\n          box-shadow: -1px 4px 8px 0 rgba(10, 115, 186, 0.39);\n  color: white;\n  margin: 12px 6px;\n  padding: 6px 16px;\n  font-size: 12px; }\n  @media (min-width: 768px) {\n  .main_header .main_header_ul {\n    float: right; }\n  .hide_preview_lg {\n    display: none; } }\n  @media (max-width: 767px) {\n  .hide_preview_sm {\n    display: none; } }\n  @media (min-width: 991px) {\n  .main_header .main_header_ul {\n    margin-right: 30px; } }\n  @media (max-width: 990px) {\n  .main_header .nav > .nav_li > a {\n    margin-left: 10px;\n    margin-right: 10px;\n    font-size: 10px; }\n  .hide-on-small-sc {\n    display: none; } }\n"

/***/ }),

/***/ "./src/app/routes/survey/survey.component.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Survey; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shared_services_constants_service__ = __webpack_require__("./src/app/shared/services/constants.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__edit_edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var Survey = (function () {
    function Survey(editDataServ, router, consServ) {
        this.editDataServ = editDataServ;
        this.router = router;
        this.consServ = consServ;
        this.isCollapsed = true;
    }
    Survey.prototype.ngOnInit = function () {
        this.apiUrl = this.consServ.apiUrl;
        this.survey = this.editDataServ;
    };
    Survey.prototype.toggleCollapse = function () {
        this.isCollapsed = !this.isCollapsed;
    };
    Survey.prototype.changeRouting = function () {
        this.isCollapsed = true;
    };
    Survey.prototype.openNewWindowForPreview = function () {
        window.open(window.location.protocol + "//" + window.location.host + '/survey/preview/' + this.editDataServ.sId, 'targetWindow', 'toolbar=no, location=no, status=no, menubar=no, scrollbars=yes, resizable=yes');
    };
    return Survey;
}());
Survey = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
        selector: 'survey',
        template: __webpack_require__("./src/app/routes/survey/survey.component.html"),
        styles: [__webpack_require__("./src/app/routes/survey/survey.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_3__edit_edit_data_service__["a" /* EditDataService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_3__edit_edit_data_service__["a" /* EditDataService */]) === "function" && _a || Object, typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_1__angular_router__["e" /* Router */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_1__angular_router__["e" /* Router */]) === "function" && _b || Object, typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__shared_services_constants_service__["a" /* ConstantsService */] !== "undefined" && __WEBPACK_IMPORTED_MODULE_2__shared_services_constants_service__["a" /* ConstantsService */]) === "function" && _c || Object])
], Survey);

var _a, _b, _c;
//# sourceMappingURL=survey.component.js.map

/***/ }),

/***/ "./src/app/routes/survey/survey.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SurveyModule", function() { return SurveyModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_shared_module__ = __webpack_require__("./src/app/shared/shared.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__survey_component__ = __webpack_require__("./src/app/routes/survey/survey.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__edit_survey_edit_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.edit.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__edit_survey_question_edit_survey_question_edit_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__edit_survey_question_edit_question_piping_question_piping_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/question.piping/question.piping.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__edit_survey_question_edit_question_validation_question_validation_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/question.validation/question.validation.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__edit_survey_question_edit_row_col_options_row_col_options_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/row.col.options/row.col.options.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__edit_survey_design_survey_design_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/survey.design.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__edit_survey_main_list_survey_main_list_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.main-list/survey.main-list.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__edit_survey_flow_survey_flow_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.flow/survey.flow.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__edit_survey_intro_survey_intro_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.intro/survey.intro.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__edit_survey_randomization_survey_randomization_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.randomization/survey.randomization.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__edit_survey_add_question_survey_add_question_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.add.question/survey.add.question.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__edit_survey_add_question_survey_deleted_question_survey_deleted_question_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.add.question/survey.deleted-question/survey.deleted-question.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__edit_survey_design_left_panel_logics_logics_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/logics.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__edit_survey_design_left_panel_logics_skip_logic_skip_logic_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/skip.logic/skip.logic.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__edit_survey_design_left_panel_logics_display_logic_display_logic_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/display.logic/display.logic.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__edit_survey_design_left_panel_logics_delayed_branching_delayed_branching_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/delayed.branching/delayed.branching.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__edit_survey_design_left_panel_logics_edata_logic_edata_logic_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/edata.logic/edata.logic.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__edit_survey_design_left_panel_logics_ticket_generation_ticket_generation_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/ticket.generation/ticket.generation.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__edit_survey_design_left_panel_logics_redirect_logic_redirect_logic_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/redirect.logic/redirect.logic.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__edit_survey_design_left_panel_logics_promoter_amplification_promoter_amplification_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logics/promoter.amplification/promoter.amplification.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__edit_survey_advance_survey_advance_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/survey.advance.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__edit_survey_advance_quota_quota_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/quota/quota.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__edit_survey_advance_ticket_rule_ticket_rule_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/ticket-rule/ticket-rule.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__edit_survey_settings_survey_settings_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.settings/survey.settings.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__edit_survey_design_left_panel_carry_forward_carry_forward_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/carry.forward/carry.forward.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__edit_survey_design_left_panel_recode_value_recode_value_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/recode.value/recode.value.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__edit_survey_copy_question_survey_copy_question_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.copy.question/survey.copy.question.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__edit_survey_advance_language_translate_language_translate_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/language.translate/language.translate.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__edit_survey_advance_language_list_language_list_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/language.list/language.list.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__edit_question_actions_header_question_actions_header_component__ = __webpack_require__("./src/app/routes/survey/edit/question.actions.header/question.actions.header.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_33__edit_survey_page_delete_survey_page_delete_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.page.delete/survey.page.delete.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_34__edit_survey_design_left_panel_left_panel_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/left.panel.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_35__edit_ques_del_notification_ques_del_notification_component__ = __webpack_require__("./src/app/routes/survey/edit/ques.del.notification/ques.del.notification.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_36__edit_survey_design_left_panel_survey_page_title_settings_survey_page_title_settings_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/survey-page-title-settings/survey-page-title-settings.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_37__edit_survey_design_left_panel_logo_settings_logo_settings_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/left.panel/logo-settings/logo-settings.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_38__edit_survey_advance_reports_page_reports_page_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/reports.page/reports.page.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_39__analyse_survey_analyse_component__ = __webpack_require__("./src/app/routes/survey/analyse/survey.analyse.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_40__collect_survey_collect_component__ = __webpack_require__("./src/app/routes/survey/collect/survey.collect.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_41__preview_survey_preview_component__ = __webpack_require__("./src/app/routes/survey/preview/survey.preview.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_42__summary_survey_summary_component__ = __webpack_require__("./src/app/routes/survey/summary/survey.summary.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_43__list_survey_list_component__ = __webpack_require__("./src/app/routes/survey/list/survey.list.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_44__edit_edit_data_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.data.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_45__edit_edit_constants_service__ = __webpack_require__("./src/app/routes/survey/edit/edit.constants.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_46__edit_survey_question_edit_survey_question_edit_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_47__edit_survey_advance_criteria_criteria_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/criteria/criteria.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_48__edit_survey_advance_quota_quota_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/quota/quota.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_49__edit_survey_advance_ticket_rule_ticket_rule_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/ticket-rule/ticket-rule.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_50__edit_survey_question_edit_question_piping_question_piping_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/question.piping/question.piping.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_51__edit_survey_main_list_logo_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.main-list/logo.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_52__edit_survey_randomization_randomization_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.randomization/randomization.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_53__edit_survey_main_list_page_operations_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.main-list/page.operations.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_54__edit_survey_main_list_theme_service__ = __webpack_require__("./src/app/routes/survey/edit/survey.main-list/theme.service.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_55__edit_edit_pipe__ = __webpack_require__("./src/app/routes/survey/edit/edit.pipe.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_56_ngx_bootstrap_accordion__ = __webpack_require__("./node_modules/ngx-bootstrap/accordion/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_57_ngx_bootstrap_tabs__ = __webpack_require__("./node_modules/ngx-bootstrap/tabs/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_58_ngx_bootstrap_dropdown__ = __webpack_require__("./node_modules/ngx-bootstrap/dropdown/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_59_ngx_bootstrap_modal__ = __webpack_require__("./node_modules/ngx-bootstrap/modal/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_60__survey_routes_module__ = __webpack_require__("./src/app/routes/survey/survey.routes.module.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61_ngx_color_picker__ = __webpack_require__("./node_modules/ngx-color-picker/dist/index.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_61_ngx_color_picker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_61_ngx_color_picker__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_62_ng2_img_cropper__ = __webpack_require__("./node_modules/ng2-img-cropper/index.js");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






















































// import { ImageUploadService } from './edit/survey.question.edit/image.upload/image.upload.service';









var SurveyModule = (function () {
    function SurveyModule() {
    }
    return SurveyModule;
}());
SurveyModule = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        imports: [
            __WEBPACK_IMPORTED_MODULE_1__shared_shared_module__["a" /* SharedModule */],
            __WEBPACK_IMPORTED_MODULE_60__survey_routes_module__["a" /* SurveyRoutesModule */],
            __WEBPACK_IMPORTED_MODULE_56_ngx_bootstrap_accordion__["a" /* AccordionModule */].forRoot(),
            __WEBPACK_IMPORTED_MODULE_57_ngx_bootstrap_tabs__["a" /* TabsModule */].forRoot(),
            __WEBPACK_IMPORTED_MODULE_58_ngx_bootstrap_dropdown__["a" /* BsDropdownModule */].forRoot(),
            __WEBPACK_IMPORTED_MODULE_59_ngx_bootstrap_modal__["b" /* ModalModule */].forRoot(),
            __WEBPACK_IMPORTED_MODULE_61_ngx_color_picker__["ColorPickerModule"],
            __WEBPACK_IMPORTED_MODULE_62_ng2_img_cropper__["a" /* ImageCropperModule */]
        ],
        declarations: [
            __WEBPACK_IMPORTED_MODULE_3__edit_survey_edit_component__["a" /* SurveyEdit */],
            __WEBPACK_IMPORTED_MODULE_2__survey_component__["a" /* Survey */],
            __WEBPACK_IMPORTED_MODULE_4__edit_survey_question_edit_survey_question_edit_component__["a" /* SurveyQuestionEditComponent */],
            __WEBPACK_IMPORTED_MODULE_5__edit_survey_question_edit_question_piping_question_piping_component__["a" /* QuestionPipingComponent */],
            __WEBPACK_IMPORTED_MODULE_6__edit_survey_question_edit_question_validation_question_validation_component__["a" /* QuestionValidationComponent */],
            __WEBPACK_IMPORTED_MODULE_7__edit_survey_question_edit_row_col_options_row_col_options_component__["a" /* RowColOptionsComponent */],
            __WEBPACK_IMPORTED_MODULE_8__edit_survey_design_survey_design_component__["a" /* SurveyDesignComponent */],
            __WEBPACK_IMPORTED_MODULE_9__edit_survey_main_list_survey_main_list_component__["a" /* SurveyMainListComponent */],
            __WEBPACK_IMPORTED_MODULE_10__edit_survey_flow_survey_flow_component__["a" /* SurveyFlowComponent */],
            __WEBPACK_IMPORTED_MODULE_11__edit_survey_intro_survey_intro_component__["a" /* SurveyIntroComponent */],
            __WEBPACK_IMPORTED_MODULE_12__edit_survey_randomization_survey_randomization_component__["a" /* SurveyRandomizationComponent */],
            __WEBPACK_IMPORTED_MODULE_13__edit_survey_add_question_survey_add_question_component__["a" /* SurveyAddQuestionComponent */],
            __WEBPACK_IMPORTED_MODULE_47__edit_survey_advance_criteria_criteria_component__["a" /* CriteriaComponent */],
            __WEBPACK_IMPORTED_MODULE_15__edit_survey_design_left_panel_logics_logics_component__["a" /* LogicsComponent */],
            __WEBPACK_IMPORTED_MODULE_16__edit_survey_design_left_panel_logics_skip_logic_skip_logic_component__["a" /* SkipLogicComponent */],
            __WEBPACK_IMPORTED_MODULE_17__edit_survey_design_left_panel_logics_display_logic_display_logic_component__["a" /* DisplayLogicComponent */],
            __WEBPACK_IMPORTED_MODULE_18__edit_survey_design_left_panel_logics_delayed_branching_delayed_branching_component__["a" /* DelayedBranchingComponent */],
            __WEBPACK_IMPORTED_MODULE_19__edit_survey_design_left_panel_logics_edata_logic_edata_logic_component__["a" /* EdataLogicComponent */],
            __WEBPACK_IMPORTED_MODULE_20__edit_survey_design_left_panel_logics_ticket_generation_ticket_generation_component__["a" /* TicketGenerationComponent */],
            __WEBPACK_IMPORTED_MODULE_21__edit_survey_design_left_panel_logics_redirect_logic_redirect_logic_component__["a" /* RedirectLogicComponent */],
            __WEBPACK_IMPORTED_MODULE_22__edit_survey_design_left_panel_logics_promoter_amplification_promoter_amplification_component__["a" /* PromoterAmplificationComponent */],
            __WEBPACK_IMPORTED_MODULE_23__edit_survey_advance_survey_advance_component__["a" /* SurveyAdvanceComponent */],
            __WEBPACK_IMPORTED_MODULE_24__edit_survey_advance_quota_quota_component__["a" /* QuotaComponent */],
            __WEBPACK_IMPORTED_MODULE_25__edit_survey_advance_ticket_rule_ticket_rule_component__["a" /* TicketRuleComponent */],
            __WEBPACK_IMPORTED_MODULE_26__edit_survey_settings_survey_settings_component__["a" /* SurveySettingsComponent */],
            __WEBPACK_IMPORTED_MODULE_39__analyse_survey_analyse_component__["a" /* SurveyAnalyseComponent */],
            __WEBPACK_IMPORTED_MODULE_41__preview_survey_preview_component__["a" /* SurveyPreviewComponent */],
            __WEBPACK_IMPORTED_MODULE_40__collect_survey_collect_component__["a" /* SurveyCollectComponent */],
            __WEBPACK_IMPORTED_MODULE_42__summary_survey_summary_component__["a" /* SurveySummaryComponent */],
            __WEBPACK_IMPORTED_MODULE_43__list_survey_list_component__["a" /* SurveyListComponent */],
            __WEBPACK_IMPORTED_MODULE_55__edit_edit_pipe__["a" /* EditPipe */],
            __WEBPACK_IMPORTED_MODULE_27__edit_survey_design_left_panel_carry_forward_carry_forward_component__["a" /* CarryForwardComponent */],
            __WEBPACK_IMPORTED_MODULE_28__edit_survey_design_left_panel_recode_value_recode_value_component__["a" /* RecodeValueComponent */],
            __WEBPACK_IMPORTED_MODULE_29__edit_survey_copy_question_survey_copy_question_component__["a" /* SurveyCopyQuestionComponent */],
            __WEBPACK_IMPORTED_MODULE_30__edit_survey_advance_language_translate_language_translate_component__["a" /* LanguageTranslateComponent */],
            __WEBPACK_IMPORTED_MODULE_31__edit_survey_advance_language_list_language_list_component__["a" /* LanguageListComponent */],
            __WEBPACK_IMPORTED_MODULE_32__edit_question_actions_header_question_actions_header_component__["a" /* QuestionActionsHeaderComponent */],
            __WEBPACK_IMPORTED_MODULE_33__edit_survey_page_delete_survey_page_delete_component__["a" /* SurveyPageDeleteComponent */],
            __WEBPACK_IMPORTED_MODULE_34__edit_survey_design_left_panel_left_panel_component__["a" /* LeftPanelComponent */],
            __WEBPACK_IMPORTED_MODULE_35__edit_ques_del_notification_ques_del_notification_component__["a" /* QuesDelNotificationComponent */],
            __WEBPACK_IMPORTED_MODULE_14__edit_survey_add_question_survey_deleted_question_survey_deleted_question_component__["a" /* SurveyDeletedQuestionComponent */],
            __WEBPACK_IMPORTED_MODULE_36__edit_survey_design_left_panel_survey_page_title_settings_survey_page_title_settings_component__["a" /* SurveyPageTitleSettingsComponent */],
            __WEBPACK_IMPORTED_MODULE_37__edit_survey_design_left_panel_logo_settings_logo_settings_component__["a" /* LogoSettingsComponent */],
            __WEBPACK_IMPORTED_MODULE_38__edit_survey_advance_reports_page_reports_page_component__["a" /* ReportsPageComponent */]
        ],
        providers: [
            __WEBPACK_IMPORTED_MODULE_44__edit_edit_data_service__["a" /* EditDataService */],
            __WEBPACK_IMPORTED_MODULE_45__edit_edit_constants_service__["a" /* EditConstantsService */],
            __WEBPACK_IMPORTED_MODULE_46__edit_survey_question_edit_survey_question_edit_service__["a" /* SurveyQuestionEditService */],
            __WEBPACK_IMPORTED_MODULE_48__edit_survey_advance_quota_quota_service__["a" /* QuotaService */],
            __WEBPACK_IMPORTED_MODULE_55__edit_edit_pipe__["a" /* EditPipe */],
            __WEBPACK_IMPORTED_MODULE_50__edit_survey_question_edit_question_piping_question_piping_service__["a" /* QuestionPipingService */],
            __WEBPACK_IMPORTED_MODULE_49__edit_survey_advance_ticket_rule_ticket_rule_service__["a" /* TicketRuleService */],
            __WEBPACK_IMPORTED_MODULE_51__edit_survey_main_list_logo_service__["a" /* LogoService */],
            __WEBPACK_IMPORTED_MODULE_52__edit_survey_randomization_randomization_service__["a" /* RandomizationService */],
            __WEBPACK_IMPORTED_MODULE_53__edit_survey_main_list_page_operations_service__["a" /* PageOperationsService */],
            __WEBPACK_IMPORTED_MODULE_54__edit_survey_main_list_theme_service__["a" /* ThemeService */]
            // ImageUploadService
        ]
    })
], SurveyModule);

//# sourceMappingURL=survey.module.js.map

/***/ }),

/***/ "./src/app/routes/survey/survey.routes.module.ts":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SurveyRoutesModule; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__survey_component__ = __webpack_require__("./src/app/routes/survey/survey.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__edit_survey_edit_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.edit.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__edit_survey_question_edit_survey_question_edit_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.question.edit/survey.question.edit.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__edit_survey_design_survey_design_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.design/survey.design.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__edit_survey_advance_survey_advance_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.advance/survey.advance.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__edit_survey_settings_survey_settings_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.settings/survey.settings.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__analyse_survey_analyse_component__ = __webpack_require__("./src/app/routes/survey/analyse/survey.analyse.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__collect_survey_collect_component__ = __webpack_require__("./src/app/routes/survey/collect/survey.collect.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__summary_survey_summary_component__ = __webpack_require__("./src/app/routes/survey/summary/survey.summary.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__list_survey_list_component__ = __webpack_require__("./src/app/routes/survey/list/survey.list.component.ts");
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__edit_survey_intro_survey_intro_component__ = __webpack_require__("./src/app/routes/survey/edit/survey.intro/survey.intro.component.ts");
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};













var surveyRoutes = [
    { path: '',
        component: __WEBPACK_IMPORTED_MODULE_2__survey_component__["a" /* Survey */],
        children: [
            { path: '', component: __WEBPACK_IMPORTED_MODULE_11__list_survey_list_component__["a" /* SurveyListComponent */] },
            { path: 'design/:sid',
                component: __WEBPACK_IMPORTED_MODULE_3__edit_survey_edit_component__["a" /* SurveyEdit */],
                children: [
                    { path: 'questions', component: __WEBPACK_IMPORTED_MODULE_5__edit_survey_design_survey_design_component__["a" /* SurveyDesignComponent */] },
                    { path: 'tips', loadChildren: './edit/survey.tips/survey.tips.module#TipsModule' },
                    { path: 'question/:qid', component: __WEBPACK_IMPORTED_MODULE_4__edit_survey_question_edit_survey_question_edit_component__["a" /* SurveyQuestionEditComponent */] },
                    { path: 'intro', component: __WEBPACK_IMPORTED_MODULE_12__edit_survey_intro_survey_intro_component__["a" /* SurveyIntroComponent */] },
                    { path: 'advance', component: __WEBPACK_IMPORTED_MODULE_6__edit_survey_advance_survey_advance_component__["a" /* SurveyAdvanceComponent */] },
                    { path: 'themes', loadChildren: './edit/survey.themes/survey.themes.module#ThemesModule' },
                    { path: 'settings', component: __WEBPACK_IMPORTED_MODULE_7__edit_survey_settings_survey_settings_component__["a" /* SurveySettingsComponent */] },
                    { path: '**', redirectTo: 'questions' }
                ]
            },
            { path: 'analyse',
                component: __WEBPACK_IMPORTED_MODULE_8__analyse_survey_analyse_component__["a" /* SurveyAnalyseComponent */]
            },
            { path: 'collect',
                component: __WEBPACK_IMPORTED_MODULE_9__collect_survey_collect_component__["a" /* SurveyCollectComponent */]
            },
            { path: 'summary',
                component: __WEBPACK_IMPORTED_MODULE_10__summary_survey_summary_component__["a" /* SurveySummaryComponent */]
            },
        ]
    }
];
var SurveyRoutesModule = (function () {
    function SurveyRoutesModule() {
    }
    return SurveyRoutesModule;
}());
SurveyRoutesModule = __decorate([
    Object(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
        imports: [
            __WEBPACK_IMPORTED_MODULE_1__angular_router__["f" /* RouterModule */].forChild(surveyRoutes)
        ],
        exports: [
            __WEBPACK_IMPORTED_MODULE_1__angular_router__["f" /* RouterModule */]
        ]
    })
], SurveyRoutesModule);

//# sourceMappingURL=survey.routes.module.js.map

/***/ })

});
//# sourceMappingURL=survey.module.chunk.js.map